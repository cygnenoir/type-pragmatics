module names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/editor/-


rules

  nabl-get-scope =
    ?mod@Module(m, _, _)
    ; ![ NablNsSort()
       , NablNsSymbol()
       , NablNsAxiom()
       , NablNsGoal()
       ]

  nabl-get-name :
    mod@Module(m, _, _) -> m

  nabl-name-apply(s) =
    id

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?mod@Module(m, _, _)
    ; (id
       ; origin-track-forced(
           Module(
             nabl-def(
               ?c-uri1__
             , ?s-uri1__
             | lang__
             , partition__
             , uniques__
             , uri__
             , uri__
             , NablNsModule()
             , Unique()
             , Current()
             , [ NablNsSort()
               , NablNsSymbol()
               , NablNsAxiom()
               , NablNsGoal()
               ]
             , []
             )
           , id
           , id
           )
         |
         ))
    ; where(i-2__ := <nabl-def(
                        ?c-uri2__
                      , ?s-uri2__
                      | lang__
                      , partition__
                      , uniques__
                      , c-uri1__
                      , s-uri1__
                      , NablNsSort()
                      , Unique()
                      , Current()
                      , []
                      , []
                      )> "Bool")
    ; match(child-uris__|c-uri2__)
    ; match(sibl-uris__|s-uri2__)
    ; match(implicits__|[i-2__])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?mod@Module(m, _, _)
    ; (where([i-2__] := implicits__)
       ; id
       ; Module(
           nabl-store-props(
           | partition__
           , [Prop(NablProp_module-ref(), mod, [])]
           )
         , id
         , id
         ))
    ; fail

  nabl-get-name :
    Import(m) -> m

  nabl-name-apply(s) =
    Import(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?Import(m)
    ; origin-track-forced(
        Import(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsModule()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-import-site(|lang__, partition__, uniques__, uris__, states__) =
    ?Import(m)
    ; origin-track-forced(
        nabl-import(
        | lang__
        , partition__
        , uniques__
        , uris__
        , [ Wildcard(
              [ Import(lang__, NablNsSort())
              , Import(lang__, NablNsSymbol())
              , Import(lang__, NablNsAxiom())
              ]
            , Context(
                NablNsModule()
              , m
              , []
              , Current()
              )
            , Current()
            , []
            )
          ]
        )
      |
      )

  nabl-scoping-site =
    ?Local(_)
    ; nabl-scope(
      | [ NablNsSort()
        , NablNsSymbol()
        , NablNsAxiom()
        , NablNsGoal()
        ]
      )

  nabl-get-scope =
    ?Local(_)
    ; ![ NablNsSort()
       , NablNsSymbol()
       , NablNsAxiom()
       , NablNsGoal()
       ]

  nabl-get-name :
    SortDef(s) -> s

  nabl-name-apply(s) =
    SortDef(s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?SortDef(s)
    ; origin-track-forced(
        SortDef(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsSort()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    SortRef(s) -> s

  nabl-name-apply(s) =
    SortRef(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?SortRef(s)
    ; origin-track-forced(
        SortRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsSort()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    ConstructorDecl(c, _, _) -> c

  nabl-name-apply(s) =
    ConstructorDecl(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?ConstructorDecl(c, _, _)
    ; origin-track-forced(
        ConstructorDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsSymbol()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    FunctionDef(FunctionSig(f, _, _), _) -> f

  nabl-name-apply(s) =
    FunctionDef(FunctionSig(s, id, id), id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?FunctionDef(FunctionSig(f, _, _), _)
    ; origin-track-forced(
        FunctionDef(
          origin-track-forced(
            FunctionSig(
              nabl-def(
                ?c-uri1__
              , ?s-uri1__
              | lang__
              , partition__
              , uniques__
              , uri__
              , uri__
              , NablNsSymbol()
              , Unique()
              , Current()
              , []
              , []
              )
            , id
            , id
            )
          |
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-scoping-site =
    ?FunctionEq(f, pat, body)
    ; nabl-scope(|[NablNsSymbol()])

  nabl-get-scope =
    ?FunctionEq(f, pat, body)
    ; ![NablNsSymbol()]

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?FunctionPatVar(v)
    ; origin-track-forced(
        FunctionPatVar(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsSymbol()
          , NonUnique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?FunctionPatVar(v)
    ; origin-track-forced(
        FunctionPatVar(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsSymbol()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    FunctionPatApp(f, args) -> f

  nabl-name-apply(s) =
    FunctionPatApp(s, id)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?FunctionPatApp(f, args)
    ; origin-track-forced(
        FunctionPatApp(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsSymbol()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        , id
        )
      |
      )

  nabl-get-name :
    FunctionExpVar(v) -> v

  nabl-name-apply(s) =
    FunctionExpVar(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?FunctionExpVar(v)
    ; origin-track-forced(
        FunctionExpVar(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsSymbol()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    FunctionExpApp(f, args) -> f

  nabl-name-apply(s) =
    FunctionExpApp(s, id)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?FunctionExpApp(f, args)
    ; origin-track-forced(
        FunctionExpApp(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsSymbol()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        , id
        )
      |
      )

  nabl-scoping-site =
    ?FunctionExpLet(v, e1, e2)
    ; origin-track-forced(
        FunctionExpLet(
          id
        , id
        , nabl-scope(|[NablNsSymbol()])
        )
      |
      )

  nabl-get-name :
    FunctionExpLet(v, e1, e2) -> v

  nabl-name-apply(s) =
    FunctionExpLet(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?FunctionExpLet(v, e1, e2)
    ; origin-track-forced(
        FunctionExpLet(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsSymbol()
          , Unique()
          , [DefScope(e2)]
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-external-def-site(|lang__, partition__, uniques__, uri__, states__, implicits__) =
    ?FunctionExpLet(v, e1, e2)
    ; uri1__ := <nabl-uri> v
    ; <nabl-def-alias(|partition__, uri1__)> e2
    ; fail


imports
  include/STLC


signature
  constructors
    NablNsModule : Namespace
    NablNsSort   : Namespace
    NablNsSymbol : Namespace
    NablNsAxiom  : Namespace
    NablNsGoal   : Namespace


signature
  constructors
    NablProp_module-ref : Property


rules

  nabl-custom-properties(add-properties) =
    ![NablProp_module-ref()] ; add-properties

  module-ref-is(|task*) =
    nabl-prop-calc(|task*, [])

  module-ref-task(|task*) =
    get-or-create-property-task(|task*, NablProp_module-ref())

  module-ref-is(|task*, dep*) =
    nabl-prop-calc(|task*, dep*)

  module-ref-list(|task*) =
    nabl-prop-list(|task*, [])

  module-ref-list(|task*, dep*) =
    nabl-prop-list(|task*, dep*)

  module-ref-lookup(|task*) =
    nabl-prop-lookup(|NablProp_module-ref(), task*, [])

  module-ref-lookup(|task*, dep*) =
    nabl-prop-lookup(|NablProp_module-ref(), task*, dep*)

  module-ref-match(|task*, expected) =
    nabl-prop-match(
    | NablProp_module-ref()
    , task*
    , Eq()
    , expected
    )

  module-ref-match(|task*, relation, expected) =
    nabl-prop-match(|NablProp_module-ref(), task*, relation, expected)

  create-module-ref-task(|task*) =
    fail

  get-module-ref =
    get-property(|NablProp_module-ref())

  store-module-ref(|partition, prop) =
    nabl-store-prop(
    | partition
    , Prop(NablProp_module-ref(), prop, [])
    )

  create-property-task(|partition, kind):
    term -> <create-module-ref-task(|partition)> term
    where NablProp_module-ref() := kind