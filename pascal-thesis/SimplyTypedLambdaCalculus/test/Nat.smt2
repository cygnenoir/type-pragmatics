
(declare-sort Term 0)
(declare-fun lookup (Term Term Term) Bool)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun bind (Term Term Term) Term)
(declare-fun succ (Term) Term)
(declare-fun plus (Term Term) Term)
(declare-fun const-zero () Term)
(declare-fun const-nat () Term)
(define-fun lookup-ctx-base () Bool (forall ((X Term) (T Term) (CTX Term)) (lookup X (bind X T CTX) T)))
(define-fun lookup-ctx-step () Bool (forall ((X Term) (Y Term) (T Term) (T2 Term) (CTX Term)) (=> (and (distinct X Y) (lookup X CTX T)) (lookup X (bind Y T2 CTX) T))))
(define-fun T-zero () Bool (forall ((C Term)) (tcheck C const-zero const-nat)))
(define-fun T-succ () Bool (forall ((C Term) (E Term)) (=> (tcheck C E const-nat) (tcheck C (succ E) const-nat))))
(define-fun T-plus () Bool (forall ((C Term) (E1 Term) (E2 Term)) (=> (and (tcheck C E1 const-nat) (tcheck C E2 const-nat)) (tcheck C (plus E1 E2) const-nat))))
(define-fun T-Nat-inv () Bool (forall ((C Term) (epred Term) (EPRED Term) (e1 Term) (e2 Term) (E Term) (E1 Term) (E2 Term) (T Term)) (=> (tcheck C E T) (or (and (= E const-zero) (= T const-nat)) (or (exists ((epred Term)) (and (= E (succ EPRED)) (= T const-nat))) (exists ((e1 Term) (e2 Term)) (and (= E (plus E1 E2)) (= T const-nat))))))))
(assert lookup-ctx-base)
(assert lookup-ctx-step)
(assert T-zero)
(assert T-succ)
(assert T-plus)
(assert T-Nat-inv)
