
(declare-sort Term 0)
(declare-fun lookup (Term Term Term) Bool)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun bind (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun plus (Term Term) Term)
(declare-fun nat () Term)
(declare-fun const-zero () Term)
(declare-fun const-succ () Term)
(define-fun lookup-ctx-base () Bool (forall ((X Term) (T Term) (CTX Term)) (lookup X (bind X T CTX) T)))
(define-fun lookup-ctx-step () Bool (forall ((X Term) (Y Term) (T Term) (T2 Term) (CTX Term)) (=> (and (distinct X Y) (lookup X CTX T)) (lookup X (bind Y T2 CTX) T))))
(define-fun T-zero () Bool (forall ((C Term)) (tcheck C const-zero (nat))))
(define-fun T-succ () Bool (forall ((C Term) (E Term)) (=> (tcheck C E (nat)) (tcheck C (app const-succ E) (nat)))))
(define-fun T-plus () Bool (forall ((C Term) (E1 Term) (E2 Term)) (=> (and (tcheck C E1 (nat)) (tcheck C E2 (nat))) (tcheck C (plus E1 E2) (nat)))))
(assert lookup-ctx-base)
(assert lookup-ctx-step)
(assert T-zero)
(assert T-succ)
(assert T-plus)
