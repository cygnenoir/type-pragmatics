
(declare-sort Term 0)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun var (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun empty () Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun nothing () Term)
(declare-fun some (Term) Term)
(define-fun EQ-var () Bool (forall ((VAR191 Term) (VAR192 Term)) (and (=> (= (var VAR191) (var VAR192)) (= VAR191 VAR192)) (=> (= VAR191 VAR192) (= (var VAR191) (var VAR192))))))
(define-fun EQ-abs () Bool (forall ((VAR193 Term) (TYP157 Term) (EXP183 Term) (VAR194 Term) (TYP158 Term) (EXP184 Term)) (and (=> (= (fabs VAR193 TYP157 EXP183) (fabs VAR194 TYP158 EXP184)) (and (= VAR193 VAR194) (and (= TYP157 TYP158) (= EXP183 EXP184)))) (=> (and (= VAR193 VAR194) (and (= TYP157 TYP158) (= EXP183 EXP184))) (= (fabs VAR193 TYP157 EXP183) (fabs VAR194 TYP158 EXP184))))))
(define-fun EQ-app () Bool (forall ((EXP185 Term) (EXP186 Term) (EXP187 Term) (EXP188 Term)) (and (=> (= (app EXP185 EXP186) (app EXP187 EXP188)) (and (= EXP185 EXP187) (= EXP186 EXP188))) (=> (and (= EXP185 EXP187) (= EXP186 EXP188)) (= (app EXP185 EXP186) (app EXP187 EXP188))))))
(define-fun EQ-empty () Bool (and (=> (= empty empty) true) (=> true (= empty empty))))
(define-fun EQ-bind () Bool (forall ((VAR195 Term) (TYP159 Term) (CTX70 Term) (VAR196 Term) (TYP160 Term) (CTX71 Term)) (and (=> (= (bind VAR195 TYP159 CTX70) (bind VAR196 TYP160 CTX71)) (and (= VAR195 VAR196) (and (= TYP159 TYP160) (= CTX70 CTX71)))) (=> (and (= VAR195 VAR196) (and (= TYP159 TYP160) (= CTX70 CTX71))) (= (bind VAR195 TYP159 CTX70) (bind VAR196 TYP160 CTX71))))))
(define-fun EQ-arrow () Bool (forall ((TYP161 Term) (TYP162 Term) (TYP163 Term) (TYP164 Term)) (and (=> (= (arrow TYP161 TYP162) (arrow TYP163 TYP164)) (and (= TYP161 TYP163) (= TYP162 TYP164))) (=> (and (= TYP161 TYP163) (= TYP162 TYP164)) (= (arrow TYP161 TYP162) (arrow TYP163 TYP164))))))
(define-fun EQ-nothing () Bool (and (=> (= nothing nothing) true) (=> true (= nothing nothing))))
(define-fun EQ-some () Bool (forall ((TYPE42 Term) (TYPE43 Term)) (and (=> (= (some TYPE42) (some TYPE43)) (= TYPE42 TYPE43)) (=> (= TYPE42 TYPE43) (= (some TYPE42) (some TYPE43))))))
(assert EQ-var)
(assert EQ-abs)
(assert EQ-app)
(assert EQ-empty)
(assert EQ-bind)
(assert EQ-arrow)
(assert EQ-nothing)
(assert EQ-some)
(define-fun DIFF-var-abs () Bool (forall ((VAR197 Term) (VAR198 Term) (TYP165 Term) (EXP189 Term)) (distinct (var VAR197) (fabs VAR198 TYP165 EXP189))))
(define-fun DIFF-var-app () Bool (forall ((VAR199 Term) (EXP190 Term) (EXP191 Term)) (distinct (var VAR199) (app EXP190 EXP191))))
(define-fun DIFF-abs-app () Bool (forall ((VAR200 Term) (TYP166 Term) (EXP192 Term) (EXP193 Term) (EXP194 Term)) (distinct (fabs VAR200 TYP166 EXP192) (app EXP193 EXP194))))
(define-fun DIFF-empty-bind () Bool (forall ((VAR201 Term) (TYP167 Term) (CTX72 Term)) (distinct empty (bind VAR201 TYP167 CTX72))))
(define-fun DIFF-nothing-some () Bool (forall ((TYPE44 Term)) (distinct nothing (some TYPE44))))
(assert DIFF-var-abs)
(assert DIFF-var-app)
(assert DIFF-abs-app)
(assert DIFF-empty-bind)
(assert DIFF-nothing-some)
(declare-fun lookup (Term Term) Term)
(define-fun lookup44 () Bool (forall ((X Term) (VAR203 Term) (CTX74 Term) (RESULT32 Term)) (=> (and (and (= VAR203 X) (= CTX74 empty)) (= RESULT32 (lookup VAR203 CTX74))) (=> true (= RESULT32 nothing)))))
(define-fun lookup42 () Bool (forall ((C Term) (VAR202 Term) (CTX73 Term) (X Term) (Y Term) (RESULT31 Term) (TY Term)) (=> (and (and (= VAR202 X) (= CTX73 (bind Y TY C))) (= RESULT31 (lookup VAR202 CTX73))) (=> (and (= X Y) true) (= RESULT31 (some TY))))))
(define-fun lookup43 () Bool (forall ((TY Term) (VAR202 Term) (CTX73 Term) (Y Term) (RESULT31 Term) (X Term) (C Term)) (=> (and (and (= VAR202 X) (= CTX73 (bind Y TY C))) (= RESULT31 (lookup VAR202 CTX73))) (=> (and (not (= X Y)) true) (= RESULT31 (lookup X C))))))
(assert lookup44)
(assert lookup42)
(assert lookup43)
(define-fun T-var () Bool (forall ((C Term) (X Term) (T Term)) (=> (= (lookup X C) (some T)) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Term) (X Term) (E Term) (S Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Term) (C Term) (E1 Term) (E2 Term) (T Term)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Term) (T Term) (C Term)) (=> (tcheck C E T) (or (exists ((X Term)) (and (= E (var X)) (= (lookup X C) (some T)))) (or (exists ((X Term) (E2 Term) (T1 Term) (T2 Term)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Term) (E2 Term) (S Term)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(define-fun T-Context-Duplicate () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (= X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind X TX C) E T))))
(define-fun T-Context-Swap () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (distinct X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind Y TY (bind X TX C)) E T))))
(define-fun T-Weak () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (and (= (lookup X C) nothing) (tcheck C E T)) (tcheck (bind X S C) E T))))
(assert T-Context-Duplicate)
(assert T-Context-Swap)
(assert T-Weak)
(declare-fun subst (Term Term Term) Term)
(define-fun subst8 () Bool (forall ((VAR206 Term) (EXP199 Term) (EXP200 Term) (X Term) (Y Term) (RESULT35 Term) (E Term)) (=> (and (and (= VAR206 X) (and (= EXP199 E) (= EXP200 (var Y)))) (= RESULT35 (subst VAR206 EXP199 EXP200))) (=> (and (= X Y) true) (= RESULT35 E)))))
(define-fun subst9 () Bool (forall ((E Term) (VAR206 Term) (EXP199 Term) (EXP200 Term) (X Term) (RESULT35 Term) (Y Term)) (=> (and (and (= VAR206 X) (and (= EXP199 E) (= EXP200 (var Y)))) (= RESULT35 (subst VAR206 EXP199 EXP200))) (=> (and (not (= X Y)) true) (= RESULT35 (var Y))))))
(define-fun subst7 () Bool (forall ((VAR205 Term) (EXP197 Term) (EXP198 Term) (RESULT34 Term) (E1 Term) (X Term) (E Term) (E2 Term)) (=> (and (and (= VAR205 X) (and (= EXP197 E) (= EXP198 (app E1 E2)))) (= RESULT34 (subst VAR205 EXP197 EXP198))) (=> true (= RESULT34 (app (subst X E E1) (subst X E E2)))))))
(define-fun subst5 () Bool (forall ((E Term) (VAR204 Term) (EXP195 Term) (EXP196 Term) (X Term) (RESULT33 Term) (Y Term) (T Term) (E1 Term)) (=> (and (and (= VAR204 X) (and (= EXP195 E) (= EXP196 (fabs Y T E1)))) (= RESULT33 (subst VAR204 EXP195 EXP196))) (=> (and (= X Y) true) (= RESULT33 (fabs Y T E1))))))
(define-fun subst6 () Bool (forall ((VAR204 Term) (EXP195 Term) (EXP196 Term) (RESULT33 Term) (Y Term) (T Term) (X Term) (E Term) (E1 Term)) (=> (and (and (= VAR204 X) (and (= EXP195 E) (= EXP196 (fabs Y T E1)))) (= RESULT33 (subst VAR204 EXP195 EXP196))) (=> (and (not (= X Y)) true) (= RESULT33 (fabs Y T (subst X E E1)))))))
(assert subst8)
(assert subst9)
(assert subst7)
(assert subst5)
(assert subst6)
(push 1)
(define-fun T-subst-var-1 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-1))
(check-sat)
(pop 1)
(push 1)
(define-fun T-subst-var-2 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-2))
(check-sat)
(pop 1)
(push 1)
(declare-fun e1app () Term)
(declare-fun e2app () Term)
(define-fun EQ-e1app () Bool (and (=> (= e1app e1app) true) (=> true (= e1app e1app))))
(define-fun EQ-e2app () Bool (and (=> (= e2app e2app) true) (=> true (= e2app e2app))))
(assert EQ-e1app)
(assert EQ-e2app)
(define-fun DIFF-var-e1app () Bool (forall ((VAR207 Term)) (distinct (var VAR207) e1app)))
(define-fun DIFF-abs-e1app () Bool (forall ((VAR208 Term) (TYP168 Term) (EXP201 Term)) (distinct (fabs VAR208 TYP168 EXP201) e1app)))
(define-fun DIFF-app-e1app () Bool (forall ((EXP202 Term) (EXP203 Term)) (distinct (app EXP202 EXP203) e1app)))
(define-fun DIFF-var-e2app () Bool (forall ((VAR209 Term)) (distinct (var VAR209) e2app)))
(define-fun DIFF-abs-e2app () Bool (forall ((VAR210 Term) (TYP169 Term) (EXP204 Term)) (distinct (fabs VAR210 TYP169 EXP204) e2app)))
(define-fun DIFF-app-e2app () Bool (forall ((EXP205 Term) (EXP206 Term)) (distinct (app EXP205 EXP206) e2app)))
(define-fun DIFF-e1app-e2app () Bool (distinct e1app e2app))
(assert DIFF-var-e1app)
(assert DIFF-abs-e1app)
(assert DIFF-app-e1app)
(assert DIFF-var-e2app)
(assert DIFF-abs-e2app)
(assert DIFF-app-e2app)
(assert DIFF-e1app-e2app)
(define-fun T-subst-IH-app1 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e1app T2)) (tcheck C (subst X E e1app) T2))))
(define-fun T-subst-IH-app2 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e2app T2)) (tcheck C (subst X E e2app) T2))))
(assert T-subst-IH-app1)
(assert T-subst-IH-app2)
(push 1)
(define-fun T-subst-app () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (app e1app e2app)) (and (tcheck C E T) (tcheck (bind X T C) E2 T2))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-app))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(define-fun T-subst-abs-1 () Bool (forall ((S Term) (E3 Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S E3)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-1))
(check-sat)
(pop 1)
(push 1)
(declare-fun eabs () Term)
(define-fun EQ-eabs () Bool (and (=> (= eabs eabs) true) (=> true (= eabs eabs))))
(assert EQ-eabs)
(define-fun DIFF-var-eabs () Bool (forall ((VAR211 Term)) (distinct (var VAR211) eabs)))
(define-fun DIFF-abs-eabs () Bool (forall ((VAR212 Term) (TYP170 Term) (EXP207 Term)) (distinct (fabs VAR212 TYP170 EXP207) eabs)))
(define-fun DIFF-app-eabs () Bool (forall ((EXP208 Term) (EXP209 Term)) (distinct (app EXP208 EXP209) eabs)))
(assert DIFF-var-eabs)
(assert DIFF-abs-eabs)
(assert DIFF-app-eabs)
(define-fun T-subst-IH-abs () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) eabs T2)) (tcheck C (subst X E eabs) T2))))
(assert T-subst-IH-abs)
(push 1)
(define-fun T-subst-abs-2 () Bool (forall ((S Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S eabs)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-2))
(check-sat)
(pop 1)
(pop 1)
(define-fun T-subst () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) E2 T2)) (tcheck C (subst X E E2) T2))))
(assert T-subst)
