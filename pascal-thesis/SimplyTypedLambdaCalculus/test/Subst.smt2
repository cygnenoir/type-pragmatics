
(declare-sort Term 0)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun reduce (Term Term) Bool)
(declare-fun var (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun empty () Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun nothing () Term)
(declare-fun some (Term) Term)
(define-fun EQ-var () Bool (forall ((VAR144 Term) (VAR145 Term)) (and (=> (= (var VAR144) (var VAR145)) (= VAR144 VAR145)) (=> (= VAR144 VAR145) (= (var VAR144) (var VAR145))))))
(define-fun EQ-abs () Bool (forall ((VAR146 Term) (TYP126 Term) (EXP162 Term) (VAR147 Term) (TYP127 Term) (EXP163 Term)) (and (=> (= (fabs VAR146 TYP126 EXP162) (fabs VAR147 TYP127 EXP163)) (and (= VAR146 VAR147) (and (= TYP126 TYP127) (= EXP162 EXP163)))) (=> (and (= VAR146 VAR147) (and (= TYP126 TYP127) (= EXP162 EXP163))) (= (fabs VAR146 TYP126 EXP162) (fabs VAR147 TYP127 EXP163))))))
(define-fun EQ-app () Bool (forall ((EXP164 Term) (EXP165 Term) (EXP166 Term) (EXP167 Term)) (and (=> (= (app EXP164 EXP165) (app EXP166 EXP167)) (and (= EXP164 EXP166) (= EXP165 EXP167))) (=> (and (= EXP164 EXP166) (= EXP165 EXP167)) (= (app EXP164 EXP165) (app EXP166 EXP167))))))
(define-fun EQ-empty () Bool (and (=> (= empty empty) true) (=> true (= empty empty))))
(define-fun EQ-bind () Bool (forall ((VAR148 Term) (TYP128 Term) (CTX45 Term) (VAR149 Term) (TYP129 Term) (CTX46 Term)) (and (=> (= (bind VAR148 TYP128 CTX45) (bind VAR149 TYP129 CTX46)) (and (= VAR148 VAR149) (and (= TYP128 TYP129) (= CTX45 CTX46)))) (=> (and (= VAR148 VAR149) (and (= TYP128 TYP129) (= CTX45 CTX46))) (= (bind VAR148 TYP128 CTX45) (bind VAR149 TYP129 CTX46))))))
(define-fun EQ-arrow () Bool (forall ((TYP130 Term) (TYP131 Term) (TYP132 Term) (TYP133 Term)) (and (=> (= (arrow TYP130 TYP131) (arrow TYP132 TYP133)) (and (= TYP130 TYP132) (= TYP131 TYP133))) (=> (and (= TYP130 TYP132) (= TYP131 TYP133)) (= (arrow TYP130 TYP131) (arrow TYP132 TYP133))))))
(define-fun EQ-nothing () Bool (and (=> (= nothing nothing) true) (=> true (= nothing nothing))))
(define-fun EQ-some () Bool (forall ((TYP134 Term) (TYP135 Term)) (and (=> (= (some TYP134) (some TYP135)) (= TYP134 TYP135)) (=> (= TYP134 TYP135) (= (some TYP134) (some TYP135))))))
(assert EQ-var)
(assert EQ-abs)
(assert EQ-app)
(assert EQ-empty)
(assert EQ-bind)
(assert EQ-arrow)
(assert EQ-nothing)
(assert EQ-some)
(define-fun DIFF-var-abs () Bool (forall ((VAR150 Term) (VAR151 Term) (TYP136 Term) (EXP168 Term)) (distinct (var VAR150) (fabs VAR151 TYP136 EXP168))))
(define-fun DIFF-var-app () Bool (forall ((VAR152 Term) (EXP169 Term) (EXP170 Term)) (distinct (var VAR152) (app EXP169 EXP170))))
(define-fun DIFF-abs-app () Bool (forall ((VAR153 Term) (TYP137 Term) (EXP171 Term) (EXP172 Term) (EXP173 Term)) (distinct (fabs VAR153 TYP137 EXP171) (app EXP172 EXP173))))
(define-fun DIFF-empty-bind () Bool (forall ((VAR154 Term) (TYP138 Term) (CTX47 Term)) (distinct empty (bind VAR154 TYP138 CTX47))))
(define-fun DIFF-nothing-some () Bool (forall ((TYP139 Term)) (distinct nothing (some TYP139))))
(assert DIFF-var-abs)
(assert DIFF-var-app)
(assert DIFF-abs-app)
(assert DIFF-empty-bind)
(assert DIFF-nothing-some)
(declare-fun lookup (Term Term) Term)
(define-fun lookup29 () Bool (forall ((X Term) (VAR156 Term) (CTX49 Term) (RESULT46 Term)) (=> (and (and (= VAR156 X) (= CTX49 empty)) (= RESULT46 (lookup VAR156 CTX49))) (=> true (= RESULT46 nothing)))))
(define-fun lookup27 () Bool (forall ((C Term) (VAR155 Term) (CTX48 Term) (X Term) (Y Term) (RESULT45 Term) (TY Term)) (=> (and (and (= VAR155 X) (= CTX48 (bind Y TY C))) (= RESULT45 (lookup VAR155 CTX48))) (=> (and (= X Y) true) (= RESULT45 (some TY))))))
(define-fun lookup28 () Bool (forall ((TY Term) (VAR155 Term) (CTX48 Term) (Y Term) (RESULT45 Term) (X Term) (C Term)) (=> (and (and (= VAR155 X) (= CTX48 (bind Y TY C))) (= RESULT45 (lookup VAR155 CTX48))) (=> (and (not (= X Y)) true) (= RESULT45 (lookup X C))))))
(assert lookup29)
(assert lookup27)
(assert lookup28)
(define-fun T-var () Bool (forall ((C Term) (X Term) (T Term)) (=> (= (lookup X C) (some T)) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Term) (X Term) (E Term) (S Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Term) (C Term) (E1 Term) (E2 Term) (T Term)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Term) (T Term) (C Term)) (=> (tcheck C E T) (or (exists ((X Term)) (and (= E (var X)) (= (lookup X C) (some T)))) (or (exists ((X Term) (E2 Term) (T1 Term) (T2 Term)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Term) (E2 Term) (S Term)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(define-fun T-Context-Duplicate () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (= X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind X TX C) E T))))
(define-fun T-Context-Swap () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (distinct X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind Y TY (bind X TX C)) E T))))
(define-fun T-Weak () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (and (= (lookup X C) nothing) (tcheck C E T)) (tcheck (bind X S C) E T))))
(assert T-Context-Duplicate)
(assert T-Context-Swap)
(assert T-Weak)
(declare-fun subst (Term Term Term) Term)
(define-fun subst48 () Bool (forall ((VAR159 Term) (EXP178 Term) (EXP179 Term) (X Term) (Y Term) (RESULT49 Term) (E Term)) (=> (and (and (= VAR159 X) (and (= EXP178 E) (= EXP179 (var Y)))) (= RESULT49 (subst VAR159 EXP178 EXP179))) (=> (and (= X Y) true) (= RESULT49 E)))))
(define-fun subst49 () Bool (forall ((E Term) (VAR159 Term) (EXP178 Term) (EXP179 Term) (X Term) (RESULT49 Term) (Y Term)) (=> (and (and (= VAR159 X) (and (= EXP178 E) (= EXP179 (var Y)))) (= RESULT49 (subst VAR159 EXP178 EXP179))) (=> (and (not (= X Y)) true) (= RESULT49 (var Y))))))
(define-fun subst47 () Bool (forall ((VAR158 Term) (EXP176 Term) (EXP177 Term) (RESULT48 Term) (E1 Term) (X Term) (E Term) (E2 Term)) (=> (and (and (= VAR158 X) (and (= EXP176 E) (= EXP177 (app E1 E2)))) (= RESULT48 (subst VAR158 EXP176 EXP177))) (=> true (= RESULT48 (app (subst X E E1) (subst X E E2)))))))
(define-fun subst45 () Bool (forall ((E Term) (VAR157 Term) (EXP174 Term) (EXP175 Term) (X Term) (RESULT47 Term) (Y Term) (T Term) (E1 Term)) (=> (and (and (= VAR157 X) (and (= EXP174 E) (= EXP175 (fabs Y T E1)))) (= RESULT47 (subst VAR157 EXP174 EXP175))) (=> (and (= X Y) true) (= RESULT47 (fabs Y T E1))))))
(define-fun subst46 () Bool (forall ((VAR157 Term) (EXP174 Term) (EXP175 Term) (RESULT47 Term) (Y Term) (T Term) (X Term) (E Term) (E1 Term)) (=> (and (and (= VAR157 X) (and (= EXP174 E) (= EXP175 (fabs Y T E1)))) (= RESULT47 (subst VAR157 EXP174 EXP175))) (=> (and (not (= X Y)) true) (= RESULT47 (fabs Y T (subst X E E1)))))))
(assert subst48)
(assert subst49)
(assert subst47)
(assert subst45)
(assert subst46)
(push 1)
(define-fun T-subst-var-1 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-1))
(check-sat)
(pop 1)
(push 1)
(define-fun T-subst-var-2 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-2))
(check-sat)
(pop 1)
(push 1)
(declare-fun e1app () Term)
(declare-fun e2app () Term)
(define-fun EQ-e1app () Bool (and (=> (= e1app e1app) true) (=> true (= e1app e1app))))
(define-fun EQ-e2app () Bool (and (=> (= e2app e2app) true) (=> true (= e2app e2app))))
(assert EQ-e1app)
(assert EQ-e2app)
(define-fun T-subst-IH-app1 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e1app T2)) (tcheck C (subst X E e1app) T2))))
(define-fun T-subst-IH-app2 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e2app T2)) (tcheck C (subst X E e2app) T2))))
(assert T-subst-IH-app1)
(assert T-subst-IH-app2)
(push 1)
(define-fun T-subst-app () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (app e1app e2app)) (and (tcheck C E T) (tcheck (bind X T C) E2 T2))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-app))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(define-fun T-subst-abs-1 () Bool (forall ((S Term) (E3 Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S E3)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-1))
(check-sat)
(pop 1)
(push 1)
(declare-fun eabs () Term)
(define-fun EQ-eabs () Bool (and (=> (= eabs eabs) true) (=> true (= eabs eabs))))
(assert EQ-eabs)
(define-fun T-subst-IH-abs () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) eabs T2)) (tcheck C (subst X E eabs) T2))))
(assert T-subst-IH-abs)
(push 1)
(define-fun T-subst-abs-2 () Bool (forall ((S Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S eabs)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-2))
(check-sat)
(pop 1)
(pop 1)
(define-fun T-subst () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) E2 T2)) (tcheck C (subst X E E2) T2))))
(assert T-subst)
