
(declare-sort Term 0)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun reduce (Term Term) Bool)
(declare-fun var (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun empty () Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun nothing () Term)
(declare-fun some (Term) Term)
(define-fun EQ-var () Bool (forall ((Var19 Term) (Var20 Term)) (= (= (var Var19) (var Var20)) (= Var19 Var20))))
(define-fun EQ-abs () Bool (forall ((Var21 Term) (Typ14 Term) (Exp21 Term) (Var22 Term) (Typ15 Term) (Exp22 Term)) (= (= (fabs Var21 Typ14 Exp21) (fabs Var22 Typ15 Exp22)) (and (= Var21 Var22) (and (= Typ14 Typ15) (= Exp21 Exp22))))))
(define-fun EQ-app () Bool (forall ((Exp23 Term) (Exp24 Term) (Exp25 Term) (Exp26 Term)) (= (= (app Exp23 Exp24) (app Exp25 Exp26)) (and (= Exp23 Exp25) (= Exp24 Exp26)))))
(define-fun EQ-empty () Bool (= (= empty empty) true))
(define-fun EQ-bind () Bool (forall ((Var23 Term) (Typ16 Term) (Ctx5 Term) (Var24 Term) (Typ17 Term) (Ctx6 Term)) (= (= (bind Var23 Typ16 Ctx5) (bind Var24 Typ17 Ctx6)) (and (= Var23 Var24) (and (= Typ16 Typ17) (= Ctx5 Ctx6))))))
(define-fun EQ-arrow () Bool (forall ((Typ18 Term) (Typ19 Term) (Typ20 Term) (Typ21 Term)) (= (= (arrow Typ18 Typ19) (arrow Typ20 Typ21)) (and (= Typ18 Typ20) (= Typ19 Typ21)))))
(define-fun EQ-nothing () Bool (= (= nothing nothing) true))
(define-fun EQ-some () Bool (forall ((Typ22 Term) (Typ23 Term)) (= (= (some Typ22) (some Typ23)) (= Typ22 Typ23))))
(assert EQ-var)
(assert EQ-abs)
(assert EQ-app)
(assert EQ-empty)
(assert EQ-bind)
(assert EQ-arrow)
(assert EQ-nothing)
(assert EQ-some)
(define-fun DIFF-var-abs () Bool (forall ((Var25 Term) (Var26 Term) (Typ24 Term) (Exp27 Term)) (distinct (var Var25) (fabs Var26 Typ24 Exp27))))
(define-fun DIFF-var-app () Bool (forall ((Var27 Term) (Exp28 Term) (Exp29 Term)) (distinct (var Var27) (app Exp28 Exp29))))
(define-fun DIFF-abs-app () Bool (forall ((Var28 Term) (Typ25 Term) (Exp30 Term) (Exp31 Term) (Exp32 Term)) (distinct (fabs Var28 Typ25 Exp30) (app Exp31 Exp32))))
(define-fun DIFF-empty-bind () Bool (forall ((Var29 Term) (Typ26 Term) (Ctx7 Term)) (distinct empty (bind Var29 Typ26 Ctx7))))
(define-fun DIFF-nothing-some () Bool (forall ((Typ27 Term)) (distinct nothing (some Typ27))))
(assert DIFF-var-abs)
(assert DIFF-var-app)
(assert DIFF-abs-app)
(assert DIFF-empty-bind)
(assert DIFF-nothing-some)
(declare-fun lookup (Term Term) Term)
(define-fun lookup5 () Bool (forall ((X Term) (Var31 Term) (Ctx9 Term) (RESULT21 Term)) (=> (and (and (= Var31 X) (= Ctx9 empty)) (= RESULT21 (lookup Var31 Ctx9))) (=> true (= RESULT21 nothing)))))
(define-fun lookup3 () Bool (forall ((C Term) (Var30 Term) (Ctx8 Term) (X Term) (Y Term) (RESULT20 Term) (Ty Term)) (=> (and (and (= Var30 X) (= Ctx8 (bind Y Ty C))) (= RESULT20 (lookup Var30 Ctx8))) (=> (and (= X Y) true) (= RESULT20 (some Ty))))))
(define-fun lookup4 () Bool (forall ((Ty Term) (Var30 Term) (Ctx8 Term) (Y Term) (RESULT20 Term) (X Term) (C Term)) (=> (and (and (= Var30 X) (= Ctx8 (bind Y Ty C))) (= RESULT20 (lookup Var30 Ctx8))) (=> (and (not (= X Y)) true) (= RESULT20 (lookup X C))))))
(assert lookup5)
(assert lookup3)
(assert lookup4)
(define-fun T-var () Bool (forall ((C Term) (X Term) (T Term)) (=> (= (lookup X C) (some T)) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Term) (X Term) (E Term) (S Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Term) (C Term) (E1 Term) (E2 Term) (T Term)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Term) (T Term) (C Term)) (=> (tcheck C E T) (or (exists ((X Term)) (and (= E (var X)) (= (lookup X C) (some T)))) (or (exists ((X Term) (E2 Term) (T1 Term) (T2 Term)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Term) (E2 Term) (S Term)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(declare-fun isFreeVar (Term Term) Bool)
(define-fun isFreeVar5 () Bool (forall ((Var34 Term) (Exp35 Term) (X Term) (V Term)) (=> (and (= Var34 V) (= Exp35 (var X))) (=> true (= (isFreeVar Var34 Exp35) (= X V))))))
(define-fun isFreeVar4 () Bool (forall ((T Term) (Var33 Term) (Exp34 Term) (X Term) (V Term) (E Term)) (=> (and (= Var33 V) (= Exp34 (fabs X T E))) (=> true (= (isFreeVar Var33 Exp34) (and (distinct X V) (isFreeVar V E)))))))
(define-fun isFreeVar3 () Bool (forall ((Var32 Term) (Exp33 Term) (E1 Term) (V Term) (E2 Term)) (=> (and (= Var32 V) (= Exp33 (app E1 E2))) (=> true (= (isFreeVar Var32 Exp33) (or (isFreeVar V E1) (isFreeVar V E2)))))))
(assert isFreeVar5)
(assert isFreeVar4)
(assert isFreeVar3)
(define-fun T-Context-Duplicate () Bool (forall ((Y Term) (Ty Term) (X Term) (Tx Term) (C Term) (E Term) (T Term)) (=> (and (= X Y) (tcheck (bind X Tx (bind Y Ty C)) E T)) (tcheck (bind X Tx C) E T))))
(define-fun T-Context-Swap () Bool (forall ((Y Term) (Ty Term) (X Term) (Tx Term) (C Term) (E Term) (T Term)) (=> (and (distinct X Y) (tcheck (bind X Tx (bind Y Ty C)) E T)) (tcheck (bind Y Ty (bind X Tx C)) E T))))
(define-fun T-Weak () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (and (not (isFreeVar X E)) (tcheck C E T)) (tcheck (bind X S C) E T))))
(assert T-Context-Duplicate)
(assert T-Context-Swap)
(assert T-Weak)
(declare-fun gensym (Term) Term)
(define-fun gensym-is-fresh () Bool (forall ((V Term) (E Term)) (=> (= (gensym E) V) (isFreeVar V E))))
(assert gensym-is-fresh)
(declare-fun subst (Term Term Term) Term)
(define-fun subst8 () Bool (forall ((Var37 Term) (Exp40 Term) (Exp41 Term) (X Term) (Y Term) (RESULT24 Term) (E Term)) (=> (and (and (= Var37 X) (and (= Exp40 E) (= Exp41 (var Y)))) (= RESULT24 (subst Var37 Exp40 Exp41))) (=> (and (= X Y) true) (= RESULT24 E)))))
(define-fun subst9 () Bool (forall ((E Term) (Var37 Term) (Exp40 Term) (Exp41 Term) (X Term) (RESULT24 Term) (Y Term)) (=> (and (and (= Var37 X) (and (= Exp40 E) (= Exp41 (var Y)))) (= RESULT24 (subst Var37 Exp40 Exp41))) (=> (and (not (= X Y)) true) (= RESULT24 (var Y))))))
(define-fun subst7 () Bool (forall ((Var36 Term) (Exp38 Term) (Exp39 Term) (RESULT23 Term) (E1 Term) (X Term) (E Term) (E2 Term)) (=> (and (and (= Var36 X) (and (= Exp38 E) (= Exp39 (app E1 E2)))) (= RESULT23 (subst Var36 Exp38 Exp39))) (=> true (= RESULT23 (app (subst X E E1) (subst X E E2)))))))
(define-fun subst5 () Bool (forall ((E Term) (Var35 Term) (Exp36 Term) (Exp37 Term) (X Term) (RESULT22 Term) (Y Term) (T Term) (E1 Term)) (=> (and (and (= Var35 X) (and (= Exp36 E) (= Exp37 (fabs Y T E1)))) (= RESULT22 (subst Var35 Exp36 Exp37))) (=> (and (= X Y) true) (= RESULT22 (fabs Y T E1))))))
(define-fun subst6 () Bool (forall ((Var35 Term) (Exp36 Term) (Exp37 Term) (RESULT22 Term) (Y Term) (T Term) (X Term) (E Term) (E1 Term)) (=> (and (and (= Var35 X) (and (= Exp36 E) (= Exp37 (fabs Y T E1)))) (= RESULT22 (subst Var35 Exp36 Exp37))) (=> (and (not (= X Y)) true) (= RESULT22 (fabs Y T (subst X E E1)))))))
(assert subst8)
(assert subst9)
(assert subst7)
(assert subst5)
(assert subst6)
(push 1)
(define-fun T-subst-var-1 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-1))
(check-sat)
(pop 1)
(push 1)
(define-fun T-subst-var-2 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-2))
(check-sat)
(pop 1)
(push 1)
(declare-fun e1app () Term)
(declare-fun e2app () Term)
(define-fun EQ-e1app () Bool (= (= e1app e1app) true))
(define-fun EQ-e2app () Bool (= (= e2app e2app) true))
(assert EQ-e1app)
(assert EQ-e2app)
(define-fun T-subst-IH-app1 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e1app T2)) (tcheck C (subst X E e1app) T2))))
(define-fun T-subst-IH-app2 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e2app T2)) (tcheck C (subst X E e2app) T2))))
(assert T-subst-IH-app1)
(assert T-subst-IH-app2)
(push 1)
(define-fun T-subst-app () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (app e1app e2app)) (and (tcheck C E T) (tcheck (bind X T C) E2 T2))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-app))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(define-fun T-subst-abs-1 () Bool (forall ((S Term) (E3 Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S E3)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-1))
(check-sat)
(pop 1)
(push 1)
(declare-fun eabs () Term)
(define-fun EQ-eabs () Bool (= (= eabs eabs) true))
(assert EQ-eabs)
(define-fun T-subst-IH-abs () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) eabs T2)) (tcheck C (subst X E eabs) T2))))
(assert T-subst-IH-abs)
(push 1)
(define-fun T-subst-abs-2 () Bool (forall ((E Term) (E2 Term) (T2 Term) (X Term) (T Term) (Y Term) (S Term) (C Term)) (=> (and (= E2 (fabs Y S eabs)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (and (tcheck (bind X T C) (fabs Y S eabs) T2) (exists ((S2 Term)) (and (= T2 (arrow S S2)) (and (tcheck (bind Y S (bind X T C)) eabs S2) (tcheck (bind X T (bind Y S C)) eabs S2))))))))
(assert (not T-subst-abs-2))
(check-sat)
(pop 1)
(pop 1)
(define-fun T-subst () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) E2 T2)) (tcheck C (subst X E E2) T2))))
(assert T-subst)
