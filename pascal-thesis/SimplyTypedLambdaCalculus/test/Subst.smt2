
(declare-sort Term 0)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun var (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun empty () Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun nothing () Term)
(declare-fun some (Term) Term)
(define-fun EQ-var () Bool (forall ((VAR778 Term) (VAR779 Term)) (and (=> (= (var VAR778) (var VAR779)) (= VAR778 VAR779)) (=> (= VAR778 VAR779) (= (var VAR778) (var VAR779))))))
(define-fun EQ-abs () Bool (forall ((VAR780 Term) (TYP521 Term) (EXP903 Term) (VAR781 Term) (TYP522 Term) (EXP904 Term)) (and (=> (= (fabs VAR780 TYP521 EXP903) (fabs VAR781 TYP522 EXP904)) (and (= VAR780 VAR781) (and (= TYP521 TYP522) (= EXP903 EXP904)))) (=> (and (= VAR780 VAR781) (and (= TYP521 TYP522) (= EXP903 EXP904))) (= (fabs VAR780 TYP521 EXP903) (fabs VAR781 TYP522 EXP904))))))
(define-fun EQ-app () Bool (forall ((EXP905 Term) (EXP906 Term) (EXP907 Term) (EXP908 Term)) (and (=> (= (app EXP905 EXP906) (app EXP907 EXP908)) (and (= EXP905 EXP907) (= EXP906 EXP908))) (=> (and (= EXP905 EXP907) (= EXP906 EXP908)) (= (app EXP905 EXP906) (app EXP907 EXP908))))))
(define-fun EQ-empty () Bool (and (=> (= empty empty) true) (=> true (= empty empty))))
(define-fun EQ-bind () Bool (forall ((VAR782 Term) (TYP523 Term) (CTX220 Term) (VAR783 Term) (TYP524 Term) (CTX221 Term)) (and (=> (= (bind VAR782 TYP523 CTX220) (bind VAR783 TYP524 CTX221)) (and (= VAR782 VAR783) (and (= TYP523 TYP524) (= CTX220 CTX221)))) (=> (and (= VAR782 VAR783) (and (= TYP523 TYP524) (= CTX220 CTX221))) (= (bind VAR782 TYP523 CTX220) (bind VAR783 TYP524 CTX221))))))
(define-fun EQ-arrow () Bool (forall ((TYP525 Term) (TYP526 Term) (TYP527 Term) (TYP528 Term)) (and (=> (= (arrow TYP525 TYP526) (arrow TYP527 TYP528)) (and (= TYP525 TYP527) (= TYP526 TYP528))) (=> (and (= TYP525 TYP527) (= TYP526 TYP528)) (= (arrow TYP525 TYP526) (arrow TYP527 TYP528))))))
(define-fun EQ-nothing () Bool (and (=> (= nothing nothing) true) (=> true (= nothing nothing))))
(define-fun EQ-some () Bool (forall ((TYPE132 Term) (TYPE133 Term)) (and (=> (= (some TYPE132) (some TYPE133)) (= TYPE132 TYPE133)) (=> (= TYPE132 TYPE133) (= (some TYPE132) (some TYPE133))))))
(assert EQ-var)
(assert EQ-abs)
(assert EQ-app)
(assert EQ-empty)
(assert EQ-bind)
(assert EQ-arrow)
(assert EQ-nothing)
(assert EQ-some)
(define-fun DIFF-var-abs () Bool (forall ((VAR784 Term) (VAR785 Term) (TYP529 Term) (EXP909 Term)) (distinct (var VAR784) (fabs VAR785 TYP529 EXP909))))
(define-fun DIFF-var-app () Bool (forall ((VAR786 Term) (EXP910 Term) (EXP911 Term)) (distinct (var VAR786) (app EXP910 EXP911))))
(define-fun DIFF-abs-app () Bool (forall ((VAR787 Term) (TYP530 Term) (EXP912 Term) (EXP913 Term) (EXP914 Term)) (distinct (fabs VAR787 TYP530 EXP912) (app EXP913 EXP914))))
(define-fun DIFF-empty-bind () Bool (forall ((VAR788 Term) (TYP531 Term) (CTX222 Term)) (distinct empty (bind VAR788 TYP531 CTX222))))
(define-fun DIFF-nothing-some () Bool (forall ((TYPE134 Term)) (distinct nothing (some TYPE134))))
(assert DIFF-var-abs)
(assert DIFF-var-app)
(assert DIFF-abs-app)
(assert DIFF-empty-bind)
(assert DIFF-nothing-some)
(declare-fun lookup (Term Term) Term)
(define-fun lookup134 () Bool (forall ((X Term) (VAR790 Term) (CTX224 Term) (RESULT368 Term)) (=> (and (and (= VAR790 X) (= CTX224 empty)) (= RESULT368 (lookup VAR790 CTX224))) (=> true (= RESULT368 nothing)))))
(define-fun lookup132 () Bool (forall ((C Term) (VAR789 Term) (CTX223 Term) (X Term) (Y Term) (RESULT367 Term) (TY Term)) (=> (and (and (= VAR789 X) (= CTX223 (bind Y TY C))) (= RESULT367 (lookup VAR789 CTX223))) (=> (and (= X Y) true) (= RESULT367 (some TY))))))
(define-fun lookup133 () Bool (forall ((TY Term) (VAR789 Term) (CTX223 Term) (Y Term) (RESULT367 Term) (X Term) (C Term)) (=> (and (and (= VAR789 X) (= CTX223 (bind Y TY C))) (= RESULT367 (lookup VAR789 CTX223))) (=> (and (not (= X Y)) true) (= RESULT367 (lookup X C))))))
(assert lookup134)
(assert lookup132)
(assert lookup133)
(define-fun T-Weak () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (and (= (lookup X C) nothing) (tcheck C E T)) (tcheck (bind X S C) E T))))
(define-fun T-var () Bool (forall ((C Term) (X Term) (T Term)) (=> (= (lookup X C) (some T)) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Term) (X Term) (E Term) (S Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Term) (C Term) (E1 Term) (E2 Term) (T Term)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Term) (T Term) (C Term)) (=> (tcheck C E T) (or (exists ((X Term)) (and (= E (var X)) (= (lookup X C) (some T)))) (or (exists ((X Term) (E2 Term) (T1 Term) (T2 Term)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Term) (E2 Term) (S Term)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))
(assert T-Weak)
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(declare-fun subst (Term Term Term) Term)
(define-fun subst368 () Bool (forall ((VAR793 Term) (EXP919 Term) (EXP920 Term) (X Term) (Y Term) (RESULT371 Term) (E Term)) (=> (and (and (= VAR793 X) (and (= EXP919 E) (= EXP920 (var Y)))) (= RESULT371 (subst VAR793 EXP919 EXP920))) (=> (and (= X Y) true) (= RESULT371 E)))))
(define-fun subst369 () Bool (forall ((E Term) (VAR793 Term) (EXP919 Term) (EXP920 Term) (X Term) (RESULT371 Term) (Y Term)) (=> (and (and (= VAR793 X) (and (= EXP919 E) (= EXP920 (var Y)))) (= RESULT371 (subst VAR793 EXP919 EXP920))) (=> (and (not (= X Y)) true) (= RESULT371 (var Y))))))
(define-fun subst367 () Bool (forall ((VAR792 Term) (EXP917 Term) (EXP918 Term) (RESULT370 Term) (E1 Term) (X Term) (E Term) (E2 Term)) (=> (and (and (= VAR792 X) (and (= EXP917 E) (= EXP918 (app E1 E2)))) (= RESULT370 (subst VAR792 EXP917 EXP918))) (=> true (= RESULT370 (app (subst X E E1) (subst X E E2)))))))
(define-fun subst365 () Bool (forall ((E Term) (VAR791 Term) (EXP915 Term) (EXP916 Term) (X Term) (RESULT369 Term) (Y Term) (T Term) (E1 Term)) (=> (and (and (= VAR791 X) (and (= EXP915 E) (= EXP916 (fabs Y T E1)))) (= RESULT369 (subst VAR791 EXP915 EXP916))) (=> (and (= X Y) true) (= RESULT369 (fabs Y T E1))))))
(define-fun subst366 () Bool (forall ((VAR791 Term) (EXP915 Term) (EXP916 Term) (RESULT369 Term) (Y Term) (T Term) (X Term) (E Term) (E1 Term)) (=> (and (and (= VAR791 X) (and (= EXP915 E) (= EXP916 (fabs Y T E1)))) (= RESULT369 (subst VAR791 EXP915 EXP916))) (=> (and (not (= X Y)) true) (= RESULT369 (fabs Y T (subst X E E1)))))))
(assert subst368)
(assert subst369)
(assert subst367)
(assert subst365)
(assert subst366)
(push 1)
(define-fun T-subst-var-1 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-1))
(check-sat)
(pop 1)
(push 1)
(define-fun T-subst-var-2 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-2))
(check-sat)
(pop 1)
(push 1)
(declare-fun e1app () Term)
(declare-fun e2app () Term)
(define-fun EQ-e1app () Bool (and (=> (= e1app e1app) true) (=> true (= e1app e1app))))
(define-fun EQ-e2app () Bool (and (=> (= e2app e2app) true) (=> true (= e2app e2app))))
(assert EQ-e1app)
(assert EQ-e2app)
(define-fun DIFF-var-e1app () Bool (forall ((VAR794 Term)) (distinct (var VAR794) e1app)))
(define-fun DIFF-abs-e1app () Bool (forall ((VAR795 Term) (TYP532 Term) (EXP921 Term)) (distinct (fabs VAR795 TYP532 EXP921) e1app)))
(define-fun DIFF-app-e1app () Bool (forall ((EXP922 Term) (EXP923 Term)) (distinct (app EXP922 EXP923) e1app)))
(define-fun DIFF-var-e2app () Bool (forall ((VAR796 Term)) (distinct (var VAR796) e2app)))
(define-fun DIFF-abs-e2app () Bool (forall ((VAR797 Term) (TYP533 Term) (EXP924 Term)) (distinct (fabs VAR797 TYP533 EXP924) e2app)))
(define-fun DIFF-app-e2app () Bool (forall ((EXP925 Term) (EXP926 Term)) (distinct (app EXP925 EXP926) e2app)))
(define-fun DIFF-e1app-e2app () Bool (distinct e1app e2app))
(assert DIFF-var-e1app)
(assert DIFF-abs-e1app)
(assert DIFF-app-e1app)
(assert DIFF-var-e2app)
(assert DIFF-abs-e2app)
(assert DIFF-app-e2app)
(assert DIFF-e1app-e2app)
(define-fun T-subst-IH-app1 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e1app T2)) (tcheck C (subst X E e1app) T2))))
(define-fun T-subst-IH-app2 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e2app T2)) (tcheck C (subst X E e2app) T2))))
(assert T-subst-IH-app1)
(assert T-subst-IH-app2)
(push 1)
(define-fun T-subst-app () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (app e1app e2app)) (and (tcheck C E T) (tcheck (bind X T C) E2 T2))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-app))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(define-fun T-subst-abs-1 () Bool (forall ((S Term) (E3 Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S E3)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-1))
(check-sat)
(pop 1)
(push 1)
(declare-fun eabs () Term)
(define-fun EQ-eabs () Bool (and (=> (= eabs eabs) true) (=> true (= eabs eabs))))
(assert EQ-eabs)
(define-fun DIFF-var-eabs () Bool (forall ((VAR798 Term)) (distinct (var VAR798) eabs)))
(define-fun DIFF-abs-eabs () Bool (forall ((VAR799 Term) (TYP534 Term) (EXP927 Term)) (distinct (fabs VAR799 TYP534 EXP927) eabs)))
(define-fun DIFF-app-eabs () Bool (forall ((EXP928 Term) (EXP929 Term)) (distinct (app EXP928 EXP929) eabs)))
(assert DIFF-var-eabs)
(assert DIFF-abs-eabs)
(assert DIFF-app-eabs)
(define-fun T-subst-IH-abs () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) eabs T2)) (tcheck C (subst X E eabs) T2))))
(assert T-subst-IH-abs)
(push 1)
(define-fun T-subst-abs-2 () Bool (forall ((S Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S eabs)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-2))
(check-sat)
(pop 1)
(pop 1)
(define-fun T-subst () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) E2 T2)) (tcheck C (subst X E E2) T2))))
(assert T-subst)
