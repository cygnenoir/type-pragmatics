
(declare-sort Term 0)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun reduce (Term Term) Bool)
(declare-fun var (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun empty () Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun nothing () Term)
(declare-fun some (Term) Term)
(define-fun EQ-var () Bool (forall ((Var316 Term) (Var317 Term)) (= (= (var Var316) (var Var317)) (= Var316 Var317))))
(define-fun EQ-abs () Bool (forall ((Var318 Term) (Typ244 Term) (Exp348 Term) (Var319 Term) (Typ245 Term) (Exp349 Term)) (= (= (fabs Var318 Typ244 Exp348) (fabs Var319 Typ245 Exp349)) (and (= Var318 Var319) (and (= Typ244 Typ245) (= Exp348 Exp349))))))
(define-fun EQ-app () Bool (forall ((Exp350 Term) (Exp351 Term) (Exp352 Term) (Exp353 Term)) (= (= (app Exp350 Exp351) (app Exp352 Exp353)) (and (= Exp350 Exp352) (= Exp351 Exp353)))))
(define-fun EQ-empty () Bool (= (= empty empty) true))
(define-fun EQ-bind () Bool (forall ((Var320 Term) (Typ246 Term) (Ctx84 Term) (Var321 Term) (Typ247 Term) (Ctx85 Term)) (= (= (bind Var320 Typ246 Ctx84) (bind Var321 Typ247 Ctx85)) (and (= Var320 Var321) (and (= Typ246 Typ247) (= Ctx84 Ctx85))))))
(define-fun EQ-arrow () Bool (forall ((Typ248 Term) (Typ249 Term) (Typ250 Term) (Typ251 Term)) (= (= (arrow Typ248 Typ249) (arrow Typ250 Typ251)) (and (= Typ248 Typ250) (= Typ249 Typ251)))))
(define-fun EQ-nothing () Bool (= (= nothing nothing) true))
(define-fun EQ-some () Bool (forall ((Typ252 Term) (Typ253 Term)) (= (= (some Typ252) (some Typ253)) (= Typ252 Typ253))))
(assert EQ-var)
(assert EQ-abs)
(assert EQ-app)
(assert EQ-empty)
(assert EQ-bind)
(assert EQ-arrow)
(assert EQ-nothing)
(assert EQ-some)
(define-fun DIFF-var-abs () Bool (forall ((Var322 Term) (Var323 Term) (Typ254 Term) (Exp354 Term)) (distinct (var Var322) (fabs Var323 Typ254 Exp354))))
(define-fun DIFF-var-app () Bool (forall ((Var324 Term) (Exp355 Term) (Exp356 Term)) (distinct (var Var324) (app Exp355 Exp356))))
(define-fun DIFF-abs-app () Bool (forall ((Var325 Term) (Typ255 Term) (Exp357 Term) (Exp358 Term) (Exp359 Term)) (distinct (fabs Var325 Typ255 Exp357) (app Exp358 Exp359))))
(define-fun DIFF-empty-bind () Bool (forall ((Var326 Term) (Typ256 Term) (Ctx86 Term)) (distinct empty (bind Var326 Typ256 Ctx86))))
(define-fun DIFF-nothing-some () Bool (forall ((Typ257 Term)) (distinct nothing (some Typ257))))
(assert DIFF-var-abs)
(assert DIFF-var-app)
(assert DIFF-abs-app)
(assert DIFF-empty-bind)
(assert DIFF-nothing-some)
(declare-fun lookup (Term Term) Term)
(define-fun lookup50 () Bool (forall ((X Term) (Var328 Term) (Ctx88 Term) (RESULT11 Term)) (=> (and (and (= Var328 X) (= Ctx88 empty)) (= RESULT11 (lookup Var328 Ctx88))) (=> true (= RESULT11 nothing)))))
(define-fun lookup48 () Bool (forall ((C Term) (Var327 Term) (Ctx87 Term) (X Term) (Y Term) (RESULT10 Term) (Ty Term)) (=> (and (and (= Var327 X) (= Ctx87 (bind Y Ty C))) (= RESULT10 (lookup Var327 Ctx87))) (=> (and (= X Y) true) (= RESULT10 (some Ty))))))
(define-fun lookup49 () Bool (forall ((Ty Term) (Var327 Term) (Ctx87 Term) (Y Term) (RESULT10 Term) (X Term) (C Term)) (=> (and (and (= Var327 X) (= Ctx87 (bind Y Ty C))) (= RESULT10 (lookup Var327 Ctx87))) (=> (and (not (= X Y)) true) (= RESULT10 (lookup X C))))))
(assert lookup50)
(assert lookup48)
(assert lookup49)
(define-fun T-var () Bool (forall ((C Term) (X Term) (T Term)) (=> (= (lookup X C) (some T)) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Term) (X Term) (E Term) (S Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Term) (C Term) (E1 Term) (E2 Term) (T Term)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Term) (T Term) (C Term)) (=> (tcheck C E T) (or (exists ((X Term)) (and (= E (var X)) (= (lookup X C) (some T)))) (or (exists ((X Term) (E2 Term) (T1 Term) (T2 Term)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Term) (E2 Term) (S Term)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(declare-fun isFreeVar (Term Term) Bool)
(define-fun isFreeVar50 () Bool (forall ((Var331 Term) (Exp362 Term) (X Term) (V Term)) (=> (and (= Var331 V) (= Exp362 (var X))) (=> true (= (isFreeVar Var331 Exp362) (= X V))))))
(define-fun isFreeVar49 () Bool (forall ((T Term) (Var330 Term) (Exp361 Term) (X Term) (V Term) (E Term)) (=> (and (= Var330 V) (= Exp361 (fabs X T E))) (=> true (= (isFreeVar Var330 Exp361) (and (distinct X V) (isFreeVar V E)))))))
(define-fun isFreeVar48 () Bool (forall ((Var329 Term) (Exp360 Term) (E1 Term) (V Term) (E2 Term)) (=> (and (= Var329 V) (= Exp360 (app E1 E2))) (=> true (= (isFreeVar Var329 Exp360) (or (isFreeVar V E1) (isFreeVar V E2)))))))
(assert isFreeVar50)
(assert isFreeVar49)
(assert isFreeVar48)
(define-fun T-Context-Duplicate () Bool (forall ((Y Term) (Ty Term) (X Term) (Tx Term) (C Term) (E Term) (T Term)) (=> (and (= X Y) (tcheck (bind X Tx (bind Y Ty C)) E T)) (tcheck (bind X Tx C) E T))))
(define-fun T-Context-Swap () Bool (forall ((Y Term) (Ty Term) (X Term) (Tx Term) (C Term) (E Term) (T Term)) (=> (and (distinct X Y) (tcheck (bind X Tx (bind Y Ty C)) E T)) (tcheck (bind Y Ty (bind X Tx C)) E T))))
(define-fun T-Weak () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (and (not (isFreeVar X E)) (tcheck C E T)) (tcheck (bind X S C) E T))))
(assert T-Context-Duplicate)
(assert T-Context-Swap)
(assert T-Weak)
(declare-fun subst (Term Term Term) Term)
(define-fun subst83 () Bool (forall ((Var334 Term) (Exp367 Term) (Exp368 Term) (X Term) (Y Term) (RESULT14 Term) (E Term)) (=> (and (and (= Var334 X) (and (= Exp367 E) (= Exp368 (var Y)))) (= RESULT14 (subst Var334 Exp367 Exp368))) (=> (and (= X Y) true) (= RESULT14 E)))))
(define-fun subst84 () Bool (forall ((E Term) (Var334 Term) (Exp367 Term) (Exp368 Term) (X Term) (RESULT14 Term) (Y Term)) (=> (and (and (= Var334 X) (and (= Exp367 E) (= Exp368 (var Y)))) (= RESULT14 (subst Var334 Exp367 Exp368))) (=> (and (not (= X Y)) true) (= RESULT14 (var Y))))))
(define-fun subst82 () Bool (forall ((Var333 Term) (Exp365 Term) (Exp366 Term) (RESULT13 Term) (E1 Term) (X Term) (E Term) (E2 Term)) (=> (and (and (= Var333 X) (and (= Exp365 E) (= Exp366 (app E1 E2)))) (= RESULT13 (subst Var333 Exp365 Exp366))) (=> true (= RESULT13 (app (subst X E E1) (subst X E E2)))))))
(define-fun subst80 () Bool (forall ((E Term) (Var332 Term) (Exp363 Term) (Exp364 Term) (X Term) (RESULT12 Term) (Y Term) (T Term) (E1 Term)) (=> (and (and (= Var332 X) (and (= Exp363 E) (= Exp364 (fabs Y T E1)))) (= RESULT12 (subst Var332 Exp363 Exp364))) (=> (and (= X Y) true) (= RESULT12 (fabs Y T E1))))))
(define-fun subst81 () Bool (forall ((Var332 Term) (Exp363 Term) (Exp364 Term) (RESULT12 Term) (Y Term) (T Term) (X Term) (E Term) (E1 Term)) (=> (and (and (= Var332 X) (and (= Exp363 E) (= Exp364 (fabs Y T E1)))) (= RESULT12 (subst Var332 Exp363 Exp364))) (=> (and (not (= X Y)) true) (= RESULT12 (fabs Y T (subst X E E1)))))))
(assert subst83)
(assert subst84)
(assert subst82)
(assert subst80)
(assert subst81)
(push 1)
(define-fun T-subst-var-1 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-1))
(check-sat)
(pop 1)
(push 1)
(define-fun T-subst-var-2 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-2))
(check-sat)
(pop 1)
(push 1)
(declare-fun e1app () Term)
(declare-fun e2app () Term)
(define-fun EQ-e1app () Bool (= (= e1app e1app) true))
(define-fun EQ-e2app () Bool (= (= e2app e2app) true))
(assert EQ-e1app)
(assert EQ-e2app)
(define-fun T-subst-IH-app1 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e1app T2)) (tcheck C (subst X E e1app) T2))))
(define-fun T-subst-IH-app2 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e2app T2)) (tcheck C (subst X E e2app) T2))))
(assert T-subst-IH-app1)
(assert T-subst-IH-app2)
(push 1)
(define-fun T-subst-app () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (app e1app e2app)) (and (tcheck C E T) (tcheck (bind X T C) E2 T2))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-app))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(define-fun T-subst-abs-1 () Bool (forall ((S Term) (E3 Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S E3)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-1))
(check-sat)
(pop 1)
(push 1)
(declare-fun eabs () Term)
(define-fun EQ-eabs () Bool (= (= eabs eabs) true))
(assert EQ-eabs)
(define-fun T-subst-IH-abs () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) eabs T2)) (tcheck C (subst X E eabs) T2))))
(assert T-subst-IH-abs)
(push 1)
(define-fun T-subst-abs-2 () Bool (forall ((E Term) (E2 Term) (T2 Term) (X Term) (T Term) (Y Term) (S Term) (C Term)) (=> (and (= E2 (fabs Y S eabs)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (and (tcheck (bind X T C) (fabs Y S eabs) T2) (exists ((S2 Term)) (and (= T2 (arrow S S2)) (and (tcheck (bind Y S (bind X T C)) eabs S2) (tcheck (bind X T (bind Y S C)) eabs S2))))))))
(assert (not T-subst-abs-2))
(check-sat)
(pop 1)
(pop 1)
(define-fun T-subst () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) E2 T2)) (tcheck C (subst X E E2) T2))))
(assert T-subst)
