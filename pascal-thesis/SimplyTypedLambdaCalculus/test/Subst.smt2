
(declare-sort Term 0)
(declare-fun lookup (Term Term Term) Bool)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun arrow (Term Term) Term)
(declare-fun var (Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun subst (Term Term Term) Term)
(declare-fun const-e1app () Term)
(declare-fun const-e2app () Term)
(declare-fun const-eabs () Term)
(define-fun Lookup-Base () Bool (forall ((X Term) (C Term) (T Term) (T2 Term)) (=> (lookup X (bind X T2 C) T) (= T T2))))
(define-fun Lookup-Step () Bool (forall ((X Term) (Y Term) (T2 Term) (C Term) (T Term)) (=> (and (distinct X Y) (lookup X C T)) (lookup X (bind Y T2 C) T))))
(define-fun Context-Swap () Bool (forall ((C1 Term) (X2 Term) (T2 Term) (X1 Term) (T1 Term) (C2 Term)) (=> (distinct X1 X2) (= (bind X1 T1 (bind X2 T2 C1)) (bind X2 T2 (bind X1 T1 C2))))))
(define-fun Context-Duplicate () Bool (forall ((T2 Term) (C1 Term) (X Term) (T1 Term) (C2 Term)) (= (bind X T1 (bind X T2 C1)) (bind X T1 C2))))
(define-fun T-Weak () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (tcheck C E T) (tcheck (bind X S C) E T))))
(define-fun Cong-var-true () Bool (forall ((X Term) (Y Term)) (=> (= (var X) (var Y)) (= X Y))))
(define-fun Cong-var-false () Bool (forall ((X Term) (Y Term)) (=> (distinct (var X) (var Y)) (distinct X Y))))
(define-fun Cong-app-true () Bool (forall ((E1 Term) (E2 Term) (F1 Term) (F2 Term)) (=> (= (app E1 F1) (app E2 F2)) (and (= E1 E2) (= F1 F2)))))
(define-fun Cong-app-false () Bool (forall ((E1 Term) (E2 Term) (F1 Term) (F2 Term)) (=> (distinct (app E1 F1) (app E2 F2)) (or (distinct E1 E2) (distinct F1 F2)))))
(define-fun Cong-abs-true () Bool (forall ((X1 Term) (X2 Term) (T1 Term) (T2 Term) (E1 Term) (E2 Term)) (=> (= (fabs X1 T1 E1) (fabs X2 T2 E2)) (and (= X1 X2) (and (= T1 T2) (= E1 E2))))))
(define-fun Cong-abs-false () Bool (forall ((X1 Term) (X2 Term) (T1 Term) (T2 Term) (E1 Term) (E2 Term)) (=> (distinct (fabs X1 T1 E1) (fabs X2 T2 E2)) (or (distinct X1 X2) (or (distinct T1 T2) (distinct E1 E2))))))
(define-fun Cong-var-app () Bool (forall ((X Term) (E1 Term) (E2 Term)) (distinct (var X) (app E1 E2))))
(define-fun Cong-var-abs () Bool (forall ((X Term) (Y Term) (T Term) (E Term)) (distinct (var X) (fabs Y T E))))
(define-fun Cong-abs-app () Bool (forall ((X Term) (T Term) (E Term) (E1 Term) (E2 Term)) (distinct (fabs X T E) (app E1 E2))))
(define-fun T-var () Bool (forall ((C Term) (X Term) (T Term)) (=> (lookup X C T) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Term) (X Term) (E Term) (S Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Term) (C Term) (E1 Term) (E2 Term) (T Term)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Term) (T Term) (C Term)) (=> (tcheck C E T) (or (exists ((X Term)) (and (= E (var X)) (lookup X C T))) (or (exists ((X Term) (E2 Term) (T1 Term) (T2 Term)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Term) (E2 Term) (S Term)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))
(define-fun T-subst-IH-app1 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) const-e1app T2)) (tcheck C (subst X E const-e1app) T2))))
(define-fun T-subst-IH-app2 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) const-e2app T2)) (tcheck C (subst X E const-e2app) T2))))
(define-fun T-subst-IH-abs () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) const-eabs T2)) (tcheck C (subst X E const-eabs) T2))))
(assert Lookup-Base)
(assert Lookup-Step)
(assert Context-Swap)
(assert Context-Duplicate)
(assert T-Weak)
(assert Cong-var-true)
(assert Cong-var-false)
(assert Cong-app-true)
(assert Cong-app-false)
(assert Cong-abs-true)
(assert Cong-abs-false)
(assert Cong-var-app)
(assert Cong-var-abs)
(assert Cong-abs-app)
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(assert T-subst-IH-app1)
(assert T-subst-IH-app2)
(assert T-subst-IH-abs)
(define-fun T-subst-var () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var X)) (and (= (subst X E E2) E) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(define-fun T-subst-app () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (app const-e1app const-e2app)) (and (= (subst X E E2) (app (subst X E const-e1app) (subst X E const-e2app))) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(define-fun T-subst-abs-1 () Bool (forall ((Y Term) (S Term) (E3 Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S E3)) (and (= X Y) (and (= (subst X E E2) (fabs Y S E3)) (and (tcheck C E T) (tcheck (bind X T C) E2 T2))))) (tcheck C (subst X E E2) T2))))
(define-fun T-subst-abs-2 () Bool (forall ((Y Term) (S Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S const-eabs)) (and (distinct X Y) (and (= (subst X E E2) (fabs Y S (subst X E const-eabs))) (and (tcheck C E T) (tcheck (bind X T C) E2 T2))))) (tcheck C (subst X E E2) T2))))
(push 1)
(assert (not T-subst-var))
(check-sat)
(pop 1)
(push 1)
(assert (not T-subst-app))
(check-sat)
(pop 1)
(push 1)
(assert (not T-subst-abs-1))
(check-sat)
(pop 1)
(push 1)
(assert (not T-subst-abs-2))
(check-sat)
(pop 1)
