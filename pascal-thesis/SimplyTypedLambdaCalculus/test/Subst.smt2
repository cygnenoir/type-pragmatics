
(declare-sort Term 0)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun reduce (Term Term) Bool)
(declare-fun var (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun empty () Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun nothing () Term)
(declare-fun some (Term) Term)
(define-fun EQ-var () Bool (forall ((VAR16 Term) (VAR17 Term)) (and (=> (= (var VAR16) (var VAR17)) (= VAR16 VAR17)) (=> (= VAR16 VAR17) (= (var VAR16) (var VAR17))))))
(define-fun EQ-abs () Bool (forall ((VAR18 Term) (TYP14 Term) (EXP18 Term) (VAR19 Term) (TYP15 Term) (EXP19 Term)) (and (=> (= (fabs VAR18 TYP14 EXP18) (fabs VAR19 TYP15 EXP19)) (and (= VAR18 VAR19) (and (= TYP14 TYP15) (= EXP18 EXP19)))) (=> (and (= VAR18 VAR19) (and (= TYP14 TYP15) (= EXP18 EXP19))) (= (fabs VAR18 TYP14 EXP18) (fabs VAR19 TYP15 EXP19))))))
(define-fun EQ-app () Bool (forall ((EXP20 Term) (EXP21 Term) (EXP22 Term) (EXP23 Term)) (and (=> (= (app EXP20 EXP21) (app EXP22 EXP23)) (and (= EXP20 EXP22) (= EXP21 EXP23))) (=> (and (= EXP20 EXP22) (= EXP21 EXP23)) (= (app EXP20 EXP21) (app EXP22 EXP23))))))
(define-fun EQ-empty () Bool (and (=> (= empty empty) true) (=> true (= empty empty))))
(define-fun EQ-bind () Bool (forall ((VAR20 Term) (TYP16 Term) (CTX5 Term) (VAR21 Term) (TYP17 Term) (CTX6 Term)) (and (=> (= (bind VAR20 TYP16 CTX5) (bind VAR21 TYP17 CTX6)) (and (= VAR20 VAR21) (and (= TYP16 TYP17) (= CTX5 CTX6)))) (=> (and (= VAR20 VAR21) (and (= TYP16 TYP17) (= CTX5 CTX6))) (= (bind VAR20 TYP16 CTX5) (bind VAR21 TYP17 CTX6))))))
(define-fun EQ-arrow () Bool (forall ((TYP18 Term) (TYP19 Term) (TYP20 Term) (TYP21 Term)) (and (=> (= (arrow TYP18 TYP19) (arrow TYP20 TYP21)) (and (= TYP18 TYP20) (= TYP19 TYP21))) (=> (and (= TYP18 TYP20) (= TYP19 TYP21)) (= (arrow TYP18 TYP19) (arrow TYP20 TYP21))))))
(define-fun EQ-nothing () Bool (and (=> (= nothing nothing) true) (=> true (= nothing nothing))))
(define-fun EQ-some () Bool (forall ((TYP22 Term) (TYP23 Term)) (and (=> (= (some TYP22) (some TYP23)) (= TYP22 TYP23)) (=> (= TYP22 TYP23) (= (some TYP22) (some TYP23))))))
(assert EQ-var)
(assert EQ-abs)
(assert EQ-app)
(assert EQ-empty)
(assert EQ-bind)
(assert EQ-arrow)
(assert EQ-nothing)
(assert EQ-some)
(define-fun DIFF-var-abs () Bool (forall ((VAR22 Term) (VAR23 Term) (TYP24 Term) (EXP24 Term)) (distinct (var VAR22) (fabs VAR23 TYP24 EXP24))))
(define-fun DIFF-var-app () Bool (forall ((VAR24 Term) (EXP25 Term) (EXP26 Term)) (distinct (var VAR24) (app EXP25 EXP26))))
(define-fun DIFF-abs-app () Bool (forall ((VAR25 Term) (TYP25 Term) (EXP27 Term) (EXP28 Term) (EXP29 Term)) (distinct (fabs VAR25 TYP25 EXP27) (app EXP28 EXP29))))
(define-fun DIFF-empty-bind () Bool (forall ((VAR26 Term) (TYP26 Term) (CTX7 Term)) (distinct empty (bind VAR26 TYP26 CTX7))))
(define-fun DIFF-nothing-some () Bool (forall ((TYP27 Term)) (distinct nothing (some TYP27))))
(assert DIFF-var-abs)
(assert DIFF-var-app)
(assert DIFF-abs-app)
(assert DIFF-empty-bind)
(assert DIFF-nothing-some)
(declare-fun lookup (Term Term) Term)
(define-fun lookup5 () Bool (forall ((X Term) (VAR28 Term) (CTX9 Term) (RESULT6 Term)) (=> (and (and (= VAR28 X) (= CTX9 empty)) (= RESULT6 (lookup VAR28 CTX9))) (=> true (= RESULT6 nothing)))))
(define-fun lookup3 () Bool (forall ((C Term) (VAR27 Term) (CTX8 Term) (X Term) (Y Term) (RESULT5 Term) (TY Term)) (=> (and (and (= VAR27 X) (= CTX8 (bind Y TY C))) (= RESULT5 (lookup VAR27 CTX8))) (=> (and (= X Y) true) (= RESULT5 (some TY))))))
(define-fun lookup4 () Bool (forall ((TY Term) (VAR27 Term) (CTX8 Term) (Y Term) (RESULT5 Term) (X Term) (C Term)) (=> (and (and (= VAR27 X) (= CTX8 (bind Y TY C))) (= RESULT5 (lookup VAR27 CTX8))) (=> (and (not (= X Y)) true) (= RESULT5 (lookup X C))))))
(assert lookup5)
(assert lookup3)
(assert lookup4)
(define-fun T-var () Bool (forall ((C Term) (X Term) (T Term)) (=> (= (lookup X C) (some T)) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Term) (X Term) (E Term) (S Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Term) (C Term) (E1 Term) (E2 Term) (T Term)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Term) (T Term) (C Term)) (=> (tcheck C E T) (or (exists ((X Term)) (and (= E (var X)) (= (lookup X C) (some T)))) (or (exists ((X Term) (E2 Term) (T1 Term) (T2 Term)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Term) (E2 Term) (S Term)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(define-fun T-Context-Duplicate () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (= X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind X TX C) E T))))
(define-fun T-Context-Swap () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (distinct X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind Y TY (bind X TX C)) E T))))
(define-fun T-Weak () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (and (= (lookup X C) nothing) (tcheck C E T)) (tcheck (bind X S C) E T))))
(assert T-Context-Duplicate)
(assert T-Context-Swap)
(assert T-Weak)
(declare-fun subst (Term Term Term) Term)
(define-fun subst8 () Bool (forall ((VAR31 Term) (EXP34 Term) (EXP35 Term) (X Term) (Y Term) (RESULT9 Term) (E Term)) (=> (and (and (= VAR31 X) (and (= EXP34 E) (= EXP35 (var Y)))) (= RESULT9 (subst VAR31 EXP34 EXP35))) (=> (and (= X Y) true) (= RESULT9 E)))))
(define-fun subst9 () Bool (forall ((E Term) (VAR31 Term) (EXP34 Term) (EXP35 Term) (X Term) (RESULT9 Term) (Y Term)) (=> (and (and (= VAR31 X) (and (= EXP34 E) (= EXP35 (var Y)))) (= RESULT9 (subst VAR31 EXP34 EXP35))) (=> (and (not (= X Y)) true) (= RESULT9 (var Y))))))
(define-fun subst7 () Bool (forall ((VAR30 Term) (EXP32 Term) (EXP33 Term) (RESULT8 Term) (E1 Term) (X Term) (E Term) (E2 Term)) (=> (and (and (= VAR30 X) (and (= EXP32 E) (= EXP33 (app E1 E2)))) (= RESULT8 (subst VAR30 EXP32 EXP33))) (=> true (= RESULT8 (app (subst X E E1) (subst X E E2)))))))
(define-fun subst5 () Bool (forall ((E Term) (VAR29 Term) (EXP30 Term) (EXP31 Term) (X Term) (RESULT7 Term) (Y Term) (T Term) (E1 Term)) (=> (and (and (= VAR29 X) (and (= EXP30 E) (= EXP31 (fabs Y T E1)))) (= RESULT7 (subst VAR29 EXP30 EXP31))) (=> (and (= X Y) true) (= RESULT7 (fabs Y T E1))))))
(define-fun subst6 () Bool (forall ((VAR29 Term) (EXP30 Term) (EXP31 Term) (RESULT7 Term) (Y Term) (T Term) (X Term) (E Term) (E1 Term)) (=> (and (and (= VAR29 X) (and (= EXP30 E) (= EXP31 (fabs Y T E1)))) (= RESULT7 (subst VAR29 EXP30 EXP31))) (=> (and (not (= X Y)) true) (= RESULT7 (fabs Y T (subst X E E1)))))))
(assert subst8)
(assert subst9)
(assert subst7)
(assert subst5)
(assert subst6)
(push 1)
(define-fun T-subst-var-1 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-1))
(check-sat)
(pop 1)
(push 1)
(define-fun T-subst-var-2 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-2))
(check-sat)
(pop 1)
(push 1)
(declare-fun e1app () Term)
(declare-fun e2app () Term)
(define-fun EQ-e1app () Bool (and (=> (= e1app e1app) true) (=> true (= e1app e1app))))
(define-fun EQ-e2app () Bool (and (=> (= e2app e2app) true) (=> true (= e2app e2app))))
(assert EQ-e1app)
(assert EQ-e2app)
(define-fun T-subst-IH-app1 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e1app T2)) (tcheck C (subst X E e1app) T2))))
(define-fun T-subst-IH-app2 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e2app T2)) (tcheck C (subst X E e2app) T2))))
(assert T-subst-IH-app1)
(assert T-subst-IH-app2)
(push 1)
(define-fun T-subst-app () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (app e1app e2app)) (and (tcheck C E T) (tcheck (bind X T C) E2 T2))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-app))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(define-fun T-subst-abs-1 () Bool (forall ((S Term) (E3 Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S E3)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-1))
(check-sat)
(pop 1)
(push 1)
(declare-fun eabs () Term)
(define-fun EQ-eabs () Bool (and (=> (= eabs eabs) true) (=> true (= eabs eabs))))
(assert EQ-eabs)
(define-fun T-subst-IH-abs () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) eabs T2)) (tcheck C (subst X E eabs) T2))))
(assert T-subst-IH-abs)
(push 1)
(define-fun T-subst-abs-2 () Bool (forall ((S Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S eabs)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-2))
(check-sat)
(pop 1)
(pop 1)
(define-fun T-subst () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) E2 T2)) (tcheck C (subst X E E2) T2))))
(assert T-subst)
