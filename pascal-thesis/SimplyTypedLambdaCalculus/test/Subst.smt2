
(declare-sort Term 0)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun reduce (Term Term) Bool)
(declare-fun var (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun empty () Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun nothing () Term)
(declare-fun some (Term) Term)
(define-fun EQ-var () Bool (forall ((VAR352 Term) (VAR353 Term)) (and (=> (= (var VAR352) (var VAR353)) (= VAR352 VAR353)) (=> (= VAR352 VAR353) (= (var VAR352) (var VAR353))))))
(define-fun EQ-abs () Bool (forall ((VAR354 Term) (TYP242 Term) (EXP396 Term) (VAR355 Term) (TYP243 Term) (EXP397 Term)) (and (=> (= (fabs VAR354 TYP242 EXP396) (fabs VAR355 TYP243 EXP397)) (and (= VAR354 VAR355) (and (= TYP242 TYP243) (= EXP396 EXP397)))) (=> (and (= VAR354 VAR355) (and (= TYP242 TYP243) (= EXP396 EXP397))) (= (fabs VAR354 TYP242 EXP396) (fabs VAR355 TYP243 EXP397))))))
(define-fun EQ-app () Bool (forall ((EXP398 Term) (EXP399 Term) (EXP400 Term) (EXP401 Term)) (and (=> (= (app EXP398 EXP399) (app EXP400 EXP401)) (and (= EXP398 EXP400) (= EXP399 EXP401))) (=> (and (= EXP398 EXP400) (= EXP399 EXP401)) (= (app EXP398 EXP399) (app EXP400 EXP401))))))
(define-fun EQ-empty () Bool (and (=> (= empty empty) true) (=> true (= empty empty))))
(define-fun EQ-bind () Bool (forall ((VAR356 Term) (TYP244 Term) (CTX110 Term) (VAR357 Term) (TYP245 Term) (CTX111 Term)) (and (=> (= (bind VAR356 TYP244 CTX110) (bind VAR357 TYP245 CTX111)) (and (= VAR356 VAR357) (and (= TYP244 TYP245) (= CTX110 CTX111)))) (=> (and (= VAR356 VAR357) (and (= TYP244 TYP245) (= CTX110 CTX111))) (= (bind VAR356 TYP244 CTX110) (bind VAR357 TYP245 CTX111))))))
(define-fun EQ-arrow () Bool (forall ((TYP246 Term) (TYP247 Term) (TYP248 Term) (TYP249 Term)) (and (=> (= (arrow TYP246 TYP247) (arrow TYP248 TYP249)) (and (= TYP246 TYP248) (= TYP247 TYP249))) (=> (and (= TYP246 TYP248) (= TYP247 TYP249)) (= (arrow TYP246 TYP247) (arrow TYP248 TYP249))))))
(define-fun EQ-nothing () Bool (and (=> (= nothing nothing) true) (=> true (= nothing nothing))))
(define-fun EQ-some () Bool (forall ((TYPE66 Term) (TYPE67 Term)) (and (=> (= (some TYPE66) (some TYPE67)) (= TYPE66 TYPE67)) (=> (= TYPE66 TYPE67) (= (some TYPE66) (some TYPE67))))))
(assert EQ-var)
(assert EQ-abs)
(assert EQ-app)
(assert EQ-empty)
(assert EQ-bind)
(assert EQ-arrow)
(assert EQ-nothing)
(assert EQ-some)
(define-fun DIFF-var-abs () Bool (forall ((VAR358 Term) (VAR359 Term) (TYP250 Term) (EXP402 Term)) (distinct (var VAR358) (fabs VAR359 TYP250 EXP402))))
(define-fun DIFF-var-app () Bool (forall ((VAR360 Term) (EXP403 Term) (EXP404 Term)) (distinct (var VAR360) (app EXP403 EXP404))))
(define-fun DIFF-abs-app () Bool (forall ((VAR361 Term) (TYP251 Term) (EXP405 Term) (EXP406 Term) (EXP407 Term)) (distinct (fabs VAR361 TYP251 EXP405) (app EXP406 EXP407))))
(define-fun DIFF-empty-bind () Bool (forall ((VAR362 Term) (TYP252 Term) (CTX112 Term)) (distinct empty (bind VAR362 TYP252 CTX112))))
(define-fun DIFF-nothing-some () Bool (forall ((TYPE68 Term)) (distinct nothing (some TYPE68))))
(assert DIFF-var-abs)
(assert DIFF-var-app)
(assert DIFF-abs-app)
(assert DIFF-empty-bind)
(assert DIFF-nothing-some)
(declare-fun lookup (Term Term) Term)
(define-fun lookup68 () Bool (forall ((X Term) (VAR364 Term) (CTX114 Term) (RESULT111 Term)) (=> (and (and (= VAR364 X) (= CTX114 empty)) (= RESULT111 (lookup VAR364 CTX114))) (=> true (= RESULT111 nothing)))))
(define-fun lookup66 () Bool (forall ((C Term) (VAR363 Term) (CTX113 Term) (X Term) (Y Term) (RESULT110 Term) (TY Term)) (=> (and (and (= VAR363 X) (= CTX113 (bind Y TY C))) (= RESULT110 (lookup VAR363 CTX113))) (=> (and (= X Y) true) (= RESULT110 (some TY))))))
(define-fun lookup67 () Bool (forall ((TY Term) (VAR363 Term) (CTX113 Term) (Y Term) (RESULT110 Term) (X Term) (C Term)) (=> (and (and (= VAR363 X) (= CTX113 (bind Y TY C))) (= RESULT110 (lookup VAR363 CTX113))) (=> (and (not (= X Y)) true) (= RESULT110 (lookup X C))))))
(assert lookup68)
(assert lookup66)
(assert lookup67)
(define-fun T-var () Bool (forall ((C Term) (X Term) (T Term)) (=> (= (lookup X C) (some T)) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Term) (X Term) (E Term) (S Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Term) (C Term) (E1 Term) (E2 Term) (T Term)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Term) (T Term) (C Term)) (=> (tcheck C E T) (or (exists ((X Term)) (and (= E (var X)) (= (lookup X C) (some T)))) (or (exists ((X Term) (E2 Term) (T1 Term) (T2 Term)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Term) (E2 Term) (S Term)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(define-fun T-Context-Duplicate () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (= X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind X TX C) E T))))
(define-fun T-Context-Swap () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (distinct X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind Y TY (bind X TX C)) E T))))
(define-fun T-Weak () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (and (= (lookup X C) nothing) (tcheck C E T)) (tcheck (bind X S C) E T))))
(assert T-Context-Duplicate)
(assert T-Context-Swap)
(assert T-Weak)
(declare-fun subst (Term Term Term) Term)
(define-fun subst113 () Bool (forall ((VAR367 Term) (EXP412 Term) (EXP413 Term) (X Term) (Y Term) (RESULT114 Term) (E Term)) (=> (and (and (= VAR367 X) (and (= EXP412 E) (= EXP413 (var Y)))) (= RESULT114 (subst VAR367 EXP412 EXP413))) (=> (and (= X Y) true) (= RESULT114 E)))))
(define-fun subst114 () Bool (forall ((E Term) (VAR367 Term) (EXP412 Term) (EXP413 Term) (X Term) (RESULT114 Term) (Y Term)) (=> (and (and (= VAR367 X) (and (= EXP412 E) (= EXP413 (var Y)))) (= RESULT114 (subst VAR367 EXP412 EXP413))) (=> (and (not (= X Y)) true) (= RESULT114 (var Y))))))
(define-fun subst112 () Bool (forall ((VAR366 Term) (EXP410 Term) (EXP411 Term) (RESULT113 Term) (E1 Term) (X Term) (E Term) (E2 Term)) (=> (and (and (= VAR366 X) (and (= EXP410 E) (= EXP411 (app E1 E2)))) (= RESULT113 (subst VAR366 EXP410 EXP411))) (=> true (= RESULT113 (app (subst X E E1) (subst X E E2)))))))
(define-fun subst110 () Bool (forall ((E Term) (VAR365 Term) (EXP408 Term) (EXP409 Term) (X Term) (RESULT112 Term) (Y Term) (T Term) (E1 Term)) (=> (and (and (= VAR365 X) (and (= EXP408 E) (= EXP409 (fabs Y T E1)))) (= RESULT112 (subst VAR365 EXP408 EXP409))) (=> (and (= X Y) true) (= RESULT112 (fabs Y T E1))))))
(define-fun subst111 () Bool (forall ((VAR365 Term) (EXP408 Term) (EXP409 Term) (RESULT112 Term) (Y Term) (T Term) (X Term) (E Term) (E1 Term)) (=> (and (and (= VAR365 X) (and (= EXP408 E) (= EXP409 (fabs Y T E1)))) (= RESULT112 (subst VAR365 EXP408 EXP409))) (=> (and (not (= X Y)) true) (= RESULT112 (fabs Y T (subst X E E1)))))))
(assert subst113)
(assert subst114)
(assert subst112)
(assert subst110)
(assert subst111)
(push 1)
(define-fun T-subst-var-1 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-1))
(check-sat)
(pop 1)
(push 1)
(define-fun T-subst-var-2 () Bool (forall ((Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (var Y)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-var-2))
(check-sat)
(pop 1)
(push 1)
(declare-fun e1app () Term)
(declare-fun e2app () Term)
(define-fun EQ-e1app () Bool (and (=> (= e1app e1app) true) (=> true (= e1app e1app))))
(define-fun EQ-e2app () Bool (and (=> (= e2app e2app) true) (=> true (= e2app e2app))))
(assert EQ-e1app)
(assert EQ-e2app)
(define-fun T-subst-IH-app1 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e1app T2)) (tcheck C (subst X E e1app) T2))))
(define-fun T-subst-IH-app2 () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) e2app T2)) (tcheck C (subst X E e2app) T2))))
(assert T-subst-IH-app1)
(assert T-subst-IH-app2)
(push 1)
(define-fun T-subst-app () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (app e1app e2app)) (and (tcheck C E T) (tcheck (bind X T C) E2 T2))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-app))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(define-fun T-subst-abs-1 () Bool (forall ((S Term) (E3 Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S E3)) (and (= X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-1))
(check-sat)
(pop 1)
(push 1)
(declare-fun eabs () Term)
(define-fun EQ-eabs () Bool (and (=> (= eabs eabs) true) (=> true (= eabs eabs))))
(assert EQ-eabs)
(define-fun T-subst-IH-abs () Bool (forall ((T Term) (C Term) (X Term) (E Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) eabs T2)) (tcheck C (subst X E eabs) T2))))
(assert T-subst-IH-abs)
(push 1)
(define-fun T-subst-abs-2 () Bool (forall ((S Term) (Y Term) (T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (= E2 (fabs Y S eabs)) (and (distinct X Y) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(assert (not T-subst-abs-2))
(check-sat)
(pop 1)
(pop 1)
(define-fun T-subst () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) E2 T2)) (tcheck C (subst X E E2) T2))))
(assert T-subst)
