
(declare-sort Term 0)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun reduce (Term Term) Bool)
(declare-fun var (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun empty () Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun nothing () Term)
(declare-fun some (Term) Term)
(define-fun EQ-var () Bool (forall ((Var39 Term) (Var40 Term)) (= (= (var Var39) (var Var40)) (= Var39 Var40))))
(define-fun EQ-abs () Bool (forall ((Var41 Term) (Typ42 Term) (Exp36 Term) (Var42 Term) (Typ43 Term) (Exp37 Term)) (= (= (fabs Var41 Typ42 Exp36) (fabs Var42 Typ43 Exp37)) (and (= Var41 Var42) (and (= Typ42 Typ43) (= Exp36 Exp37))))))
(define-fun EQ-app () Bool (forall ((Exp38 Term) (Exp39 Term) (Exp40 Term) (Exp41 Term)) (= (= (app Exp38 Exp39) (app Exp40 Exp41)) (and (= Exp38 Exp40) (= Exp39 Exp41)))))
(define-fun EQ-empty () Bool (= (= empty empty) true))
(define-fun EQ-bind () Bool (forall ((Var43 Term) (Typ44 Term) (Ctx15 Term) (Var44 Term) (Typ45 Term) (Ctx16 Term)) (= (= (bind Var43 Typ44 Ctx15) (bind Var44 Typ45 Ctx16)) (and (= Var43 Var44) (and (= Typ44 Typ45) (= Ctx15 Ctx16))))))
(define-fun EQ-arrow () Bool (forall ((Typ46 Term) (Typ47 Term) (Typ48 Term) (Typ49 Term)) (= (= (arrow Typ46 Typ47) (arrow Typ48 Typ49)) (and (= Typ46 Typ48) (= Typ47 Typ49)))))
(define-fun EQ-nothing () Bool (= (= nothing nothing) true))
(define-fun EQ-some () Bool (forall ((Typ50 Term) (Typ51 Term)) (= (= (some Typ50) (some Typ51)) (= Typ50 Typ51))))
(assert EQ-var)
(assert EQ-abs)
(assert EQ-app)
(assert EQ-empty)
(assert EQ-bind)
(assert EQ-arrow)
(assert EQ-nothing)
(assert EQ-some)
(define-fun DIFF-var-abs () Bool (forall ((Var45 Term) (Var46 Term) (Typ52 Term) (Exp42 Term)) (distinct (var Var45) (fabs Var46 Typ52 Exp42))))
(define-fun DIFF-var-app () Bool (forall ((Var47 Term) (Exp43 Term) (Exp44 Term)) (distinct (var Var47) (app Exp43 Exp44))))
(define-fun DIFF-abs-app () Bool (forall ((Var48 Term) (Typ53 Term) (Exp45 Term) (Exp46 Term) (Exp47 Term)) (distinct (fabs Var48 Typ53 Exp45) (app Exp46 Exp47))))
(define-fun DIFF-empty-bind () Bool (forall ((Var49 Term) (Typ54 Term) (Ctx17 Term)) (distinct empty (bind Var49 Typ54 Ctx17))))
(define-fun DIFF-nothing-some () Bool (forall ((Typ55 Term)) (distinct nothing (some Typ55))))
(assert DIFF-var-abs)
(assert DIFF-var-app)
(assert DIFF-abs-app)
(assert DIFF-empty-bind)
(assert DIFF-nothing-some)
(declare-fun lookup (Term Term) Term)
(define-fun lookup11 () Bool (forall ((X Term) (Var51 Term) (Ctx19 Term) (RESULT7 Term)) (=> (and (and (= Var51 X) (= Ctx19 empty)) (= RESULT7 (lookup Var51 Ctx19))) (=> true (= RESULT7 nothing)))))
(define-fun lookup9 () Bool (forall ((C Term) (Var50 Term) (Ctx18 Term) (X Term) (Y Term) (RESULT6 Term) (Ty Term)) (=> (and (and (= Var50 X) (= Ctx18 (bind Y Ty C))) (= RESULT6 (lookup Var50 Ctx18))) (=> (and (= X Y) true) (= RESULT6 (some Ty))))))
(define-fun lookup10 () Bool (forall ((Ty Term) (Var50 Term) (Ctx18 Term) (Y Term) (RESULT6 Term) (X Term) (C Term)) (=> (and (and (= Var50 X) (= Ctx18 (bind Y Ty C))) (= RESULT6 (lookup Var50 Ctx18))) (=> (and (not (= X Y)) true) (= RESULT6 (lookup X C))))))
(assert lookup11)
(assert lookup9)
(assert lookup10)
