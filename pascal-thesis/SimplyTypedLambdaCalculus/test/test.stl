module rules

rules 

~x:~T in (~x:~T2; ~C)
====================== Lookup-Base
~T = ~T2

~x != ~y
~x:~T in ~C
===================== Lookup-Step
~x:~T in (~y:~T2; ~C)


~X : ~T in ~C
============== T-var
~C |- ~X : ~T

(~X : ~S ; ~C) |- ~E : ~T
===================================== T-abs
~C |- (\ ~X : ~S . ~E) : ~S -> ~T

~C |- ~E : ~S -> ~T
~C |- ~F : ~S
==================== T-app
~C |- ~E ~F : ~T

derived-rules

==================== id-nat
(x : Nat; ()) |- x : Nat



