
(declare-sort Term 0)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun var (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun empty () Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun nothing () Term)
(declare-fun some (Term) Term)
(define-fun EQ-var () Bool (forall ((Var0 Term) (Var1 Term)) (= (= (var Var0) (var Var1)) (= Var0 Var1))))
(define-fun EQ-abs () Bool (forall ((Var2 Term) (Typ0 Term) (Exp0 Term) (Var3 Term) (Typ1 Term) (Exp1 Term)) (= (= (fabs Var2 Typ0 Exp0) (fabs Var3 Typ1 Exp1)) (and (= Var2 Var3) (and (= Typ0 Typ1) (= Exp0 Exp1))))))
(define-fun EQ-app () Bool (forall ((Exp2 Term) (Exp3 Term) (Exp4 Term) (Exp5 Term)) (= (= (app Exp2 Exp3) (app Exp4 Exp5)) (and (= Exp2 Exp4) (= Exp3 Exp5)))))
(define-fun EQ-empty () Bool (= (= empty empty) true))
(define-fun EQ-bind () Bool (forall ((Var4 Term) (Typ2 Term) (Ctx0 Term) (Var5 Term) (Typ3 Term) (Ctx1 Term)) (= (= (bind Var4 Typ2 Ctx0) (bind Var5 Typ3 Ctx1)) (and (= Var4 Var5) (and (= Typ2 Typ3) (= Ctx0 Ctx1))))))
(define-fun EQ-arrow () Bool (forall ((Typ4 Term) (Typ5 Term) (Typ6 Term) (Typ7 Term)) (= (= (arrow Typ4 Typ5) (arrow Typ6 Typ7)) (and (= Typ4 Typ6) (= Typ5 Typ7)))))
(define-fun EQ-nothing () Bool (= (= nothing nothing) true))
(define-fun EQ-some () Bool (forall ((Typ8 Term) (Typ9 Term)) (= (= (some Typ8) (some Typ9)) (= Typ8 Typ9))))
(assert EQ-var)
(assert EQ-abs)
(assert EQ-app)
(assert EQ-empty)
(assert EQ-bind)
(assert EQ-arrow)
(assert EQ-nothing)
(assert EQ-some)
(define-fun DIFF-var-abs () Bool (forall ((Var6 Term) (Var7 Term) (Typ10 Term) (Exp6 Term)) (distinct (var Var6) (fabs Var7 Typ10 Exp6))))
(define-fun DIFF-var-app () Bool (forall ((Var6 Term) (Exp6 Term) (Exp7 Term)) (distinct (var Var6) (app Exp6 Exp7))))
(define-fun DIFF-abs-app () Bool (forall ((Var6 Term) (Typ10 Term) (Exp6 Term) (Exp7 Term) (Exp8 Term)) (distinct (fabs Var6 Typ10 Exp6) (app Exp7 Exp8))))
(define-fun DIFF-empty-bind () Bool (forall ((Var6 Term) (Typ10 Term) (Ctx2 Term)) (distinct empty (bind Var6 Typ10 Ctx2))))
(define-fun DIFF-nothing-some () Bool (forall ((Typ10 Term)) (distinct nothing (some Typ10))))
(assert DIFF-var-abs)
(assert DIFF-var-app)
(assert DIFF-abs-app)
(assert DIFF-empty-bind)
(assert DIFF-nothing-some)
(declare-fun lookup (Term Term) Term)
(define-fun lookup0 () Bool (forall ((X Term) (Var6 Term) (Ctx2 Term) (RESULT Term)) (=> (and (and (= Var6 X) (= Ctx2 empty)) (= RESULT (lookup Var6 Ctx2))) (=> true (= RESULT nothing)))))
(define-fun lookup1 () Bool (forall ((C Term) (Var6 Term) (Ctx2 Term) (X Term) (Y Term) (RESULT Term) (Ty Term)) (=> (and (and (= Var6 X) (= Ctx2 (bind Y Ty C))) (= RESULT (lookup Var6 Ctx2))) (=> (and (= X Y) true) (= RESULT (some Ty))))))
(define-fun lookup2 () Bool (forall ((Ty Term) (Var6 Term) (Ctx2 Term) (Y Term) (RESULT Term) (X Term) (C Term)) (=> (and (and (= Var6 X) (= Ctx2 (bind Y Ty C))) (= RESULT (lookup Var6 Ctx2))) (=> (and (not (= X Y)) true) (= RESULT (lookup X C))))))
(assert lookup0)
(assert lookup1)
(assert lookup2)
(define-fun T-var () Bool (forall ((C Term) (X Term) (T Term)) (=> (= (lookup X C) (some T)) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Term) (X Term) (E Term) (S Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Term) (C Term) (E1 Term) (E2 Term) (T Term)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Term) (T Term) (C Term)) (=> (tcheck C E T) (or (exists ((X Term)) (and (= E (var X)) (= (lookup X C) (some T)))) (or (exists ((X Term) (E2 Term) (T1 Term) (T2 Term)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Term) (E2 Term) (S Term)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(declare-fun isFreeVar (Term Term) Bool)
(define-fun isFreeVar0 () Bool (forall ((X Term) (V Term) (Var7 Term) (Exp6 Term)) (=> (and (= Var7 V) (= Exp6 (var X))) (=> true (=> (= X V) (isFreeVar Var7 Exp6))))))
(define-fun isFreeVar1 () Bool (forall ((T Term) (X Term) (V Term) (E Term) (Var7 Term) (Exp6 Term)) (=> (and (= Var7 V) (= Exp6 (fabs X T E))) (=> true (=> (and (distinct X V) (isFreeVar V E)) (isFreeVar Var7 Exp6))))))
(define-fun isFreeVar2 () Bool (forall ((E1 Term) (V Term) (E2 Term) (Var7 Term) (Exp6 Term)) (=> (and (= Var7 V) (= Exp6 (app E1 E2))) (=> true (=> (or (isFreeVar V E1) (isFreeVar V E2)) (isFreeVar Var7 Exp6))))))
(assert isFreeVar0)
(assert isFreeVar1)
(assert isFreeVar2)
(define-fun T-Context-Duplicate () Bool (forall ((Y Term) (Ty Term) (X Term) (Tx Term) (C Term) (E Term) (T Term)) (=> (and (= X Y) (tcheck (bind X Tx (bind Y Ty C)) E T)) (tcheck (bind X Tx C) E T))))
(define-fun T-Context-Swap () Bool (forall ((Y Term) (Ty Term) (X Term) (Tx Term) (C Term) (E Term) (T Term)) (=> (and (distinct X Y) (tcheck (bind X Tx (bind Y Ty C)) E T)) (tcheck (bind Y Ty (bind X Tx C)) E T))))
(define-fun T-Weak () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (and (not (isFreeVar X E)) (tcheck C E T)) (tcheck (bind X S C) E T))))
(define-fun T-Strong () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (and (not (isFreeVar X E)) (tcheck (bind X S C) E T)) (tcheck C E T))))
(assert T-Context-Duplicate)
(assert T-Context-Swap)
(assert T-Weak)
(assert T-Strong)
(declare-fun gensym1 (Term) Term)
(declare-fun gensym2 (Term Term) Term)
(declare-fun gensym3 (Term Term Term) Term)
(define-fun gensym1-is-fresh () Bool (forall ((V Term) (E Term)) (=> (= (gensym1 E) V) (not (isFreeVar V E)))))
(define-fun gensym2-is-fresh () Bool (forall ((E1 Term) (V Term) (E2 Term)) (=> (= (gensym2 E1 E2) V) (and (not (isFreeVar V E1)) (not (isFreeVar V E2))))))
(define-fun gensym3-is-fresh () Bool (forall ((E1 Term) (E2 Term) (V Term) (E3 Term)) (=> (= (gensym3 E1 E2 E3) V) (and (not (isFreeVar V E1)) (and (not (isFreeVar V E2)) (not (isFreeVar V E3)))))))
(assert gensym1-is-fresh)
(assert gensym2-is-fresh)
(assert gensym3-is-fresh)
(declare-fun subst (Term Term Term) Term)
(define-fun subst0 () Bool (forall ((Var8 Term) (Exp13 Term) (Exp14 Term) (X Term) (Y Term) (RESULT Term) (E Term)) (=> (and (and (= Var8 X) (and (= Exp13 E) (= Exp14 (var Y)))) (= RESULT (subst Var8 Exp13 Exp14))) (=> (and (= X Y) true) (= RESULT E)))))
(define-fun subst1 () Bool (forall ((E Term) (Var8 Term) (Exp13 Term) (Exp14 Term) (X Term) (RESULT Term) (Y Term)) (=> (and (and (= Var8 X) (and (= Exp13 E) (= Exp14 (var Y)))) (= RESULT (subst Var8 Exp13 Exp14))) (=> (and (not (= X Y)) true) (= RESULT (var Y))))))
(define-fun subst2 () Bool (forall ((Var8 Term) (Exp13 Term) (Exp14 Term) (RESULT Term) (E1 Term) (X Term) (E Term) (E2 Term)) (=> (and (and (= Var8 X) (and (= Exp13 E) (= Exp14 (app E1 E2)))) (= RESULT (subst Var8 Exp13 Exp14))) (=> true (= RESULT (app (subst X E E1) (subst X E E2)))))))
(define-fun subst3 () Bool (forall ((Var8 Term) (Exp13 Term) (Exp14 Term) (RESULT Term) (Y Term) (T Term) (X Term) (E Term) (E1 Term)) (=> (and (and (= Var8 X) (and (= Exp13 E) (= Exp14 (fabs Y T E1)))) (= RESULT (subst Var8 Exp13 Exp14))) (=> (and (not (or (= X Y) (isFreeVar Y E))) true) (= RESULT (fabs Y T (subst X E E1)))))))
(assert subst0)
(assert subst1)
(assert subst2)
(assert subst3)
(define-fun T-subst () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) E2 T2)) (tcheck C (subst X E E2) T2))))
(assert T-subst)
(declare-fun reduce (Term Term) Bool)
(define-fun reduce0 () Bool (forall ((S Term) (X Term) (E2 Term) (E1 Term) (Exp0 Term) (Exp1 Term)) (=> (and (= Exp0 (app (fabs X S E1) E2)) (= Exp1 (subst X E2 E1))) (=> true (=> true (reduce Exp0 Exp1))))))
(define-fun reduce1 () Bool (forall ((E2 Term) (E1 Term) (E1red Term) (Exp0 Term) (Exp1 Term)) (=> (and (= Exp0 (app E1 E2)) (= Exp1 (app E1red E2))) (=> true (=> (reduce E1 E1red) (reduce Exp0 Exp1))))))
(define-fun reduce2 () Bool (forall ((E1 Term) (E2 Term) (E2red Term) (Exp0 Term) (Exp1 Term)) (=> (and (= Exp0 (app E1 E2)) (= Exp1 (app E1 E2red))) (=> true (=> (reduce E2 E2red) (reduce Exp0 Exp1))))))
(assert reduce0)
(assert reduce1)
(assert reduce2)
(push 1)
(define-fun T-Preservation-beta () Bool (forall ((S Term) (Eout Term) (Ein Term) (C Term) (X Term) (E2 Term) (E1 Term) (T Term)) (=> (and (= Ein (app (fabs X S E1) E2)) (and (= Eout (subst X E2 E1)) (tcheck C Ein T))) (tcheck C (subst X E2 E1) T))))
(assert (not T-Preservation-beta))
(check-sat)
(pop 1)
(push 1)
(declare-fun e1 () Term)
(declare-fun e1red () Term)
(define-fun EQ-e1 () Bool (= (= e1 e1) true))
(define-fun EQ-e1red () Bool (= (= e1red e1red) true))
(assert EQ-e1)
(assert EQ-e1red)
(define-fun T-Preservation-IH-app1 () Bool (forall ((C Term) (T Term)) (=> (and (tcheck C e1 T) (reduce e1 e1red)) (tcheck C e1red T))))
(assert T-Preservation-IH-app1)
(push 1)
(define-fun T-Preservation-App1 () Bool (forall ((E2 Term) (Ein Term) (C Term) (Eout Term) (T Term)) (=> (and (= Ein (app e1 E2)) (and (= Eout (app e1red E2)) (and (reduce e1 e1red) (tcheck C Ein T)))) (tcheck C Eout T))))
(assert (not T-Preservation-App1))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(declare-fun e2 () Term)
(declare-fun e2red () Term)
(define-fun EQ-e2 () Bool (= (= e2 e2) true))
(define-fun EQ-e2red () Bool (= (= e2red e2red) true))
(assert EQ-e2)
(assert EQ-e2red)
(define-fun T-Preservation-IH-app2 () Bool (forall ((C Term) (T Term)) (=> (and (tcheck C e2 T) (reduce e2 e2red)) (tcheck C e2red T))))
(assert T-Preservation-IH-app2)
(push 1)
(define-fun T-Preservation-App2 () Bool (forall ((E1 Term) (Ein Term) (C Term) (Eout Term) (T Term)) (=> (and (= Ein (app E1 e2)) (and (= Eout (app E1 e2red)) (and (reduce e2 e2red) (tcheck C Ein T)))) (tcheck C Eout T))))
(assert (not T-Preservation-App2))
(check-sat)
(pop 1)
(pop 1)
