
(declare-sort Term 0)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun reduce (Term Term) Bool)
(declare-fun var (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun empty () Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun nothing () Term)
(declare-fun some (Term) Term)
(define-fun EQ-var () Bool (forall ((VAR176 Term) (VAR177 Term)) (and (=> (= (var VAR176) (var VAR177)) (= VAR176 VAR177)) (=> (= VAR176 VAR177) (= (var VAR176) (var VAR177))))))
(define-fun EQ-abs () Bool (forall ((VAR178 Term) (TYP154 Term) (EXP198 Term) (VAR179 Term) (TYP155 Term) (EXP199 Term)) (and (=> (= (fabs VAR178 TYP154 EXP198) (fabs VAR179 TYP155 EXP199)) (and (= VAR178 VAR179) (and (= TYP154 TYP155) (= EXP198 EXP199)))) (=> (and (= VAR178 VAR179) (and (= TYP154 TYP155) (= EXP198 EXP199))) (= (fabs VAR178 TYP154 EXP198) (fabs VAR179 TYP155 EXP199))))))
(define-fun EQ-app () Bool (forall ((EXP200 Term) (EXP201 Term) (EXP202 Term) (EXP203 Term)) (and (=> (= (app EXP200 EXP201) (app EXP202 EXP203)) (and (= EXP200 EXP202) (= EXP201 EXP203))) (=> (and (= EXP200 EXP202) (= EXP201 EXP203)) (= (app EXP200 EXP201) (app EXP202 EXP203))))))
(define-fun EQ-empty () Bool (and (=> (= empty empty) true) (=> true (= empty empty))))
(define-fun EQ-bind () Bool (forall ((VAR180 Term) (TYP156 Term) (CTX55 Term) (VAR181 Term) (TYP157 Term) (CTX56 Term)) (and (=> (= (bind VAR180 TYP156 CTX55) (bind VAR181 TYP157 CTX56)) (and (= VAR180 VAR181) (and (= TYP156 TYP157) (= CTX55 CTX56)))) (=> (and (= VAR180 VAR181) (and (= TYP156 TYP157) (= CTX55 CTX56))) (= (bind VAR180 TYP156 CTX55) (bind VAR181 TYP157 CTX56))))))
(define-fun EQ-arrow () Bool (forall ((TYP158 Term) (TYP159 Term) (TYP160 Term) (TYP161 Term)) (and (=> (= (arrow TYP158 TYP159) (arrow TYP160 TYP161)) (and (= TYP158 TYP160) (= TYP159 TYP161))) (=> (and (= TYP158 TYP160) (= TYP159 TYP161)) (= (arrow TYP158 TYP159) (arrow TYP160 TYP161))))))
(define-fun EQ-nothing () Bool (and (=> (= nothing nothing) true) (=> true (= nothing nothing))))
(define-fun EQ-some () Bool (forall ((TYP162 Term) (TYP163 Term)) (and (=> (= (some TYP162) (some TYP163)) (= TYP162 TYP163)) (=> (= TYP162 TYP163) (= (some TYP162) (some TYP163))))))
(assert EQ-var)
(assert EQ-abs)
(assert EQ-app)
(assert EQ-empty)
(assert EQ-bind)
(assert EQ-arrow)
(assert EQ-nothing)
(assert EQ-some)
(define-fun DIFF-var-abs () Bool (forall ((VAR182 Term) (VAR183 Term) (TYP164 Term) (EXP204 Term)) (distinct (var VAR182) (fabs VAR183 TYP164 EXP204))))
(define-fun DIFF-var-app () Bool (forall ((VAR184 Term) (EXP205 Term) (EXP206 Term)) (distinct (var VAR184) (app EXP205 EXP206))))
(define-fun DIFF-abs-app () Bool (forall ((VAR185 Term) (TYP165 Term) (EXP207 Term) (EXP208 Term) (EXP209 Term)) (distinct (fabs VAR185 TYP165 EXP207) (app EXP208 EXP209))))
(define-fun DIFF-empty-bind () Bool (forall ((VAR186 Term) (TYP166 Term) (CTX57 Term)) (distinct empty (bind VAR186 TYP166 CTX57))))
(define-fun DIFF-nothing-some () Bool (forall ((TYP167 Term)) (distinct nothing (some TYP167))))
(assert DIFF-var-abs)
(assert DIFF-var-app)
(assert DIFF-abs-app)
(assert DIFF-empty-bind)
(assert DIFF-nothing-some)
(declare-fun lookup (Term Term) Term)
(define-fun lookup35 () Bool (forall ((X Term) (VAR188 Term) (CTX59 Term) (RESULT56 Term)) (=> (and (and (= VAR188 X) (= CTX59 empty)) (= RESULT56 (lookup VAR188 CTX59))) (=> true (= RESULT56 nothing)))))
(define-fun lookup33 () Bool (forall ((C Term) (VAR187 Term) (CTX58 Term) (X Term) (Y Term) (RESULT55 Term) (TY Term)) (=> (and (and (= VAR187 X) (= CTX58 (bind Y TY C))) (= RESULT55 (lookup VAR187 CTX58))) (=> (and (= X Y) true) (= RESULT55 (some TY))))))
(define-fun lookup34 () Bool (forall ((TY Term) (VAR187 Term) (CTX58 Term) (Y Term) (RESULT55 Term) (X Term) (C Term)) (=> (and (and (= VAR187 X) (= CTX58 (bind Y TY C))) (= RESULT55 (lookup VAR187 CTX58))) (=> (and (not (= X Y)) true) (= RESULT55 (lookup X C))))))
(assert lookup35)
(assert lookup33)
(assert lookup34)
(define-fun T-var () Bool (forall ((C Term) (X Term) (T Term)) (=> (= (lookup X C) (some T)) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Term) (X Term) (E Term) (S Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Term) (C Term) (E1 Term) (E2 Term) (T Term)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Term) (T Term) (C Term)) (=> (tcheck C E T) (or (exists ((X Term)) (and (= E (var X)) (= (lookup X C) (some T)))) (or (exists ((X Term) (E2 Term) (T1 Term) (T2 Term)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Term) (E2 Term) (S Term)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(define-fun T-Context-Duplicate () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (= X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind X TX C) E T))))
(define-fun T-Context-Swap () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (distinct X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind Y TY (bind X TX C)) E T))))
(define-fun T-Weak () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (and (= (lookup X C) nothing) (tcheck C E T)) (tcheck (bind X S C) E T))))
(assert T-Context-Duplicate)
(assert T-Context-Swap)
(assert T-Weak)
(declare-fun subst (Term Term Term) Term)
(define-fun subst58 () Bool (forall ((VAR191 Term) (EXP214 Term) (EXP215 Term) (X Term) (Y Term) (RESULT59 Term) (E Term)) (=> (and (and (= VAR191 X) (and (= EXP214 E) (= EXP215 (var Y)))) (= RESULT59 (subst VAR191 EXP214 EXP215))) (=> (and (= X Y) true) (= RESULT59 E)))))
(define-fun subst59 () Bool (forall ((E Term) (VAR191 Term) (EXP214 Term) (EXP215 Term) (X Term) (RESULT59 Term) (Y Term)) (=> (and (and (= VAR191 X) (and (= EXP214 E) (= EXP215 (var Y)))) (= RESULT59 (subst VAR191 EXP214 EXP215))) (=> (and (not (= X Y)) true) (= RESULT59 (var Y))))))
(define-fun subst57 () Bool (forall ((VAR190 Term) (EXP212 Term) (EXP213 Term) (RESULT58 Term) (E1 Term) (X Term) (E Term) (E2 Term)) (=> (and (and (= VAR190 X) (and (= EXP212 E) (= EXP213 (app E1 E2)))) (= RESULT58 (subst VAR190 EXP212 EXP213))) (=> true (= RESULT58 (app (subst X E E1) (subst X E E2)))))))
(define-fun subst55 () Bool (forall ((E Term) (VAR189 Term) (EXP210 Term) (EXP211 Term) (X Term) (RESULT57 Term) (Y Term) (T Term) (E1 Term)) (=> (and (and (= VAR189 X) (and (= EXP210 E) (= EXP211 (fabs Y T E1)))) (= RESULT57 (subst VAR189 EXP210 EXP211))) (=> (and (= X Y) true) (= RESULT57 (fabs Y T E1))))))
(define-fun subst56 () Bool (forall ((VAR189 Term) (EXP210 Term) (EXP211 Term) (RESULT57 Term) (Y Term) (T Term) (X Term) (E Term) (E1 Term)) (=> (and (and (= VAR189 X) (and (= EXP210 E) (= EXP211 (fabs Y T E1)))) (= RESULT57 (subst VAR189 EXP210 EXP211))) (=> (and (not (= X Y)) true) (= RESULT57 (fabs Y T (subst X E E1)))))))
(assert subst58)
(assert subst59)
(assert subst57)
(assert subst55)
(assert subst56)
(define-fun T-subst () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) E2 T2)) (tcheck C (subst X E E2) T2))))
(assert T-subst)
(push 1)
(define-fun T-Preservation-beta () Bool (forall ((S Term) (X Term) (E1ARG Term) (E1BODY Term) (E1 Term) (C Term) (E2 Term) (T Term)) (=> (and (= E1 (app (fabs X S E1BODY) E1ARG)) (and (= E2 (subst X E1ARG E1BODY)) (and (tcheck C E1 T) (reduce E1 E2)))) (tcheck C E2 T))))
(assert (not T-Preservation-beta))
(check-sat)
(pop 1)
(push 1)
(declare-fun e1fun () Term)
(declare-fun e1funred () Term)
(define-fun EQ-e1fun () Bool (and (=> (= e1fun e1fun) true) (=> true (= e1fun e1fun))))
(define-fun EQ-e1funred () Bool (and (=> (= e1funred e1funred) true) (=> true (= e1funred e1funred))))
(assert EQ-e1fun)
(assert EQ-e1funred)
(define-fun T-Preservation-IH-app1 () Bool (forall ((C Term) (T Term)) (=> (and (tcheck C e1fun T) (reduce e1fun e1funred)) (tcheck C e1funred T))))
(assert T-Preservation-IH-app1)
(push 1)
(define-fun T-Preservation-App1 () Bool (forall ((E1ARG Term) (E1 Term) (C Term) (E2 Term) (T Term)) (=> (and (= E1 (app e1fun E1ARG)) (and (reduce e1fun e1funred) (and (= E2 (app e1funred E1ARG)) (and (tcheck C E1 T) (reduce E1 E2))))) (tcheck C E2 T))))
(assert (not T-Preservation-App1))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(declare-fun e1arg () Term)
(declare-fun e1argred () Term)
(define-fun EQ-e1arg () Bool (and (=> (= e1arg e1arg) true) (=> true (= e1arg e1arg))))
(define-fun EQ-e1argred () Bool (and (=> (= e1argred e1argred) true) (=> true (= e1argred e1argred))))
(assert EQ-e1arg)
(assert EQ-e1argred)
(define-fun T-Preservation-IH-app2 () Bool (forall ((C Term) (T Term)) (=> (and (tcheck C e1arg T) (reduce e1arg e1argred)) (tcheck C e1argred T))))
(assert T-Preservation-IH-app2)
(push 1)
(define-fun T-Preservation-App2 () Bool (forall ((E1FUN Term) (E1 Term) (C Term) (E2 Term) (T Term)) (=> (and (= E1 (app E1FUN e1arg)) (and (reduce e1arg e1argred) (and (= E2 (app E1FUN e1argred)) (and (tcheck C E1 T) (reduce E1 E2))))) (tcheck C E2 T))))
(assert (not T-Preservation-App2))
(check-sat)
(pop 1)
(pop 1)
