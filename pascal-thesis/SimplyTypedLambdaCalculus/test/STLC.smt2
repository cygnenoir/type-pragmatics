
(declare-sort Term 0)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun reduce (Term Term) Bool)
(declare-fun var (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun empty () Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun nothing () Term)
(declare-fun some (Term) Term)
(define-fun EQ-var () Bool (forall ((VAR32 Term) (VAR33 Term)) (and (=> (= (var VAR32) (var VAR33)) (= VAR32 VAR33)) (=> (= VAR32 VAR33) (= (var VAR32) (var VAR33))))))
(define-fun EQ-abs () Bool (forall ((VAR34 Term) (TYP28 Term) (EXP36 Term) (VAR35 Term) (TYP29 Term) (EXP37 Term)) (and (=> (= (fabs VAR34 TYP28 EXP36) (fabs VAR35 TYP29 EXP37)) (and (= VAR34 VAR35) (and (= TYP28 TYP29) (= EXP36 EXP37)))) (=> (and (= VAR34 VAR35) (and (= TYP28 TYP29) (= EXP36 EXP37))) (= (fabs VAR34 TYP28 EXP36) (fabs VAR35 TYP29 EXP37))))))
(define-fun EQ-app () Bool (forall ((EXP38 Term) (EXP39 Term) (EXP40 Term) (EXP41 Term)) (and (=> (= (app EXP38 EXP39) (app EXP40 EXP41)) (and (= EXP38 EXP40) (= EXP39 EXP41))) (=> (and (= EXP38 EXP40) (= EXP39 EXP41)) (= (app EXP38 EXP39) (app EXP40 EXP41))))))
(define-fun EQ-empty () Bool (and (=> (= empty empty) true) (=> true (= empty empty))))
(define-fun EQ-bind () Bool (forall ((VAR36 Term) (TYP30 Term) (CTX10 Term) (VAR37 Term) (TYP31 Term) (CTX11 Term)) (and (=> (= (bind VAR36 TYP30 CTX10) (bind VAR37 TYP31 CTX11)) (and (= VAR36 VAR37) (and (= TYP30 TYP31) (= CTX10 CTX11)))) (=> (and (= VAR36 VAR37) (and (= TYP30 TYP31) (= CTX10 CTX11))) (= (bind VAR36 TYP30 CTX10) (bind VAR37 TYP31 CTX11))))))
(define-fun EQ-arrow () Bool (forall ((TYP32 Term) (TYP33 Term) (TYP34 Term) (TYP35 Term)) (and (=> (= (arrow TYP32 TYP33) (arrow TYP34 TYP35)) (and (= TYP32 TYP34) (= TYP33 TYP35))) (=> (and (= TYP32 TYP34) (= TYP33 TYP35)) (= (arrow TYP32 TYP33) (arrow TYP34 TYP35))))))
(define-fun EQ-nothing () Bool (and (=> (= nothing nothing) true) (=> true (= nothing nothing))))
(define-fun EQ-some () Bool (forall ((TYP36 Term) (TYP37 Term)) (and (=> (= (some TYP36) (some TYP37)) (= TYP36 TYP37)) (=> (= TYP36 TYP37) (= (some TYP36) (some TYP37))))))
(assert EQ-var)
(assert EQ-abs)
(assert EQ-app)
(assert EQ-empty)
(assert EQ-bind)
(assert EQ-arrow)
(assert EQ-nothing)
(assert EQ-some)
(define-fun DIFF-var-abs () Bool (forall ((VAR38 Term) (VAR39 Term) (TYP38 Term) (EXP42 Term)) (distinct (var VAR38) (fabs VAR39 TYP38 EXP42))))
(define-fun DIFF-var-app () Bool (forall ((VAR40 Term) (EXP43 Term) (EXP44 Term)) (distinct (var VAR40) (app EXP43 EXP44))))
(define-fun DIFF-abs-app () Bool (forall ((VAR41 Term) (TYP39 Term) (EXP45 Term) (EXP46 Term) (EXP47 Term)) (distinct (fabs VAR41 TYP39 EXP45) (app EXP46 EXP47))))
(define-fun DIFF-empty-bind () Bool (forall ((VAR42 Term) (TYP40 Term) (CTX12 Term)) (distinct empty (bind VAR42 TYP40 CTX12))))
(define-fun DIFF-nothing-some () Bool (forall ((TYP41 Term)) (distinct nothing (some TYP41))))
(assert DIFF-var-abs)
(assert DIFF-var-app)
(assert DIFF-abs-app)
(assert DIFF-empty-bind)
(assert DIFF-nothing-some)
(declare-fun lookup (Term Term) Term)
(define-fun lookup5 () Bool (forall ((X Term) (EMPTY Term) (VAR44 Term) (CTX14 Term) (RESULT6 Term) (NOTHING Term)) (=> (and (and (= VAR44 X) (= CTX14 EMPTY)) (= RESULT6 (lookup VAR44 CTX14))) (=> true (= RESULT6 NOTHING)))))
(define-fun lookup3 () Bool (forall ((C Term) (VAR43 Term) (CTX13 Term) (X Term) (Y Term) (RESULT5 Term) (TY Term)) (=> (and (and (= VAR43 X) (= CTX13 (bind Y TY C))) (= RESULT5 (lookup VAR43 CTX13))) (=> (and (= X Y) true) (= RESULT5 (some TY))))))
(define-fun lookup4 () Bool (forall ((TY Term) (VAR43 Term) (CTX13 Term) (Y Term) (RESULT5 Term) (X Term) (C Term)) (=> (and (and (= VAR43 X) (= CTX13 (bind Y TY C))) (= RESULT5 (lookup VAR43 CTX13))) (=> (and (not (= X Y)) true) (= RESULT5 (lookup X C))))))
(assert lookup5)
(assert lookup3)
(assert lookup4)
(define-fun T-var () Bool (forall ((C Term) (X Term) (T Term)) (=> (= (lookup X C) (some T)) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Term) (X Term) (E Term) (S Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Term) (C Term) (E1 Term) (E2 Term) (T Term)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Term) (T Term) (C Term)) (=> (tcheck C E T) (or (exists ((X Term)) (and (= E (var X)) (= (lookup X C) (some T)))) (or (exists ((X Term) (E2 Term) (T1 Term) (T2 Term)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Term) (E2 Term) (S Term)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(define-fun T-Context-Duplicate () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (= X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind X TX C) E T))))
(define-fun T-Context-Swap () Bool (forall ((Y Term) (TY Term) (X Term) (TX Term) (C Term) (E Term) (T Term)) (=> (and (distinct X Y) (tcheck (bind X TX (bind Y TY C)) E T)) (tcheck (bind Y TY (bind X TX C)) E T))))
(define-fun T-Weak () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (and (= (lookup X C) nothing) (tcheck C E T)) (tcheck (bind X S C) E T))))
(assert T-Context-Duplicate)
(assert T-Context-Swap)
(assert T-Weak)
(declare-fun subst (Term Term Term) Term)
(define-fun subst8 () Bool (forall ((VAR47 Term) (EXP52 Term) (EXP53 Term) (X Term) (Y Term) (RESULT9 Term) (E Term)) (=> (and (and (= VAR47 X) (and (= EXP52 E) (= EXP53 (var Y)))) (= RESULT9 (subst VAR47 EXP52 EXP53))) (=> (and (= X Y) true) (= RESULT9 E)))))
(define-fun subst9 () Bool (forall ((E Term) (VAR47 Term) (EXP52 Term) (EXP53 Term) (X Term) (RESULT9 Term) (Y Term)) (=> (and (and (= VAR47 X) (and (= EXP52 E) (= EXP53 (var Y)))) (= RESULT9 (subst VAR47 EXP52 EXP53))) (=> (and (not (= X Y)) true) (= RESULT9 (var Y))))))
(define-fun subst7 () Bool (forall ((VAR46 Term) (EXP50 Term) (EXP51 Term) (RESULT8 Term) (E1 Term) (X Term) (E Term) (E2 Term)) (=> (and (and (= VAR46 X) (and (= EXP50 E) (= EXP51 (app E1 E2)))) (= RESULT8 (subst VAR46 EXP50 EXP51))) (=> true (= RESULT8 (app (subst X E E1) (subst X E E2)))))))
(define-fun subst5 () Bool (forall ((E Term) (VAR45 Term) (EXP48 Term) (EXP49 Term) (X Term) (RESULT7 Term) (Y Term) (T Term) (E1 Term)) (=> (and (and (= VAR45 X) (and (= EXP48 E) (= EXP49 (fabs Y T E1)))) (= RESULT7 (subst VAR45 EXP48 EXP49))) (=> (and (= X Y) true) (= RESULT7 (fabs Y T E1))))))
(define-fun subst6 () Bool (forall ((VAR45 Term) (EXP48 Term) (EXP49 Term) (RESULT7 Term) (Y Term) (T Term) (X Term) (E Term) (E1 Term)) (=> (and (and (= VAR45 X) (and (= EXP48 E) (= EXP49 (fabs Y T E1)))) (= RESULT7 (subst VAR45 EXP48 EXP49))) (=> (and (not (= X Y)) true) (= RESULT7 (fabs Y T (subst X E E1)))))))
(assert subst8)
(assert subst9)
(assert subst7)
(assert subst5)
(assert subst6)
(define-fun T-subst () Bool (forall ((T Term) (C Term) (X Term) (E Term) (E2 Term) (T2 Term)) (=> (and (tcheck C E T) (tcheck (bind X T C) E2 T2)) (tcheck C (subst X E E2) T2))))
(assert T-subst)
(push 1)
(define-fun T-Preservation-beta () Bool (forall ((S Term) (X Term) (E1ARG Term) (E1BODY Term) (E1 Term) (C Term) (E2 Term) (T Term)) (=> (and (= E1 (app (fabs X S E1BODY) E1ARG)) (and (= E2 (subst X E1ARG E1BODY)) (and (tcheck C E1 T) (reduce E1 E2)))) (tcheck C E2 T))))
(assert (not T-Preservation-beta))
(check-sat)
(pop 1)
(push 1)
(declare-fun e1fun () Term)
(declare-fun e1funred () Term)
(define-fun EQ-e1fun () Bool (and (=> (= e1fun e1fun) true) (=> true (= e1fun e1fun))))
(define-fun EQ-e1funred () Bool (and (=> (= e1funred e1funred) true) (=> true (= e1funred e1funred))))
(assert EQ-e1fun)
(assert EQ-e1funred)
(define-fun T-Preservation-IH-app1 () Bool (forall ((C Term) (T Term)) (=> (and (tcheck C e1fun T) (reduce e1fun e1funred)) (tcheck C e1funred T))))
(assert T-Preservation-IH-app1)
(push 1)
(define-fun T-Preservation-App1 () Bool (forall ((E1ARG Term) (E1 Term) (C Term) (E2 Term) (T Term)) (=> (and (= E1 (app e1fun E1ARG)) (and (reduce e1fun e1funred) (and (= E2 (app e1funred E1ARG)) (and (tcheck C E1 T) (reduce E1 E2))))) (tcheck C E2 T))))
(assert (not T-Preservation-App1))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(declare-fun e1arg () Term)
(declare-fun e1argred () Term)
(define-fun EQ-e1arg () Bool (and (=> (= e1arg e1arg) true) (=> true (= e1arg e1arg))))
(define-fun EQ-e1argred () Bool (and (=> (= e1argred e1argred) true) (=> true (= e1argred e1argred))))
(assert EQ-e1arg)
(assert EQ-e1argred)
(define-fun T-Preservation-IH-app2 () Bool (forall ((C Term) (T Term)) (=> (and (tcheck C e1arg T) (reduce e1arg e1argred)) (tcheck C e1argred T))))
(assert T-Preservation-IH-app2)
(push 1)
(define-fun T-Preservation-App2 () Bool (forall ((E1FUN Term) (E1 Term) (C Term) (E2 Term) (T Term)) (=> (and (= E1 (app E1FUN e1arg)) (and (reduce e1arg e1argred) (and (= E2 (app E1FUN e1argred)) (and (tcheck C E1 T) (reduce E1 E2))))) (tcheck C E2 T))))
(assert (not T-Preservation-App2))
(check-sat)
(pop 1)
(pop 1)
