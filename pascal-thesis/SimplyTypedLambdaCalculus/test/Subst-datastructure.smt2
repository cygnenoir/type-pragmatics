
(declare-sort Var 0)
(declare-sort BaseType 0)
(declare-datatypes () ((Type 
  (base (base-0 BaseType)) 
  (arrow (arrow-0 Type) (arrow-1 Type)))))
(declare-datatypes () ((Exp 
  (var (var-0 Var))
  (fabs (fabs-0 Var) (fabs-1 Type) (fabs-2 Exp))
  (app (app-0 Exp) (app-1 Exp)))))
(declare-datatypes () ((Ctx
  (empty)
  (bind (bind-0 Var) (bind-1 Type) (bind-2 Ctx)))))

(declare-fun lookup (Var Ctx Type) Bool)
(declare-fun tcheck (Ctx Exp Type) Bool)
(declare-fun subst (Var Exp Exp) Exp)
(declare-fun const-e1app () Exp)
(declare-fun const-e2app () Exp)
(declare-fun const-eabs () Exp)
(define-fun Lookup-Base () Bool (forall ((X Var) (C Ctx) (T Type) (T2 Type))
	(=> (lookup X (bind X T2 C) T) (= T T2))))
(define-fun Lookup-Step () Bool (forall ((X Var) (Y Var) (T2 Type) (C Ctx) (T Type))
	(=> (and (distinct X Y) (lookup X C T)) (lookup X (bind Y T2 C) T))))
(define-fun Context-Swap () Bool (forall ((C1 Ctx) (X2 Var) (T2 Type) (X1 Var) (T1 Type) (C2 Ctx))
	(=> (distinct X1 X2) (= (bind X1 T1 (bind X2 T2 C1)) (bind X2 T2 (bind X1 T1 C2))))))
(define-fun Context-Duplicate () Bool (forall ((T2 Type) (C1 Ctx) (X Var) (T1 Type) (C2 Ctx)) (= (bind X T1 (bind X T2 C1)) (bind X T1 C2))))
(define-fun T-Weak () Bool (forall ((X Var) (S Type) (C Ctx) (E Exp) (T Type)) (=> (tcheck C E T) (tcheck (bind X S C) E T))))

(define-fun T-var () Bool (forall ((C Ctx) (X Var) (T Type)) (=> (lookup X C T) (tcheck C (var X) T))))
(define-fun T-abs () Bool (forall ((C Ctx) (X Var) (E Exp) (S Type) (T Type)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((S Type) (C Ctx) (E1 Exp) (E2 Exp) (T Type)) (=> (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)) (tcheck C (app E1 E2) T))))
(define-fun T-inv () Bool (forall ((E Exp) (T Type) (C Ctx)) (=> (tcheck C E T) (or (exists ((X Var)) (and (= E (var X)) (lookup X C T))) (or (exists ((X Var) (E2 Exp) (T1 Type) (T2 Type)) (and (= E (fabs X T1 E2)) (and (= T (arrow T1 T2)) (tcheck (bind X T1 C) E2 T2)))) (exists ((E1 Exp) (E2 Exp) (S Type)) (and (= E (app E1 E2)) (and (tcheck C E1 (arrow S T)) (tcheck C E2 S)))))))))

(define-fun T-subst-IH-app1 () Bool (forall ((T Type) (C Ctx) (X Var) (E Exp) (T2 Type)) (=> (and (tcheck C E T) (tcheck (bind X T C) const-e1app T2)) (tcheck C (subst X E const-e1app) T2))))
(define-fun T-subst-IH-app2 () Bool (forall ((T Type) (C Ctx) (X Var) (E Exp) (T2 Type)) (=> (and (tcheck C E T) (tcheck (bind X T C) const-e2app T2)) (tcheck C (subst X E const-e2app) T2))))
(define-fun T-subst-IH-abs () Bool (forall ((T Type) (C Ctx) (X Var) (E Exp) (T2 Type)) (=> (and (tcheck C E T) (tcheck (bind X T C) const-eabs T2)) (tcheck C (subst X E const-eabs) T2))))

(assert Lookup-Base)
(assert Lookup-Step)
(assert Context-Swap)
(assert Context-Duplicate)
(assert T-Weak)
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-inv)
(assert T-subst-IH-app1)
(assert T-subst-IH-app2)
(assert T-subst-IH-abs)
(define-fun T-subst-var () Bool (forall ((T Type) (C Ctx) (X Var) (E Exp) (E2 Exp) (T2 Type)) (=> (and (= E2 (var X)) (and (= (subst X E E2) E) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(define-fun T-subst-app () Bool (forall ((T Type) (C Ctx) (X Var) (E Exp) (E2 Exp) (T2 Type)) (=> (and (= E2 (app const-e1app const-e2app)) (and (= (subst X E E2) (app (subst X E const-e1app) (subst X E const-e2app))) (and (tcheck C E T) (tcheck (bind X T C) E2 T2)))) (tcheck C (subst X E E2) T2))))
(define-fun T-subst-abs-1 () Bool (forall ((Y Var) (S Type) (E3 Exp) (T Type) (C Ctx) (X Var) (E Exp) (E2 Exp) (T2 Type)) (=> (and (= E2 (fabs Y S E3)) (and (= X Y) (and (= (subst X E E2) (fabs Y S E3)) (and (tcheck C E T) (tcheck (bind X T C) E2 T2))))) (tcheck C (subst X E E2) T2))))
(define-fun T-subst-abs-2 () Bool (forall ((Y Var) (S Type) (T Type) (C Ctx) (X Var) (E Exp) (E2 Exp) (T2 Type)) (=> (and (= E2 (fabs Y S const-eabs)) (and (distinct X Y) (and (= (subst X E E2) (fabs Y S (subst X E const-eabs))) (and (tcheck C E T) (tcheck (bind X T C) E2 T2))))) (tcheck C (subst X E E2) T2))))
(push 1)
(assert (not T-subst-var))
(check-sat)
(pop 1)
(push 1)
(assert (not T-subst-app))
(check-sat)
(pop 1)
(push 1)
(assert (not T-subst-abs-1))
(check-sat)
(pop 1)
(push 1)
(assert (not T-subst-abs-2))
(check-sat)
(pop 1)
	