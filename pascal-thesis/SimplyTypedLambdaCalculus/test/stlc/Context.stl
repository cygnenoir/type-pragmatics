module stlc.Context

import stlc.Syntax

sorts OptTyp
constructors
  noType : OptTyp
  someType : Typ -> OptTyp

function
lookup : Var Ctx -> OptTyp
lookup(x, empty) = noType
lookup(x, bind(y, Ty, C)) = 
  if (x == y)
  then someType(Ty)
  else lookup(x, C)


axioms
~x == ~y
bind(~x, ~Tx, bind(~y, ~Ty, ~C)) |- ~e : ~T
=========================================== T-Context-Duplicate
bind(~x, ~Tx, ~C) |- ~e : ~T

~x != ~y
bind(~x, ~Tx, bind(~y, ~Ty, ~C)) |- ~e : ~T
=========================================== T-Context-Swap
bind(~y, ~Ty, bind(~x, ~Tx, ~C)) |- ~e : ~T

lookup(~x, ~C) == noType
~C |- ~e : ~T
=========================== T-Weak
bind(~x, ~S, ~C) |- ~e : ~T

// !isFreeVar(~x, ~e)
// bind(~x, ~S, ~C) |- ~e : ~T
// =========================== T-Strong
// ~C |- ~e : ~T


