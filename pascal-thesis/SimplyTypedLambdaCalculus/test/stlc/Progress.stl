module stlc.Progress

import stlc.Syntax
import stlc.Context
import stlc.Subst {names}
import stlc.SubstLemma
import stlc.Reduction
import stlc.Types


// Prove by induction on typing relation. Cases: T-var, T-abs, T-app

goal
~ein == var(~x)
empty |- ~ein : ~T
!isValue(~ein)
=========================== T-Progress-T-var
exists ~eout
	reduce(~ein, ~eout)

local {
	consts
		e1 : Exp
	
	axiom	 
	empty |- e1 : ~T
	!isValue(e1)
	========================== T-Progress-IH-abs
	exists ~eout
		reduce(e1, ~eout)

	goal
	~ein == abs(~x, ~S, e1)
	empty |- ~ein : ~T
	!isValue(~ein)
	=========================== T-Progress-T-abs
	exists ~eout
		reduce(~ein, ~eout)
}


local {
	consts
		e1 : Exp
		e2 : Exp
	
	axiom	 
	empty |- e1 : ~T
	!isValue(e1)
	========================= T-Progress-IH-app-1
	exists ~eout
		reduce(e1, ~eout)

	axiom // not needed	 
	empty |- e2 : ~T
	!isValue(e2)
	========================= T-Progress-IH-app-2
	exists ~eout
		reduce(e2, ~eout)

	goal
	~ein == app(e1, e2)
	empty |- ~ein : ~T
	!isValue(~ein)
	=========================== T-Progress-T-app
	exists ~eout
		reduce(~ein, ~eout)
}

axiom
empty |- ~ein : ~T
!isValue(~ein)
=========================== T-Progress
exists ~eout
	reduce(~ein, ~eout)
