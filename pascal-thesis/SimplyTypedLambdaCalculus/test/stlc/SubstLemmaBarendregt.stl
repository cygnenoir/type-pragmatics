module stlc.SubstLemmaBarendregt

import stlc.Syntax
import stlc.Context
import stlc.Types
import stlc.SubstBarendregt

goal
~e2 == var(~y)
~x == ~y
~C |- ~e : ~T
bind(~x, ~T, ~C) |- ~e2 : ~T2
============================== T-subst-var-1
~C |- subst(~x, ~e, ~e2) : ~T2


goal
~e2 == var(~y)
~x != ~y
~C |- ~e : ~T
bind(~x, ~T, ~C) |- ~e2 : ~T2
============================== T-subst-var-2
~C |- subst(~x, ~e, ~e2) : ~T2


local {
	consts
		e1app : Exp
		e2app : Exp
	
	axioms
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e1app : ~T2
	============================== T-subst-IH-app1
	~C |- subst(~x, ~e, e1app) : ~T2
	
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e2app : ~T2
	============================== T-subst-IH-app2
	~C |- subst(~x, ~e, e2app) : ~T2
	
	goal
	~e2 == app(e1app, e2app)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- ~e2 : ~T2
	============================== T-subst-app
	~C |- subst(~x, ~e, ~e2) : ~T2
}

local {
	const eabs : Exp
	
	axiom
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- eabs : ~T2
	============================== T-subst-IH-abs
	~C |- subst(~x, ~e, eabs) : ~T2

	goal
	~e2 == abs(~y, ~S, eabs)
	~x != ~y
	!isFreeVar(~y, ~e)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- ~e2 : ~T2
	================================================= T-subst-abs
	~C |- subst(~x, ~e, ~e2) : ~T2
}

// substitution lemma becomes an axiom after the proof
axiom
~C |- ~e : ~T
bind(~x, ~T, ~C) |- ~e2 : ~T2
============================== T-subst
~C |- subst(~x, ~e, ~e2) : ~T2


