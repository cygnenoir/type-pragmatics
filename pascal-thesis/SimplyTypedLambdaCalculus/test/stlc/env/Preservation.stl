module stlc.env.Preservation

import stlc.Syntax
import stlc.Environment
import stlc.ReductionEnv 
import stlc.Types


// Prove type preservation by induction on recursive structure of reduction relation
// Each derived rule represents one induction case.

goal
// envCheck(~C, ~env)
~ein == ee(~env, app(abs(~x, ~S, ~e1), ~e2))
~eout == ee(bindEnv(~x, ~e2, ~env), ~e1)
~C |- ~ein : ~T
======================================== T-Preservation-beta
~C |- ~eout : ~T 

local {
	consts
		e1 : Exp
		e1red : Exp
	
	axiom	 
	~C |- e1 : ~T
	reduce(e1, e1red)
	======================= T-Preservation-IH-app1
	~C |- e1red : ~T

	goal
	~ein == app(e1, ~e2)
	~eout == app(e1red, ~e2)
	reduce(e1, e1red)
	~C |- ~ein : ~T
	================================ T-Preservation-App1
	~C |- ~eout : ~T
}

local {
	consts
		e2 : Exp
		e2red : Exp
	
	axiom
	~C |- e2 : ~T
	reduce(e2, e2red)
	================= T-Preservation-IH-app2
	~C |- e2red : ~T

	goal	
	~ein == app(~e1, e2)
	~eout == app(~e1, e2red)
	reduce(e2, e2red)
	~C |- ~ein : ~T
	================================ T-Preservation-App2
	~C |- ~eout : ~T
}
