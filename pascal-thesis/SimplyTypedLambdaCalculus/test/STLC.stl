module STLC

import Subst 

// ******************************
// Type preservation of reduction
// ******************************


// Prove type preservation by induction on recursive structure of reduction relation
// Each derived rule represents one induction case.

goal
~e1 = app(abs(~x, ~S, ~e1body), ~e1arg)
~e2 = subst(~x, ~e1arg, ~e1body)
~C |- ~e1 : ~T
~e1 -> ~e2
================================ T-Preservation-beta
~C |- ~e2 : ~T 

local {
	consts
		e1fun : Exp
		e1funred : Exp
	
	axiom	
	~C |- e1fun : ~T
	e1fun -> e1funred
	==================== T-Preservation-IH-app1
	~C |- e1funred : ~T

	goal
	~e1 = app(e1fun, ~e1arg)
	e1fun -> e1funred
	~e2 = app(e1funred, ~e1arg)
	~C |- ~e1 : ~T
	~e1 -> ~e2
	================================ T-Preservation-App1
	~C |- ~e2 : ~T
}

local {
	consts
		e1arg : Exp
		e1argred : Exp
	
	axiom
	~C |- e1arg : ~T
	e1arg -> e1argred
	==================== T-Preservation-IH-app2
	~C |- e1argred : ~T

	goal	
	~e1 = app(~e1fun, e1arg)
	e1arg -> e1argred
	~e2 = app(~e1fun, e1argred)
	~C |- ~e1 : ~T
	~e1 -> ~e2
	================================ T-Preservation-App2
	~C |- ~e2 : ~T
}
