module Nat

rules

~x:~T in (~x:~T2; ~C)
====================== Lookup-Base
~T = ~T2

~x != ~y
~x:~T in ~C
===================== Lookup-Step
~x:~T in (~y:~T2; ~C)

================ T-zero
~C |- zero : Nat

~C |- ~e : Nat
====================== T-succ
~C |- succ(~e) : Nat

~C |- ~e1 : Nat
~C |- ~e2 : Nat
===================== T-plus
~C |- ~e1 + ~e2 : Nat


~C |- ~e : ~T
==================== T-Nat-inv
OR
=> ~e = zero
   ~T = Nat
=> exists ~epred
     ~e = succ(~epred)
     ~T = Nat
=> exists ~e1, ~e2
     ~e = ~e1 + ~e2
     ~T = Nat
