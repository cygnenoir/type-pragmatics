
(declare-sort Term 0)
(declare-fun lookup (Term Term Term) Bool)
(declare-fun tcheck (Term Term Term) Bool)
(declare-fun future (Term) Term)
(declare-fun fabs (Term Term Term) Term)
(declare-fun bind (Term Term Term) Term)
(declare-fun arrow (Term Term) Term)
(declare-fun app (Term Term) Term)
(declare-fun join (Term) Term)
(declare-fun fork (Term) Term)
(declare-fun par (Term) Term)
(define-fun lookup-ctx-base () Bool (forall ((X Term) (T Term) (CTX Term)) (lookup X (bind X T CTX) T)))
(define-fun lookup-ctx-step () Bool (forall ((X Term) (Y Term) (T Term) (T2 Term) (CTX Term)) (=> (and (distinct X Y) (lookup X CTX T)) (lookup X (bind Y T2 CTX) T))))
(define-fun T-var () Bool (forall ((X Term) (C Term) (T Term)) (=> (lookup X C T) (tcheck C X T))))
(define-fun T-abs () Bool (forall ((X Term) (S Term) (C Term) (E Term) (T Term)) (=> (tcheck (bind X S C) E T) (tcheck C (fabs X S E) (arrow S T)))))
(define-fun T-app () Bool (forall ((E Term) (T Term) (C Term) (F Term) (S Term)) (=> (and (tcheck C E (arrow S T)) (tcheck C F S)) (tcheck C (app E F) T))))
(define-fun T-fork () Bool (forall ((C Term) (E Term) (T Term)) (=> (tcheck C E T) (tcheck C (fork E) (future T)))))
(define-fun T-join () Bool (forall ((C Term) (E Term) (T Term)) (=> (tcheck C E (future T)) (tcheck C (join E) T))))
(define-fun T-IH-par-abs () Bool (forall ((C Term) (eabs Term) (T Term)) (=> (tcheck C eabs T) (tcheck C (par eabs) T))))
(define-fun T-abs-inversion () Bool (forall ((C Term) (X Term) (S Term) (E Term) (T Term)) (exists ((T2 Term)) (=> (tcheck C (fabs X S E) T) (and (= T (arrow S T2)) (tcheck (bind X S C) E T2))))))
(define-fun T-IH-par-app-1 () Bool (forall ((C Term) (eapp1 Term) (T Term)) (=> (tcheck C eapp1 T) (tcheck C (par eapp1) T))))
(define-fun T-IH-par-app-2 () Bool (forall ((C Term) (eapp2 Term) (T Term)) (=> (tcheck C eapp2 T) (tcheck C (par eapp2) T))))
(define-fun T-app-inversion () Bool (forall ((C Term) (E Term) (F Term) (T Term)) (exists ((S Term)) (=> (tcheck C (app E F) T) (and (tcheck C E (arrow S T)) (tcheck C F S))))))
(assert lookup-ctx-base)
(assert lookup-ctx-step)
(assert T-var)
(assert T-abs)
(assert T-app)
(assert T-fork)
(assert T-join)
(assert T-IH-par-abs)
(assert T-abs-inversion)
(assert T-IH-par-app-1)
(assert T-IH-par-app-2)
(assert T-app-inversion)
