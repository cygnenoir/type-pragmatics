
fof('EQ-none', axiom, (((vnone=vnone) => $true) & ($true => (vnone=vnone)))).
fof('EQ-some', axiom, (![VA0,VA1] : (((vsome(VA0)=vsome(VA1)) => (VA0=VA1)) & ((VA0=VA1) => (vsome(VA0)=vsome(VA1)))))).
fof('DIFF-none-some', axiom, (![VA0] : (vnone!=vsome(VA0)))).
fof('isSome0', axiom, (![VOpt0] : ((VOpt0=vnone) => (~visSome(VOpt0))))).
fof('isSome1', axiom, (![Va,VOpt0] : ((VOpt0=vsome(Va)) => visSome(VOpt0)))).
fof('getSome0', axiom, (![VOpt0,RESULT,Va] : ((VOpt0=vsome(Va)) => ((RESULT=vgetSome(VOpt0)) => (RESULT=Va))))).
fof('isSome-INV-1', axiom, (![Vopt] : (visSome(Vopt) => (?[Va] : ((Vopt=vsome(Va)) & (vgetSome(Vopt)=Va)))))).
fof('isSome-INV-2', axiom, (![Vopt,Va,Vb] : (((Vopt=vsome(Va)) & (vgetSome(Vopt)=Vb)) => (Va=Vb)))).
fof('EQ-error', axiom, (((verror=verror) => $true) & ($true => (verror=verror)))).
fof('EQ-isTrue', axiom, (((visTrue=visTrue) => $true) & ($true => (visTrue=visTrue)))).
fof('EQ-isFalse', axiom, (((visFalse=visFalse) => $true) & ($true => (visFalse=visFalse)))).
fof('DIFF-error-isTrue', axiom, (verror!=visTrue)).
fof('DIFF-error-isFalse', axiom, (verror!=visFalse)).
fof('DIFF-isTrue-isFalse', axiom, (visTrue!=visFalse)).
fof('EQ-ctype', axiom, (![VAName0,VFType0,VAName1,VFType1] : (((vctype(VAName0,VFType0)=vctype(VAName1,VFType1)) => ((VAName0=VAName1) & (VFType0=VFType1))) & (((VAName0=VAName1) & (VFType0=VFType1)) => (vctype(VAName0,VFType0)=vctype(VAName1,VFType1)))))).
fof('EQ-aempty', axiom, (((vaempty=vaempty) => $true) & ($true => (vaempty=vaempty)))).
fof('EQ-acons', axiom, (![VAName0,VAList0,VAName1,VAList1] : (((vacons(VAName0,VAList0)=vacons(VAName1,VAList1)) => ((VAName0=VAName1) & (VAList0=VAList1))) & (((VAName0=VAName1) & (VAList0=VAList1)) => (vacons(VAName0,VAList0)=vacons(VAName1,VAList1)))))).
fof('EQ-ttempty', axiom, (((vttempty=vttempty) => $true) & ($true => (vttempty=vttempty)))).
fof('EQ-ttcons', axiom, (![VCType0,VTType0,VCType1,VTType1] : (((vttcons(VCType0,VTType0)=vttcons(VCType1,VTType1)) => ((VCType0=VCType1) & (VTType0=VTType1))) & (((VCType0=VCType1) & (VTType0=VTType1)) => (vttcons(VCType0,VTType0)=vttcons(VCType1,VTType1)))))).
fof('EQ-rtempty', axiom, (((vrtempty=vrtempty) => $true) & ($true => (vrtempty=vrtempty)))).
fof('EQ-rtcons', axiom, (![VFType0,VRawType0,VFType1,VRawType1] : (((vrtcons(VFType0,VRawType0)=vrtcons(VFType1,VRawType1)) => ((VFType0=VFType1) & (VRawType0=VRawType1))) & (((VFType0=VFType1) & (VRawType0=VRawType1)) => (vrtcons(VFType0,VRawType0)=vrtcons(VFType1,VRawType1)))))).
fof('DIFF-aempty-acons', axiom, (![VAName0,VAList0] : (vaempty!=vacons(VAName0,VAList0)))).
fof('DIFF-ttempty-ttcons', axiom, (![VCType0,VTType0] : (vttempty!=vttcons(VCType0,VTType0)))).
fof('DIFF-rtempty-rtcons', axiom, (![VFType0,VRawType0] : (vrtempty!=vrtcons(VFType0,VRawType0)))).
fof('EQ-rempty', axiom, (((vrempty=vrempty) => $true) & ($true => (vrempty=vrempty)))).
fof('EQ-rcons', axiom, (![VFVal0,VRow0,VFVal1,VRow1] : (((vrcons(VFVal0,VRow0)=vrcons(VFVal1,VRow1)) => ((VFVal0=VFVal1) & (VRow0=VRow1))) & (((VFVal0=VFVal1) & (VRow0=VRow1)) => (vrcons(VFVal0,VRow0)=vrcons(VFVal1,VRow1)))))).
fof('EQ-tempty', axiom, (((vtempty=vtempty) => $true) & ($true => (vtempty=vtempty)))).
fof('EQ-tcons', axiom, (![VRow0,VRawTable0,VRow1,VRawTable1] : (((vtcons(VRow0,VRawTable0)=vtcons(VRow1,VRawTable1)) => ((VRow0=VRow1) & (VRawTable0=VRawTable1))) & (((VRow0=VRow1) & (VRawTable0=VRawTable1)) => (vtcons(VRow0,VRawTable0)=vtcons(VRow1,VRawTable1)))))).
fof('EQ-table', axiom, (![VAList0,VRawTable0,VAList1,VRawTable1] : (((vtable(VAList0,VRawTable0)=vtable(VAList1,VRawTable1)) => ((VAList0=VAList1) & (VRawTable0=VRawTable1))) & (((VAList0=VAList1) & (VRawTable0=VRawTable1)) => (vtable(VAList0,VRawTable0)=vtable(VAList1,VRawTable1)))))).
fof('DIFF-rempty-rcons', axiom, (![VFVal0,VRow0] : (vrempty!=vrcons(VFVal0,VRow0)))).
fof('DIFF-tempty-tcons', axiom, (![VRow0,VRawTable0] : (vtempty!=vtcons(VRow0,VRawTable0)))).
fof('getRaw0', axiom, (![Val,VTable0,RESULT,Vrt] : ((VTable0=vtable(Val,Vrt)) => ((RESULT=vgetRaw(VTable0)) => (RESULT=Vrt))))).
fof('getRaw-INV', axiom, (![VTable0,RESULT] : ((getRaw(VTable0)=RESULT) => (?[Val,Vrt] : ((VTable0=vtable(Val,Vrt)) & (RESULT=Vrt)))))).
fof('getAL0', axiom, (![Vrt,VTable0,RESULT,Val] : ((VTable0=vtable(Val,Vrt)) => ((RESULT=vgetAL(VTable0)) => (RESULT=Val))))).
fof('getAL-INV', axiom, (![VTable0,RESULT] : ((getAL(VTable0)=RESULT) => (?[Vrt,Val] : ((VTable0=vtable(Val,Vrt)) & (RESULT=Val)))))).
fof('matchingAList0', axiom, (![VTType0,VAList0] : (((VTType0=vttempty) & (VAList0=vaempty)) => vmatchingAList(VTType0,VAList0)))).
fof('matchingAList1', axiom, (![Vf,VTType0,VAList0,Va1,Va2,Vtt,Val] : (((VTType0=vttcons(vctype(Va1,Vf),Vtt)) & (VAList0=vacons(Va2,Val))) => ((((Va1=Va2) & vmatchingAList(Vtt,Val)) => vmatchingAList(VTType0,VAList0)) & (vmatchingAList(VTType0,VAList0) => ((Va1=Va2) & vmatchingAList(Vtt,Val))))))).
fof('matchingAList2', axiom, (![Vtt,Val,VTType0,VAList0] : (((VTType0=Vtt) & ((VAList0=Val) & (((![VVa10,VVf0,VVtt0] : (Vtt!=vttcons(vctype(VVa10,VVf0),VVtt0))) | (![VVa20,VVal0] : (Val!=vacons(VVa20,VVal0)))) & ((Vtt!=vttempty) | (Val!=vaempty))))) => (~vmatchingAList(VTType0,VAList0))))).
fof('welltypedtable0', axiom, (![VTType0,VTable0,Val,Vtt,Vt] : (((VTType0=Vtt) & (VTable0=vtable(Val,Vt))) => (((vmatchingAList(Vtt,Val) & vwelltypedRawtable(vrawType(Vtt),Vt)) => vwelltypedtable(VTType0,VTable0)) & (vwelltypedtable(VTType0,VTable0) => (vmatchingAList(Vtt,Val) & vwelltypedRawtable(vrawType(Vtt),Vt))))))).
fof('rawType0', axiom, (![VTType0,RESULT] : ((VTType0=vttempty) => ((RESULT=vrawType(VTType0)) => (RESULT=vrtempty))))).
fof('rawType1', axiom, (![Va,VTType0,RESULT,Vft,Vtt] : ((VTType0=vttcons(vctype(Va,Vft),Vtt)) => ((RESULT=vrawType(VTType0)) => (RESULT=vrtcons(Vft,vrawType(Vtt))))))).
fof('rawType-INV', axiom, (![VTType0,RESULT] : ((rawType(VTType0)=RESULT) => (((VTType0=vttempty) & (RESULT=vrtempty)) | (?[Va,Vft,Vtt] : ((VTType0=vttcons(vctype(Va,Vft),Vtt)) & (RESULT=vrtcons(Vft,vrawType(Vtt))))))))).
fof('welltypedRawtable0', axiom, (![Vrt,VRawType0,VRawTable0] : (((VRawType0=Vrt) & (VRawTable0=vtempty)) => vwelltypedRawtable(VRawType0,VRawTable0)))).
fof('welltypedRawtable1', axiom, (![VRawType0,VRawTable0,Vr,Vrt,Vt] : (((VRawType0=Vrt) & (VRawTable0=vtcons(Vr,Vt))) => (((vwelltypedRow(Vrt,Vr) & vwelltypedRawtable(Vrt,Vt)) => vwelltypedRawtable(VRawType0,VRawTable0)) & (vwelltypedRawtable(VRawType0,VRawTable0) => (vwelltypedRow(Vrt,Vr) & vwelltypedRawtable(Vrt,Vt))))))).
fof('welltypedRow0', axiom, (![VRawType0,VRow0] : (((VRawType0=vrtempty) & (VRow0=vrempty)) => vwelltypedRow(VRawType0,VRow0)))).
fof('welltypedRow1', axiom, (![VRawType0,VRow0,Vv,Vft,Vrt,Vr] : (((VRawType0=vrtcons(Vft,Vrt)) & (VRow0=vrcons(Vv,Vr))) => ((((vfieldType(Vv)=Vft) & vwelltypedRow(Vrt,Vr)) => vwelltypedRow(VRawType0,VRow0)) & (vwelltypedRow(VRawType0,VRow0) => ((vfieldType(Vv)=Vft) & vwelltypedRow(Vrt,Vr))))))).
fof('welltypedRow2', axiom, (![Vrt,Vr,VRawType0,VRow0] : (((VRawType0=Vrt) & ((VRow0=Vr) & (((![VVft0,VVrt0] : (Vrt!=vrtcons(VVft0,VVrt0))) | (![VVv0,VVr0] : (Vr!=vrcons(VVv0,VVr0)))) & ((Vrt!=vrtempty) | (Vr!=vrempty))))) => (~vwelltypedRow(VRawType0,VRow0))))).
fof('EQ-empty', axiom, (((vempty=vempty) => $true) & ($true => (vempty=vempty)))).
fof('EQ-bind', axiom, (![VTName0,VTable0,VTStore0,VTName1,VTable1,VTStore1] : (((vbind(VTName0,VTable0,VTStore0)=vbind(VTName1,VTable1,VTStore1)) => ((VTName0=VTName1) & ((VTable0=VTable1) & (VTStore0=VTStore1)))) & (((VTName0=VTName1) & ((VTable0=VTable1) & (VTStore0=VTStore1))) => (vbind(VTName0,VTable0,VTStore0)=vbind(VTName1,VTable1,VTStore1)))))).
fof('DIFF-empty-bind', axiom, (![VTName0,VTable0,VTStore0] : (vempty!=vbind(VTName0,VTable0,VTStore0)))).
fof('lookup0', axiom, (![Vn,VTName0,VTStore0,RESULT] : (((VTName0=Vn) & (VTStore0=vempty)) => ((RESULT=vlookup(VTName0,VTStore0)) => (RESULT=vnone))))).
fof('lookup1', axiom, (![VTS,Vn,Vm,VTName0,VTStore0,RESULT,Vt] : (((VTName0=Vn) & (VTStore0=vbind(Vm,Vt,VTS))) => ((Vn=Vm) => ((RESULT=vlookup(VTName0,VTStore0)) => (RESULT=vsome(Vt))))))).
fof('lookup2', axiom, (![Vt,Vm,VTName0,VTStore0,RESULT,Vn,VTS] : (((VTName0=Vn) & (VTStore0=vbind(Vm,Vt,VTS))) => ((~(Vn=Vm)) => ((RESULT=vlookup(VTName0,VTStore0)) => (RESULT=vlookup(Vn,VTS))))))).
fof('lookup-INV', axiom, (![VTName0,VTStore0,RESULT] : ((lookup(VTName0,VTStore0)=RESULT) => ((?[Vn] : ((VTName0=Vn) & ((VTStore0=vempty) & (RESULT=vnone)))) | ((?[VTS,Vn,Vm,Vt] : ((VTName0=Vn) & ((VTStore0=vbind(Vm,Vt,VTS)) & ((Vn=Vm) & (RESULT=vsome(Vt)))))) | (?[Vt,Vm,Vn,VTS] : ((VTName0=Vn) & ((VTStore0=vbind(Vm,Vt,VTS)) & ((~(Vn=Vm)) & (RESULT=vlookup(Vn,VTS))))))))))).
fof('T-TStore-Duplicate', axiom, (![Vy,VTy,Vx,VTx,VC,Ve,VT] : (((Vx=Vy) & vtcheck(vbind(Vx,VTx,vbind(Vy,VTy,VC)),Ve,VT)) => vtcheck(vbind(Vx,VTx,VC),Ve,VT)))).
fof('T-TStore-Swap', axiom, (![Vy,VTy,Vx,VTx,VC,Ve,VT] : (((Vx!=Vy) & vtcheck(vbind(Vx,VTx,vbind(Vy,VTy,VC)),Ve,VT)) => vtcheck(vbind(Vy,VTy,vbind(Vx,VTx,VC)),Ve,VT)))).
fof('EQ-cempty', axiom, (((vcempty=vcempty) => $true) & ($true => (vcempty=vcempty)))).
fof('EQ-cbind', axiom, (![VTName0,VTType0,VTTContext0,VTName1,VTType1,VTTContext1] : (((vcbind(VTName0,VTType0,VTTContext0)=vcbind(VTName1,VTType1,VTTContext1)) => ((VTName0=VTName1) & ((VTType0=VTType1) & (VTTContext0=VTTContext1)))) & (((VTName0=VTName1) & ((VTType0=VTType1) & (VTTContext0=VTTContext1))) => (vcbind(VTName0,VTType0,VTTContext0)=vcbind(VTName1,VTType1,VTTContext1)))))).
fof('DIFF-cempty-cbind', axiom, (![VTName0,VTType0,VTTContext0] : (vcempty!=vcbind(VTName0,VTType0,VTTContext0)))).
fof('clookup0', axiom, (![Vtn,VTName0,VTTContext0,RESULT] : (((VTName0=Vtn) & (VTTContext0=vcempty)) => ((RESULT=vclookup(VTName0,VTTContext0)) => (RESULT=vnone))))).
fof('clookup1', axiom, (![VTTC,Vtn,Vtm,VTName0,VTTContext0,RESULT,Vtt] : (((VTName0=Vtn) & (VTTContext0=vcbind(Vtm,Vtt,VTTC))) => ((Vtn=Vtm) => ((RESULT=vclookup(VTName0,VTTContext0)) => (RESULT=vsome(Vtt))))))).
fof('clookup2', axiom, (![Vtt,Vtm,VTName0,VTTContext0,RESULT,Vtn,VTTC] : (((VTName0=Vtn) & (VTTContext0=vcbind(Vtm,Vtt,VTTC))) => ((~(Vtn=Vtm)) => ((RESULT=vclookup(VTName0,VTTContext0)) => (RESULT=vclookup(Vtn,VTTC))))))).
fof('clookup-INV', axiom, (![VTName0,VTTContext0,RESULT] : ((clookup(VTName0,VTTContext0)=RESULT) => ((?[Vtn] : ((VTName0=Vtn) & ((VTTContext0=vcempty) & (RESULT=vnone)))) | ((?[VTTC,Vtn,Vtm,Vtt] : ((VTName0=Vtn) & ((VTTContext0=vcbind(Vtm,Vtt,VTTC)) & ((Vtn=Vtm) & (RESULT=vsome(Vtt)))))) | (?[Vtt,Vtm,Vtn,VTTC] : ((VTName0=Vtn) & ((VTTContext0=vcbind(Vtm,Vtt,VTTC)) & ((~(Vtn=Vtm)) & (RESULT=vclookup(Vtn,VTTC))))))))))).
fof('T-TTContext-Duplicate', axiom, (![Vy,VTy,Vx,VTx,VC,Ve,VT] : (((Vx=Vy) & vtcheck(vcbind(Vx,VTx,vcbind(Vy,VTy,VC)),Ve,VT)) => vtcheck(vcbind(Vx,VTx,VC),Ve,VT)))).
fof('T-TTContext-Swap', axiom, (![Vy,VTy,Vx,VTx,VC,Ve,VT] : (((Vx!=Vy) & vtcheck(vcbind(Vx,VTx,vcbind(Vy,VTy,VC)),Ve,VT)) => vtcheck(vcbind(Vy,VTy,vcbind(Vx,VTx,VC)),Ve,VT)))).
fof('EQ-Ref', axiom, (![VTName0,VTName1] : (((vRef(VTName0)=vRef(VTName1)) => (VTName0=VTName1)) & ((VTName0=VTName1) => (vRef(VTName0)=vRef(VTName1)))))).
fof('EQ-Tvalue', axiom, (![VTable0,VTable1] : (((vTvalue(VTable0)=vTvalue(VTable1)) => (VTable0=VTable1)) & ((VTable0=VTable1) => (vTvalue(VTable0)=vTvalue(VTable1)))))).
fof('EQ-Selectallfrom', axiom, (![VTRef0,VTRef1] : (((vSelectallfrom(VTRef0)=vSelectallfrom(VTRef1)) => (VTRef0=VTRef1)) & ((VTRef0=VTRef1) => (vSelectallfrom(VTRef0)=vSelectallfrom(VTRef1)))))).
fof('EQ-Selectsomefrom', axiom, (![VAList0,VTRef0,VAList1,VTRef1] : (((vSelectsomefrom(VAList0,VTRef0)=vSelectsomefrom(VAList1,VTRef1)) => ((VAList0=VAList1) & (VTRef0=VTRef1))) & (((VAList0=VAList1) & (VTRef0=VTRef1)) => (vSelectsomefrom(VAList0,VTRef0)=vSelectsomefrom(VAList1,VTRef1)))))).
fof('DIFF-Tvalue-Selectallfrom', axiom, (![VTable0,VTRef0] : (vTvalue(VTable0)!=vSelectallfrom(VTRef0)))).
fof('DIFF-Tvalue-Selectsomefrom', axiom, (![VTable0,VAList0,VTRef0] : (vTvalue(VTable0)!=vSelectsomefrom(VAList0,VTRef0)))).
fof('DIFF-Selectallfrom-Selectsomefrom', axiom, (![VTRef0,VAList0,VTRef1] : (vSelectallfrom(VTRef0)!=vSelectsomefrom(VAList0,VTRef1)))).
fof('isValue0', axiom, (![Vt,VQuery0] : ((VQuery0=vTvalue(Vt)) => visValue(VQuery0)))).
fof('isValue1', axiom, (![Vn,VQuery0] : ((VQuery0=vSelectallfrom(Vn)) => (~visValue(VQuery0))))).
fof('isValue2', axiom, (![Val,Vtn,VQuery0] : ((VQuery0=vSelectsomefrom(Val,Vtn)) => (~visValue(VQuery0))))).
fof('isValue-INV', axiom, (![Vsql] : (visValue(Vsql) => (?[Vt] : (Vsql=vTvalue(Vt)))))).
fof('dropFirstColType0', axiom, (![VTType0,RESULT] : ((VTType0=vttempty) => ((RESULT=vdropFirstColType(VTType0)) => (RESULT=vttempty))))).
fof('dropFirstColtType0', axiom, (![Vct,VTType0,RESULT,Vtt] : ((VTType0=vttcons(Vct,Vtt)) => ((RESULT=vdropFirstColtType(VTType0)) => (RESULT=Vtt))))).
fof('dropFirstColType-INV', axiom, (![VTType0,RESULT] : ((dropFirstColType(VTType0)=RESULT) => (((VTType0=vttempty) & (RESULT=vttempty)) | (?[Vct,Vtt] : ((VTType0=vttcons(Vct,Vtt)) & (RESULT=Vtt))))))).
fof('findColType0', axiom, (![Van,VAName0,VTType0,RESULT] : (((VAName0=Van) & (VTType0=vttempty)) => ((RESULT=vfindColType(VAName0,VTType0)) => (RESULT=vnone))))).
fof('findColType1', axiom, (![Vttr,Van,Va,VAName0,VTType0,RESULT,Vft] : (((VAName0=Van) & (VTType0=vttcons(vctype(Va,Vft),Vttr))) => ((Van=Va) => ((RESULT=vfindColType(VAName0,VTType0)) => (RESULT=vsome(Vft))))))).
fof('findColType2', axiom, (![Vft,Va,VAName0,VTType0,RESULT,Van,Vttr] : (((VAName0=Van) & (VTType0=vttcons(vctype(Va,Vft),Vttr))) => ((~(Van=Va)) => ((RESULT=vfindColType(VAName0,VTType0)) => (RESULT=vfindColType(Van,Vttr))))))).
fof('findColType-INV', axiom, (![VAName0,VTType0,RESULT] : ((findColType(VAName0,VTType0)=RESULT) => ((?[Van] : ((VAName0=Van) & ((VTType0=vttempty) & (RESULT=vnone)))) | ((?[Vttr,Van,Va,Vft] : ((VAName0=Van) & ((VTType0=vttcons(vctype(Va,Vft),Vttr)) & ((Van=Va) & (RESULT=vsome(Vft)))))) | (?[Vft,Va,Van,Vttr] : ((VAName0=Van) & ((VTType0=vttcons(vctype(Va,Vft),Vttr)) & ((~(Van=Va)) & (RESULT=vfindColType(Van,Vttr))))))))))).
fof('projectType0', axiom, (![Vtt,VAList0,VTType0,RESULT] : (((VAList0=vaempty) & (VTType0=Vtt)) => ((RESULT=vprojectType(VAList0,VTType0)) => (RESULT=vsome(vttempty)))))).
fof('projectType1', axiom, (![Valr,Vtt,VAList0,VTType0,RESULT,Va,Vft,Vtprest] : (((VAList0=vacons(Va,Valr)) & (VTType0=Vtt)) => (((Vft=vfindColType(Va,Vtt)) & ((Vtprest=vprojectType(Valr,Vtt)) & (visSome(Vft) & visSome(Vtprest)))) => ((RESULT=vprojectType(VAList0,VTType0)) => (RESULT=vsome(vttcons(vctype(Va,vgetSome(Vft)),vgetSome(Vtprest))))))))).
fof('projectType2', axiom, (![Va,Valr,Vtt,Vft,Vtprest,VAList0,VTType0,RESULT] : (((VAList0=vacons(Va,Valr)) & (VTType0=Vtt)) => (((Vft=vfindColType(Va,Vtt)) & ((Vtprest=vprojectType(Valr,Vtt)) & (~(visSome(Vft) & visSome(Vtprest))))) => ((RESULT=vprojectType(VAList0,VTType0)) => (RESULT=vnone)))))).
fof('projectType-INV', axiom, (![VAList0,VTType0,RESULT] : ((projectType(VAList0,VTType0)=RESULT) => ((?[Vtt] : ((VAList0=vaempty) & ((VTType0=Vtt) & (RESULT=vsome(vttempty))))) | ((?[Valr,Vtt,Va,Vft,Vtprest] : ((VAList0=vacons(Va,Valr)) & ((VTType0=Vtt) & ((Vft=vfindColType(Va,Vtt)) & ((Vtprest=vprojectType(Valr,Vtt)) & (visSome(Vft) & (visSome(Vtprest) & (RESULT=vsome(vttcons(vctype(Va,vgetSome(Vft)),vgetSome(Vtprest))))))))))) | (?[Va,Valr,Vtt,Vft,Vtprest] : ((VAList0=vacons(Va,Valr)) & ((VTType0=Vtt) & ((Vft=vfindColType(Va,Vtt)) & ((Vtprest=vprojectType(Valr,Vtt)) & ((~(visSome(Vft) & visSome(Vtprest))) & (RESULT=vnone)))))))))))).
fof('T-Tvalue', axiom, (![VTTC,Val,Vrt,VTT] : (vwelltypedtable(VTT,vtable(Val,Vrt)) => vtcheck(VTTC,vTvalue(vtable(Val,Vrt)),VTT)))).
fof('T-Selectallfrom', axiom, (![VTTC,Vtn,VTT] : ((vclookup(Vtn,VTTC)=vsome(VTT)) => vtcheck(VTTC,vSelectallfrom(vRef(Vtn)),VTT)))).
fof('T-Selectsomefrom', axiom, (![VTT1,VTTC,Val,Vtn,VTT] : (((vclookup(Vtn,VTTC)=vsome(VTT1)) & (vprojectType(Val,VTT1)=vsome(VTT))) => vtcheck(VTTC,vSelectsomefrom(Val,vRef(Vtn)),VTT)))).
fof('StoreContextConsistent0', axiom, (![VTStore0,VTTContext0] : (((VTStore0=vempty) & (VTTContext0=vcempty)) => vStoreContextConsistent(VTStore0,VTTContext0)))).
fof('StoreContextConsistent1', axiom, (![VTStore0,VTTContext0,Vtn1,Vtn2,Vtt,Vt,Vtsr,Vttcr] : (((VTStore0=vbind(Vtn1,Vt,Vtsr)) & (VTTContext0=vcbind(Vtn2,Vtt,Vttcr))) => ((((Vtn1=Vtn2) & (vwelltypedtable(Vtt,Vt) & vStoreContextConsistent(Vtsr,Vttcr))) => vStoreContextConsistent(VTStore0,VTTContext0)) & (vStoreContextConsistent(VTStore0,VTTContext0) => ((Vtn1=Vtn2) & (vwelltypedtable(Vtt,Vt) & vStoreContextConsistent(Vtsr,Vttcr)))))))).
fof('StoreContextConsistent2', axiom, (![Vts,Vttc,VTStore0,VTTContext0] : (((VTStore0=Vts) & ((VTTContext0=Vttc) & (((![VVtn10,VVt0,VVtsr0] : (Vts!=vbind(VVtn10,VVt0,VVtsr0))) | (![VVtn20,VVtt0,VVttcr0] : (Vttc!=vcbind(VVtn20,VVtt0,VVttcr0)))) & ((Vts!=vempty) | (Vttc!=vcempty))))) => (~vStoreContextConsistent(VTStore0,VTTContext0))))).
fof('StoreContext-Lookup-WT', axiom, (![VTS,Vtn,VTTC,Vtt,Vt] : ((vStoreContextConsistent(VTS,VTTC) & ((vlookup(Vtn,VTS)=vsome(Vt)) & (vclookup(Vtn,VTTC)=vsome(Vtt)))) => vwelltypedtable(Vtt,Vt)))).
fof('lookup-aux-cempty', conjecture, (![VTT,Vtn,VTS] : (((vclookup(Vtn,vcempty)=vsome(VTT)) & vStoreContextConsistent(VTS,vcempty)) => (?[Vt] : (vlookup(Vtn,VTS)=vsome(Vt)))))).