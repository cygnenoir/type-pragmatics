
fof('EQ-none', axiom, (((vnone=vnone) => $true) & ($true => (vnone=vnone)))).
fof('EQ-some', axiom, (![VA0,VA1] : (((vsome(VA0)=vsome(VA1)) => (VA0=VA1)) & ((VA0=VA1) => (vsome(VA0)=vsome(VA1)))))).
fof('DIFF-none-some', axiom, (![VA0] : (vnone!=vsome(VA0)))).
fof('isSome0', axiom, (![VOpt0] : ((VOpt0=vnone) => (~visSome(VOpt0))))).
fof('isSome1', axiom, (![Va,VOpt0] : ((VOpt0=vsome(Va)) => visSome(VOpt0)))).
fof('getSome0', axiom, (![VOpt0,RESULT,Va] : ((VOpt0=vsome(Va)) => ((RESULT=vgetSome(VOpt0)) => (RESULT=Va))))).
fof('isSome-INV-1', axiom, (![Vopt] : (visSome(Vopt) => (?[Va] : ((Vopt=vsome(Va)) & (vgetSome(Vopt)=Va)))))).
fof('isSome-INV-2', axiom, (![Vopt,Va,Vb] : (((Vopt=vsome(Va)) & (vgetSome(Vopt)=Vb)) => (Va=Vb)))).
fof('EQ-ctype', axiom, (![VAName0,VFType0,VAName1,VFType1] : (((vctype(VAName0,VFType0)=vctype(VAName1,VFType1)) => ((VAName0=VAName1) & (VFType0=VFType1))) & (((VAName0=VAName1) & (VFType0=VFType1)) => (vctype(VAName0,VFType0)=vctype(VAName1,VFType1)))))).
fof('EQ-aempty', axiom, (((vaempty=vaempty) => $true) & ($true => (vaempty=vaempty)))).
fof('EQ-acons', axiom, (![VAName0,VAList0,VAName1,VAList1] : (((vacons(VAName0,VAList0)=vacons(VAName1,VAList1)) => ((VAName0=VAName1) & (VAList0=VAList1))) & (((VAName0=VAName1) & (VAList0=VAList1)) => (vacons(VAName0,VAList0)=vacons(VAName1,VAList1)))))).
fof('EQ-ttempty', axiom, (((vttempty=vttempty) => $true) & ($true => (vttempty=vttempty)))).
fof('EQ-ttcons', axiom, (![VCType0,VTType0,VCType1,VTType1] : (((vttcons(VCType0,VTType0)=vttcons(VCType1,VTType1)) => ((VCType0=VCType1) & (VTType0=VTType1))) & (((VCType0=VCType1) & (VTType0=VTType1)) => (vttcons(VCType0,VTType0)=vttcons(VCType1,VTType1)))))).
fof('EQ-rtempty', axiom, (((vrtempty=vrtempty) => $true) & ($true => (vrtempty=vrtempty)))).
fof('EQ-rtcons', axiom, (![VFType0,VRawType0,VFType1,VRawType1] : (((vrtcons(VFType0,VRawType0)=vrtcons(VFType1,VRawType1)) => ((VFType0=VFType1) & (VRawType0=VRawType1))) & (((VFType0=VFType1) & (VRawType0=VRawType1)) => (vrtcons(VFType0,VRawType0)=vrtcons(VFType1,VRawType1)))))).
fof('DIFF-aempty-acons', axiom, (![VAName0,VAList0] : (vaempty!=vacons(VAName0,VAList0)))).
fof('DIFF-ttempty-ttcons', axiom, (![VCType0,VTType0] : (vttempty!=vttcons(VCType0,VTType0)))).
fof('DIFF-rtempty-rtcons', axiom, (![VFType0,VRawType0] : (vrtempty!=vrtcons(VFType0,VRawType0)))).
fof('EQ-rempty', axiom, (((vrempty=vrempty) => $true) & ($true => (vrempty=vrempty)))).
fof('EQ-rcons', axiom, (![VFVal0,VRow0,VFVal1,VRow1] : (((vrcons(VFVal0,VRow0)=vrcons(VFVal1,VRow1)) => ((VFVal0=VFVal1) & (VRow0=VRow1))) & (((VFVal0=VFVal1) & (VRow0=VRow1)) => (vrcons(VFVal0,VRow0)=vrcons(VFVal1,VRow1)))))).
fof('EQ-tempty', axiom, (((vtempty=vtempty) => $true) & ($true => (vtempty=vtempty)))).
fof('EQ-tcons', axiom, (![VRow0,VRawTable0,VRow1,VRawTable1] : (((vtcons(VRow0,VRawTable0)=vtcons(VRow1,VRawTable1)) => ((VRow0=VRow1) & (VRawTable0=VRawTable1))) & (((VRow0=VRow1) & (VRawTable0=VRawTable1)) => (vtcons(VRow0,VRawTable0)=vtcons(VRow1,VRawTable1)))))).
fof('EQ-table', axiom, (![VAList0,VRawTable0,VAList1,VRawTable1] : (((vtable(VAList0,VRawTable0)=vtable(VAList1,VRawTable1)) => ((VAList0=VAList1) & (VRawTable0=VRawTable1))) & (((VAList0=VAList1) & (VRawTable0=VRawTable1)) => (vtable(VAList0,VRawTable0)=vtable(VAList1,VRawTable1)))))).
fof('DIFF-rempty-rcons', axiom, (![VFVal0,VRow0] : (vrempty!=vrcons(VFVal0,VRow0)))).
fof('DIFF-tempty-tcons', axiom, (![VRow0,VRawTable0] : (vtempty!=vtcons(VRow0,VRawTable0)))).
fof('matchingAList0', axiom, (![VTType0,VAList0] : (((VTType0=vttempty) & (VAList0=vaempty)) => vmatchingAList(VTType0,VAList0)))).
fof('matchingAList1', axiom, (![Vf,VTType0,VAList0,Va1,Va2,Vtt,Val] : (((VTType0=vttcons(vctype(Va1,Vf),Vtt)) & (VAList0=vacons(Va2,Val))) => ((((Va1=Va2) & vmatchingAList(Vtt,Val)) => vmatchingAList(VTType0,VAList0)) & (vmatchingAList(VTType0,VAList0) => ((Va1=Va2) & vmatchingAList(Vtt,Val))))))).
fof('matchingAList2', axiom, (![Vtt,Val,VTType0,VAList0] : (((VTType0=Vtt) & ((VAList0=Val) & (((![VVa10,VVf0,VVtt0] : (Vtt!=vttcons(vctype(VVa10,VVf0),VVtt0))) | (![VVa20,VVal0] : (Val!=vacons(VVa20,VVal0)))) & ((Vtt!=vttempty) | (Val!=vaempty))))) => (~vmatchingAList(VTType0,VAList0))))).
fof('welltypedtable0', axiom, (![VTType0,VTable0,Val,Vtt,Vt] : (((VTType0=Vtt) & (VTable0=vtable(Val,Vt))) => (((vmatchingAList(Vtt,Val) & vwelltypedRawtable(vrawType(Vtt),Vt)) => vwelltypedtable(VTType0,VTable0)) & (vwelltypedtable(VTType0,VTable0) => (vmatchingAList(Vtt,Val) & vwelltypedRawtable(vrawType(Vtt),Vt))))))).
fof('rawType0', axiom, (![VTType0,RESULT] : ((VTType0=vttempty) => ((RESULT=vrawType(VTType0)) => (RESULT=vrtempty))))).
fof('rawType1', axiom, (![Va,VTType0,RESULT,Vft,Vtt] : ((VTType0=vttcons(vctype(Va,Vft),Vtt)) => ((RESULT=vrawType(VTType0)) => (RESULT=vrtcons(Vft,vrawType(Vtt))))))).
fof('rawType-INV', axiom, (![VTType0,RESULT] : ((rawType(VTType0)=RESULT) => (((VTType0=vttempty) & (RESULT=vrtempty)) | (?[Va,Vft,Vtt] : ((VTType0=vttcons(vctype(Va,Vft),Vtt)) & (RESULT=vrtcons(Vft,vrawType(Vtt))))))))).
fof('dropFirstColRaw0', axiom, (![VRawTable0,RESULT] : ((VRawTable0=vtempty) => ((RESULT=vdropFirstColRaw(VRawTable0)) => (RESULT=vtempty))))).
fof('dropFirstColRaw1', axiom, (![VRawTable0,RESULT,Vrt] : ((VRawTable0=vtcons(vrempty,Vrt)) => ((RESULT=vdropFirstColRaw(VRawTable0)) => (RESULT=vtcons(vrempty,vdropFirstColRaw(Vrt))))))).
fof('dropFirstColRaw2', axiom, (![Vf,VRawTable0,RESULT,Vr,Vrt] : ((VRawTable0=vtcons(vrcons(Vf,Vr),Vrt)) => ((RESULT=vdropFirstColRaw(VRawTable0)) => (RESULT=vtcons(Vr,vdropFirstColRaw(Vrt))))))).
fof('dropFirstColRaw-INV', axiom, (![VRawTable0,RESULT] : ((dropFirstColRaw(VRawTable0)=RESULT) => (((VRawTable0=vtempty) & (RESULT=vtempty)) | ((?[Vrt] : ((VRawTable0=vtcons(vrempty,Vrt)) & (RESULT=vtcons(vrempty,vdropFirstColRaw(Vrt))))) | (?[Vf,Vr,Vrt] : ((VRawTable0=vtcons(vrcons(Vf,Vr),Vrt)) & (RESULT=vtcons(Vr,vdropFirstColRaw(Vrt)))))))))).
fof('findCol0', axiom, (![Va,Vrt,VAName0,VTable0,RESULT] : (((VAName0=Va) & (VTable0=vtable(vaempty,Vrt))) => ((RESULT=vfindCol(VAName0,VTable0)) => (RESULT=vnone))))).
fof('findCol1', axiom, (![Val,Va,Va2,VAName0,VTable0,RESULT,Vrt] : (((VAName0=Va) & (VTable0=vtable(vacons(Va2,Val),Vrt))) => ((Va=Va2) => ((RESULT=vfindCol(VAName0,VTable0)) => (RESULT=vsome(vprojectFirstRaw(Vrt)))))))).
fof('findCol2', axiom, (![Va2,VAName0,VTable0,RESULT,Va,Val,Vrt] : (((VAName0=Va) & (VTable0=vtable(vacons(Va2,Val),Vrt))) => ((~(Va=Va2)) => ((RESULT=vfindCol(VAName0,VTable0)) => (RESULT=vfindCol(Va,vtable(Val,vdropFirstColRaw(Vrt))))))))).
fof('findCol-INV', axiom, (![VAName0,VTable0,RESULT] : ((findCol(VAName0,VTable0)=RESULT) => ((?[Va,Vrt] : ((VAName0=Va) & ((VTable0=vtable(vaempty,Vrt)) & (RESULT=vnone)))) | ((?[Val,Va,Va2,Vrt] : ((VAName0=Va) & ((VTable0=vtable(vacons(Va2,Val),Vrt)) & ((Va=Va2) & (RESULT=vsome(vprojectFirstRaw(Vrt))))))) | (?[Va2,Va,Val,Vrt] : ((VAName0=Va) & ((VTable0=vtable(vacons(Va2,Val),Vrt)) & ((~(Va=Va2)) & (RESULT=vfindCol(Va,vtable(Val,vdropFirstColRaw(Vrt))))))))))))).
fof('findCol-table-one-col-one-row', axiom, (![Va,Vf,Vrt1,Vt] : ((vfindCol(Va,Vt)=vsome(vtcons(vrcons(Vf,vrempty),Vrt1))) => (?[Va2,Val,Vr,Vtrest] : (Vt=vtable(vacons(Va2,Val),vtcons(Vr,Vtrest))))))).
fof('projectFirstRaw0', axiom, (![VRawTable0,RESULT] : ((VRawTable0=vtempty) => ((RESULT=vprojectFirstRaw(VRawTable0)) => (RESULT=vtempty))))).
fof('projectFirstRaw1', axiom, (![VRawTable0,RESULT,Vrt] : ((VRawTable0=vtcons(vrempty,Vrt)) => ((RESULT=vprojectFirstRaw(VRawTable0)) => (RESULT=vtcons(vrempty,vprojectFirstRaw(Vrt))))))).
fof('projectFirstRaw2', axiom, (![Vr,VRawTable0,RESULT,Vf,Vrt] : ((VRawTable0=vtcons(vrcons(Vf,Vr),Vrt)) => ((RESULT=vprojectFirstRaw(VRawTable0)) => (RESULT=vtcons(vrcons(Vf,vrempty),vprojectFirstRaw(Vrt))))))).
fof('projectFirstRaw-INV', axiom, (![VRawTable0,RESULT] : ((projectFirstRaw(VRawTable0)=RESULT) => (((VRawTable0=vtempty) & (RESULT=vtempty)) | ((?[Vrt] : ((VRawTable0=vtcons(vrempty,Vrt)) & (RESULT=vtcons(vrempty,vprojectFirstRaw(Vrt))))) | (?[Vr,Vf,Vrt] : ((VRawTable0=vtcons(vrcons(Vf,Vr),Vrt)) & (RESULT=vtcons(vrcons(Vf,vrempty),vprojectFirstRaw(Vrt)))))))))).
fof('one-col-table-minus-first-row-findCol-ind', axiom, (![Vr,Vf,Va,Va2,Val,Vtrest,Vrt1] : ((vfindCol(Va,vtable(vacons(Va2,Val),vtcons(Vr,Vtrest)))=vsome(vtcons(vrcons(Vf,vrempty),Vrt1))) => (vfindCol(Va,vtable(vacons(Va2,Val),Vtrest))=vsome(Vrt1))))).
fof('one-col-table-minus-first-row-findCol', conjecture, (![Vr,Vf,Va,Va2,Val,Vtrest,Vrt1] : ((vfindCol(Va,vtable(vacons(Va2,Val),vtcons(Vr,Vtrest)))=vsome(vtcons(vrcons(Vf,vrempty),Vrt1))) => (vfindCol(Va,vtable(vacons(Va2,Val),Vtrest))=vsome(Vrt1))))).