tff('AList_type', type, vAList: $tType).
tff('Row_type', type, vRow: $tType).
tff('Pred_type', type, vPred: $tType).
tff('CType_type', type, vCType: $tType).
tff('RawType_type', type, vRawType: $tType).
tff('RawTable_type', type, vRawTable: $tType).
tff('OptRawTable_type', type, vOptRawTable: $tType).
tff('FType_type', type, vFType: $tType).
tff('Opt3_type', type, vOpt3: $tType).
tff('FVal_type', type, vFVal: $tType).
tff('TName_type', type, vTName: $tType).
tff('Query_type', type, vQuery: $tType).
tff('TRef_type', type, vTRef: $tType).
tff('OptTable_type', type, vOptTable: $tType).
tff('TStore_type', type, vTStore: $tType).
tff('AName_type', type, vAName: $tType).
tff('Table_type', type, vTable: $tType).
tff('TType_type', type, vTType: $tType).
tff('Conf_type', type, vConf: $tType).
tff('OptConf_type', type, vOptConf: $tType).
tff('rempty_type', type, vrempty: vRow).
tff('acons_type', type, vacons: (vAName * vAList) > vAList).
tff('VGreater_type', type, vVGreater: (vAName * vFVal) > vPred).
tff('TN_type', type, vTN: vTName).
tff('VEquals_type', type, vVEquals: (vAName * vFVal) > vPred).
tff('noConf_type', type, vnoConf: vOptConf).
tff('someConf_type', type, vsomeConf: vConf > vOptConf).
tff('ctype_type', type, vctype: (vAName * vFType) > vCType).
tff('rcons_type', type, vrcons: (vFVal * vRow) > vRow).
tff('ttcons_type', type, vttcons: (vCType * vTType) > vTType).
tff('tempty_type', type, vtempty: vRawTable).
tff('z1_type', type, vz1: vFVal).
tff('rtcons_type', type, vrtcons: (vFType * vRawType) > vRawType).
tff('VSmaller_type', type, vVSmaller: (vAName * vFVal) > vPred).
tff('aempty_type', type, vaempty: vAList).
tff('noRawTable_type', type, vnoRawTable: vOptRawTable).
tff('tcons_type', type, vtcons: (vRow * vRawTable) > vRawTable).
tff('x2_type', type, vx2: vFVal).
tff('SelectAllFrom_type', type, vSelectAllFrom: vTRef > vQuery).
tff('conf_type', type, vconf: (vQuery * vTStore) > vConf).
tff('Intersection_type', type, vIntersection: (vQuery * vQuery) > vQuery).
tff('rtempty_type', type, vrtempty: vRawType).
tff('z2_type', type, vz2: vFVal).
tff('error_type', type, verror: vOpt3).
tff('A2_type', type, vA2: vAName).
tff('y1_type', type, vy1: vFVal).
tff('someRawTable_type', type, vsomeRawTable: vRawTable > vOptRawTable).
tff('A1_type', type, vA1: vAName).
tff('bindStore_type', type, vbindStore: (vTName * vTable * vTStore) > vTStore).
tff('SelectSomeFromWhere_type', type, vSelectSomeFromWhere: (vAList * vTRef * vPred) > vQuery).
tff('ttempty_type', type, vttempty: vTType).
tff('y2_type', type, vy2: vFVal).
tff('Tvalue_type', type, vTvalue: vTable > vQuery).
tff('SelectAllFromWhere_type', type, vSelectAllFromWhere: (vTRef * vPred) > vQuery).
tff('x1_type', type, vx1: vFVal).
tff('isTrue_type', type, visTrue: vOpt3).
tff('noTable_type', type, vnoTable: vOptTable).
tff('Difference_type', type, vDifference: (vQuery * vQuery) > vQuery).
tff('Union_type', type, vUnion: (vQuery * vQuery) > vQuery).
tff('A3_type', type, vA3: vAName).
tff('SelectSomeFrom_type', type, vSelectSomeFrom: (vAList * vTRef) > vQuery).
tff('someTable_type', type, vsomeTable: vTable > vOptTable).
tff('emptyStore_type', type, vemptyStore: vTStore).
tff('isFalse_type', type, visFalse: vOpt3).
tff('Ref_type', type, vRef: vTName > vTRef).
tff('table_type', type, vtable: (vAList * vRawTable) > vTable).
tff('matchingAList_type', type, vmatchingAList: (vTType * vAList) > $o).
tff('le_type', type, vle: (vFVal * vFVal) > $o).
tff('getSomeConf_type', type, vgetSomeConf: vOptConf > vConf).
tff('isSomeRawTable_type', type, visSomeRawTable: vOptRawTable > $o).
tff('union_type', type, vunion: (vTable * vTable) > vOptTable).
tff('intersect_type', type, vintersect: (vTable * vTable) > vOptTable).
tff('getRaw_type', type, vgetRaw: vTable > vRawTable).
tff('project_type', type, vproject: (vAList * vTable) > vOptRawTable).
tff('projectFirstRaw_type', type, vprojectFirstRaw: vRawTable > vRawTable).
tff('rawType_type', type, vrawType: vTType > vRawType).
tff('lookupStore_type', type, vlookupStore: (vTName * vTStore) > vOptTable).
tff('welltypedRawtable_type', type, vwelltypedRawtable: (vRawType * vRawTable) > $o).
tff('rawUnion_type', type, vrawUnion: (vRawTable * vRawTable) > vRawTable).
tff('getQuery_type', type, vgetQuery: vConf > vQuery).
tff('isValue_type', type, visValue: vQuery > $o).
tff('welltypedtable_type', type, vwelltypedtable: (vTType * vTable) > $o).
tff('attachColToFrontRaw_type', type, vattachColToFrontRaw: (vRawTable * vRawTable) > vOptRawTable).
tff('projectEmptyCol_type', type, vprojectEmptyCol: vRawTable > vRawTable).
tff('ge_type', type, vge: (vFVal * vFVal) > $o).
tff('select_type', type, vselect: (vTable * vPred) > vOptTable).
tff('getSomeRawTable_type', type, vgetSomeRawTable: vOptRawTable > vRawTable).
tff('rowIn_type', type, vrowIn: (vRow * vRawTable) > $o).
tff('findCol_type', type, vfindCol: (vAName * vTable) > vOptRawTable).
tff('reduce_type', type, vreduce: vConf > vOptConf).
tff('getSomeTable_type', type, vgetSomeTable: vOptTable > vTable).
tff('singleRowSelect_type', type, vsingleRowSelect: (vAList * vPred * vRow) > vOpt3).
tff('getAL_type', type, vgetAL: vTable > vAList).
tff('isSomeConf_type', type, visSomeConf: vOptConf > $o).
tff('fieldType_type', type, vfieldType: vFVal > vFType).
tff('rawIntersection_type', type, vrawIntersection: (vRawTable * vRawTable) > vRawTable).
tff('dropFirstColRaw_type', type, vdropFirstColRaw: vRawTable > vRawTable).
tff('difference_type', type, vdifference: (vTable * vTable) > vOptTable).
tff('isSomeTable_type', type, visSomeTable: vOptTable > $o).
tff('welltypedRow_type', type, vwelltypedRow: (vRawType * vRow) > $o).
tff('rawDifference_type', type, vrawDifference: (vRawTable * vRawTable) > vRawTable).
tff('getRaw0', axiom, ![Val: vAList, Vrt: vRawTable] : vgetRaw(vtable(Val, Vrt)) = Vrt).
tff('getAL0', axiom, ![Val: vAList, Vrt: vRawTable] : vgetAL(vtable(Val, Vrt)) = Val).
tff('matchingAList0', axiom, vmatchingAList(vttempty, vaempty)).
tff('matchingAList1', axiom, ![Va1: vAName, Va2: vAName, Val: vAList, Vf: vFType, Vtt: vTType] : (vmatchingAList(vttcons(vctype(Va1, Vf), Vtt), vacons(Va2, Val)) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val)))).
tff('matchingAList2', axiom, ![Vtt: vTType, Val: vAList] : (((Vtt != vttempty | Val != vaempty) & (![Va10: vAName, Vf0: vFType, Vtt0: vTType] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20: vAName, Val0: vAList] : Val != vacons(Va20, Val0))) => (~vmatchingAList(Vtt, Val)))).
tff('matchingAList-true-INV', axiom, ![VTType0: vTType, VAList0: vAList] : (vmatchingAList(VTType0, VAList0) => ((VTType0 = vttempty & VAList0 = vaempty & $true) | ?[Va1: vAName, Va2: vAName, Val: vAList, Vf: vFType, Vtt: vTType] : (VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val) & (Va1 = Va2 & vmatchingAList(Vtt, Val))) | ?[Vtt: vTType, Val: vAList] : ((Vtt != vttempty | Val != vaempty) & (![Va10: vAName, Vf0: vFType, Vtt0: vTType] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20: vAName, Val0: vAList] : Val != vacons(Va20, Val0)) & VTType0 = Vtt & VAList0 = Val & $false)))).
tff('matchingAList-false-INV', axiom, ![VTType0: vTType, VAList0: vAList] : ((~vmatchingAList(VTType0, VAList0)) => ((VTType0 = vttempty & VAList0 = vaempty & $false) | ?[Va1: vAName, Va2: vAName, Val: vAList, Vf: vFType, Vtt: vTType] : (VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val) & (~(Va1 = Va2 & vmatchingAList(Vtt, Val)))) | ?[Vtt: vTType, Val: vAList] : ((Vtt != vttempty | Val != vaempty) & (![Va10: vAName, Vf0: vFType, Vtt0: vTType] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20: vAName, Val0: vAList] : Val != vacons(Va20, Val0)) & VTType0 = Vtt & VAList0 = Val & $true)))).
tff('welltypedtable0', axiom, ![Vtt: vTType, Val: vAList, Vt: vRawTable] : (vwelltypedtable(Vtt, vtable(Val, Vt)) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))).
tff('welltypedtable-true-INV', axiom, ![VTType0: vTType, VTable0: vTable] : (vwelltypedtable(VTType0, VTable0) => ?[Vtt: vTType, Val: vAList, Vt: vRawTable] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt))))).
tff('welltypedtable-false-INV', axiom, ![VTType0: vTType, VTable0: vTable] : ((~vwelltypedtable(VTType0, VTable0)) => ?[Vtt: vTType, Val: vAList, Vt: vRawTable] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (~(vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))))).
tff('rawType0', axiom, vrawType(vttempty) = vrtempty).
tff('rawType1', axiom, ![Va: vAName, Vft: vFType, Vtt: vTType] : vrawType(vttcons(vctype(Va, Vft), Vtt)) = vrtcons(Vft, vrawType(Vtt))).
tff('rawType-INV', axiom, ![VTType0: vTType, VRESULT: vRawType] : (vrawType(VTType0) = VRESULT => ((VTType0 = vttempty & VRESULT = vrtempty) | ?[Va: vAName, Vft: vFType, Vtt: vTType] : (VTType0 = vttcons(vctype(Va, Vft), Vtt) & VRESULT = vrtcons(Vft, vrawType(Vtt)))))).
tff('welltypedRawtable0', axiom, ![Vrt: vRawType] : vwelltypedRawtable(Vrt, vtempty)).
tff('welltypedRawtable1', axiom, ![Vrt: vRawType, Vr: vRow, Vt: vRawTable] : (vwelltypedRawtable(Vrt, vtcons(Vr, Vt)) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))).
tff('welltypedRawtable-true-INV', axiom, ![VRawType0: vRawType, VRawTable0: vRawTable] : (vwelltypedRawtable(VRawType0, VRawTable0) => (?[Vrt: vRawType] : (VRawType0 = Vrt & VRawTable0 = vtempty & $true) | ?[Vrt: vRawType, Vr: vRow, Vt: vRawTable] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))))).
tff('welltypedRawtable-false-INV', axiom, ![VRawType0: vRawType, VRawTable0: vRawTable] : ((~vwelltypedRawtable(VRawType0, VRawTable0)) => (?[Vrt: vRawType] : (VRawType0 = Vrt & VRawTable0 = vtempty & $false) | ?[Vrt: vRawType, Vr: vRow, Vt: vRawTable] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (~(vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt))))))).
tff('welltypedRow0', axiom, vwelltypedRow(vrtempty, vrempty)).
tff('welltypedRow1', axiom, ![Vft: vFType, Vrt: vRawType, Vv: vFVal, Vr: vRow] : (vwelltypedRow(vrtcons(Vft, Vrt), vrcons(Vv, Vr)) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))).
tff('welltypedRow2', axiom, ![Vrt: vRawType, Vr: vRow] : (((Vrt != vrtempty | Vr != vrempty) & (![Vft0: vFType, Vrt0: vRawType] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0: vFVal, Vr0: vRow] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(Vrt, Vr)))).
tff('welltypedRow-true-INV', axiom, ![VRawType0: vRawType, VRow0: vRow] : (vwelltypedRow(VRawType0, VRow0) => ((VRawType0 = vrtempty & VRow0 = vrempty & $true) | ?[Vft: vFType, Vrt: vRawType, Vv: vFVal, Vr: vRow] : (VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr) & (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr))) | ?[Vrt: vRawType, Vr: vRow] : ((Vrt != vrtempty | Vr != vrempty) & (![Vft0: vFType, Vrt0: vRawType] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0: vFVal, Vr0: vRow] : Vr != vrcons(Vv0, Vr0)) & VRawType0 = Vrt & VRow0 = Vr & $false)))).
tff('welltypedRow-false-INV', axiom, ![VRawType0: vRawType, VRow0: vRow] : ((~vwelltypedRow(VRawType0, VRow0)) => ((VRawType0 = vrtempty & VRow0 = vrempty & $false) | ?[Vft: vFType, Vrt: vRawType, Vv: vFVal, Vr: vRow] : (VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr) & (~(vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))) | ?[Vrt: vRawType, Vr: vRow] : ((Vrt != vrtempty | Vr != vrempty) & (![Vft0: vFType, Vrt0: vRawType] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0: vFVal, Vr0: vRow] : Vr != vrcons(Vv0, Vr0)) & VRawType0 = Vrt & VRow0 = Vr & $true)))).
tff('isSomeTable0', axiom, (~visSomeTable(vnoTable))).
tff('isSomeTable1', axiom, ![Vt: vTable] : visSomeTable(vsomeTable(Vt))).
tff('isSomeTable-true-INV', axiom, ![VOptTable0: vOptTable] : (visSomeTable(VOptTable0) => ((VOptTable0 = vnoTable & $false) | ?[Vt: vTable] : (VOptTable0 = vsomeTable(Vt) & $true)))).
tff('isSomeTable-false-INV', axiom, ![VOptTable0: vOptTable] : ((~visSomeTable(VOptTable0)) => ((VOptTable0 = vnoTable & $true) | ?[Vt: vTable] : (VOptTable0 = vsomeTable(Vt) & $false)))).
tff('getSomeTable0', axiom, ![Vt: vTable] : vgetSomeTable(vsomeTable(Vt)) = Vt).
tff('lookupStore0', axiom, ![Vn: vTName] : vlookupStore(Vn, vemptyStore) = vnoTable).
tff('lookupStore1', axiom, ![Vm: vTName, Vt: vTable, VTS: vTStore] : vlookupStore(Vm, vbindStore(Vm, Vt, VTS)) = vsomeTable(Vt)).
tff('lookupStore2', axiom, ![Vn: vTName, Vm: vTName, Vt: vTable, VTS: vTStore] : (Vn != Vm => vlookupStore(Vn, vbindStore(Vm, Vt, VTS)) = vlookupStore(Vn, VTS))).
tff('lookupStore-INV', axiom, ![VTName0: vTName, VTStore0: vTStore, VRESULT: vOptTable] : (vlookupStore(VTName0, VTStore0) = VRESULT => (?[Vn: vTName] : (VTName0 = Vn & VTStore0 = vemptyStore & VRESULT = vnoTable) | ?[Vn: vTName, Vm: vTName, Vt: vTable, VTS: vTStore] : (Vn = Vm & VTName0 = Vn & VTStore0 = vbindStore(Vm, Vt, VTS) & VRESULT = vsomeTable(Vt)) | ?[Vn: vTName, Vm: vTName, Vt: vTable, VTS: vTStore] : (Vn != Vm & VTName0 = Vn & VTStore0 = vbindStore(Vm, Vt, VTS) & VRESULT = vlookupStore(Vn, VTS))))).
tff('isValue0', axiom, ![Vt: vTable] : visValue(vTvalue(Vt))).
tff('isValue1', axiom, ![Vn: vTRef] : (~visValue(vSelectAllFrom(Vn)))).
tff('isValue2', axiom, ![Val: vAList, Vtr: vTRef] : (~visValue(vSelectSomeFrom(Val, Vtr)))).
tff('isValue3', axiom, ![Vtr: vTRef, Vp: vPred] : (~visValue(vSelectAllFromWhere(Vtr, Vp)))).
tff('isValue4', axiom, ![Val: vAList, Vtr: vTRef, Vp: vPred] : (~visValue(vSelectSomeFromWhere(Val, Vtr, Vp)))).
tff('isValue5', axiom, ![Vq1: vQuery, Vq2: vQuery] : (~visValue(vUnion(Vq1, Vq2)))).
tff('isValue6', axiom, ![Vsql1: vQuery, Vsql2: vQuery] : (~visValue(vIntersection(Vsql1, Vsql2)))).
tff('isValue7', axiom, ![Vsql1: vQuery, Vsql2: vQuery] : (~visValue(vDifference(Vsql1, Vsql2)))).
tff('isValue-true-INV', axiom, ![VQuery0: vQuery] : (visValue(VQuery0) => (?[Vt: vTable] : (VQuery0 = vTvalue(Vt) & $true) | ?[Vn: vTRef] : (VQuery0 = vSelectAllFrom(Vn) & $false) | ?[Val: vAList, Vtr: vTRef] : (VQuery0 = vSelectSomeFrom(Val, Vtr) & $false) | ?[Vtr: vTRef, Vp: vPred] : (VQuery0 = vSelectAllFromWhere(Vtr, Vp) & $false) | ?[Val: vAList, Vtr: vTRef, Vp: vPred] : (VQuery0 = vSelectSomeFromWhere(Val, Vtr, Vp) & $false) | ?[Vq1: vQuery, Vq2: vQuery] : (VQuery0 = vUnion(Vq1, Vq2) & $false) | ?[Vsql1: vQuery, Vsql2: vQuery] : (VQuery0 = vIntersection(Vsql1, Vsql2) & $false) | ?[Vsql1: vQuery, Vsql2: vQuery] : (VQuery0 = vDifference(Vsql1, Vsql2) & $false)))).
tff('isValue-false-INV', axiom, ![VQuery0: vQuery] : ((~visValue(VQuery0)) => (?[Vt: vTable] : (VQuery0 = vTvalue(Vt) & $false) | ?[Vn: vTRef] : (VQuery0 = vSelectAllFrom(Vn) & $true) | ?[Val: vAList, Vtr: vTRef] : (VQuery0 = vSelectSomeFrom(Val, Vtr) & $true) | ?[Vtr: vTRef, Vp: vPred] : (VQuery0 = vSelectAllFromWhere(Vtr, Vp) & $true) | ?[Val: vAList, Vtr: vTRef, Vp: vPred] : (VQuery0 = vSelectSomeFromWhere(Val, Vtr, Vp) & $true) | ?[Vq1: vQuery, Vq2: vQuery] : (VQuery0 = vUnion(Vq1, Vq2) & $true) | ?[Vsql1: vQuery, Vsql2: vQuery] : (VQuery0 = vIntersection(Vsql1, Vsql2) & $true) | ?[Vsql1: vQuery, Vsql2: vQuery] : (VQuery0 = vDifference(Vsql1, Vsql2) & $true)))).
tff('rowIn0', axiom, ![Vr1: vRow] : (~vrowIn(Vr1, vtempty))).
tff('rowIn1', axiom, ![Vr1: vRow, Vr2: vRow, Vrt: vRawTable] : (vrowIn(Vr1, vtcons(Vr2, Vrt)) <=> (Vr1 = Vr2 | vrowIn(Vr1, Vrt)))).
tff('rowIn-true-INV', axiom, ![VRow0: vRow, VRawTable0: vRawTable] : (vrowIn(VRow0, VRawTable0) => (?[Vr1: vRow] : (VRow0 = Vr1 & VRawTable0 = vtempty & $false) | ?[Vr1: vRow, Vr2: vRow, Vrt: vRawTable] : (VRow0 = Vr1 & VRawTable0 = vtcons(Vr2, Vrt) & (Vr1 = Vr2 | vrowIn(Vr1, Vrt)))))).
tff('rowIn-false-INV', axiom, ![VRow0: vRow, VRawTable0: vRawTable] : ((~vrowIn(VRow0, VRawTable0)) => (?[Vr1: vRow] : (VRow0 = Vr1 & VRawTable0 = vtempty & $true) | ?[Vr1: vRow, Vr2: vRow, Vrt: vRawTable] : (VRow0 = Vr1 & VRawTable0 = vtcons(Vr2, Vrt) & (~(Vr1 = Vr2 | vrowIn(Vr1, Vrt))))))).
tff('projectFirstRaw0', axiom, vprojectFirstRaw(vtempty) = vtempty).
tff('projectFirstRaw1', axiom, ![Vrt: vRawTable] : vprojectFirstRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vprojectFirstRaw(Vrt))).
tff('projectFirstRaw2', axiom, ![Vf: vFVal, Vr: vRow, Vrt: vRawTable] : vprojectFirstRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(vrcons(Vf, vrempty), vprojectFirstRaw(Vrt))).
tff('dropFirstColRaw0', axiom, vdropFirstColRaw(vtempty) = vtempty).
tff('dropFirstColRaw1', axiom, ![Vrt: vRawTable] : vdropFirstColRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vdropFirstColRaw(Vrt))).
tff('dropFirstColRaw2', axiom, ![Vf: vFVal, Vr: vRow, Vrt: vRawTable] : vdropFirstColRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(Vr, vdropFirstColRaw(Vrt))).
tff('dropFirstColRaw-INV', axiom, ![VRawTable0: vRawTable, VRESULT: vRawTable] : (vdropFirstColRaw(VRawTable0) = VRESULT => ((VRawTable0 = vtempty & VRESULT = vtempty) | ?[Vrt: vRawTable] : (VRawTable0 = vtcons(vrempty, Vrt) & VRESULT = vtcons(vrempty, vdropFirstColRaw(Vrt))) | ?[Vf: vFVal, Vr: vRow, Vrt: vRawTable] : (VRawTable0 = vtcons(vrcons(Vf, Vr), Vrt) & VRESULT = vtcons(Vr, vdropFirstColRaw(Vrt)))))).
tff('isSomeRawTable0', axiom, (~visSomeRawTable(vnoRawTable))).
tff('isSomeRawTable1', axiom, ![Vt: vRawTable] : visSomeRawTable(vsomeRawTable(Vt))).
tff('isSomeRawTable-true-INV', axiom, ![VOptRawTable0: vOptRawTable] : (visSomeRawTable(VOptRawTable0) => ((VOptRawTable0 = vnoRawTable & $false) | ?[Vt: vRawTable] : (VOptRawTable0 = vsomeRawTable(Vt) & $true)))).
tff('isSomeRawTable-false-INV', axiom, ![VOptRawTable0: vOptRawTable] : ((~visSomeRawTable(VOptRawTable0)) => ((VOptRawTable0 = vnoRawTable & $true) | ?[Vt: vRawTable] : (VOptRawTable0 = vsomeRawTable(Vt) & $false)))).
tff('getSomeRawTable0', axiom, ![Vt: vRawTable] : vgetSomeRawTable(vsomeRawTable(Vt)) = Vt).
tff('attachColToFrontRaw0', axiom, vattachColToFrontRaw(vtempty, vtempty) = vsomeRawTable(vtempty)).
tff('attachColToFrontRaw1', axiom, ![Vrt1: vRawTable, Vrt2: vRawTable, Vf: vFVal, Vr: vRow] : (visSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2)) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2)))))).
tff('attachColToFrontRaw2', axiom, ![Vrt1: vRawTable, Vrt2: vRawTable, Vf: vFVal, Vr: vRow] : ((~visSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2))) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vnoRawTable)).
tff('attachColToFrontRaw3', axiom, ![Vrt1: vRawTable, Vrt2: vRawTable] : (((Vrt1 != vtempty | Vrt2 != vtempty) & (![Vf0: vFVal, Vrt10: vRawTable] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vr0: vRow, Vrt20: vRawTable] : Vrt2 != vtcons(Vr0, Vrt20))) => vattachColToFrontRaw(Vrt1, Vrt2) = vnoRawTable)).
tff('attachColToFrontRaw-INV', axiom, ![VRawTable0: vRawTable, VRawTable1: vRawTable, VRESULT: vOptRawTable] : (vattachColToFrontRaw(VRawTable0, VRawTable1) = VRESULT => ((VRawTable0 = vtempty & VRawTable1 = vtempty & VRESULT = vsomeRawTable(vtempty)) | ?[Vrt1: vRawTable, Vr: vRow, Vf: vFVal, Vrt2: vRawTable] : (visSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2)) & VRawTable0 = vtcons(vrcons(Vf, vrempty), Vrt1) & VRawTable1 = vtcons(Vr, Vrt2) & VRESULT = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2))))) | ?[Vrt1: vRawTable, Vr: vRow, Vf: vFVal, Vrt2: vRawTable] : ((~visSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2))) & VRawTable0 = vtcons(vrcons(Vf, vrempty), Vrt1) & VRawTable1 = vtcons(Vr, Vrt2) & VRESULT = vnoRawTable) | ?[Vrt1: vRawTable, Vrt2: vRawTable] : ((Vrt1 != vtempty | Vrt2 != vtempty) & (![Vf0: vFVal, Vrt10: vRawTable] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vr0: vRow, Vrt20: vRawTable] : Vrt2 != vtcons(Vr0, Vrt20)) & VRawTable0 = Vrt1 & VRawTable1 = Vrt2 & VRESULT = vnoRawTable)))).
tff('rawUnion0', axiom, ![Vrt2: vRawTable] : vrawUnion(vtempty, Vrt2) = Vrt2).
tff('rawUnion1', axiom, ![Vrt1: vRawTable] : (Vrt1 != vtempty => vrawUnion(Vrt1, vtempty) = Vrt1)).
tff('rawUnion2', axiom, ![Vr1: vRow, Vrt2: vRawTable, Vrt1: vRawTable] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, vrawUnion(Vrt1, Vrt2)))).
tff('rawUnion3', axiom, ![Vr1: vRow, Vrt2: vRawTable, Vrt1: vRawTable] : ((vrowIn(Vr1, Vrt2) & Vrt2 != vtempty) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = vrawUnion(Vrt1, Vrt2))).
tff('rawUnion-INV', axiom, ![VRawTable0: vRawTable, VRawTable1: vRawTable, VRESULT: vRawTable] : (vrawUnion(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2: vRawTable] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = Vrt2) | ?[Vrt1: vRawTable] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = Vrt1) | ?[Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vrawUnion(Vrt1, Vrt2))) | ?[Vurt1rt2: vRawTable, Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : (vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2)))).
tff('rawIntersection0', axiom, ![Vrt2: vRawTable] : vrawIntersection(vtempty, Vrt2) = vtempty).
tff('rawIntersection1', axiom, ![Vrt1: vRawTable] : (Vrt1 != vtempty => vrawIntersection(Vrt1, vtempty) = vtempty)).
tff('rawIntersection2', axiom, ![Vr1: vRow, Vrt2: vRawTable] : ((vrowIn(Vr1, Vrt2) & Vrt2 != vtempty) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
tff('rawIntersection3', axiom, ![Vr1: vRow, Vrt2: vRawTable] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
tff('rawIntersection4', axiom, ![Vr1: vRow, Vrt2: vRawTable, Vrt1: vRawTable] : ((vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, vrawIntersection(Vrt1, Vrt2)))).
tff('rawIntersection5', axiom, ![Vr1: vRow, Vrt2: vRawTable, Vrt1: vRawTable] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = vrawIntersection(Vrt1, Vrt2))).
tff('rawIntersection-INV', axiom, ![VRawTable0: vRawTable, VRawTable1: vRawTable, VRESULT: vRawTable] : (vrawIntersection(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2: vRawTable] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1: vRawTable] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = vtempty) | ?[Vr1: vRow, Vrt2: vRawTable] : (vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty)) | ?[Vr1: vRow, Vrt2: vRawTable] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : (vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vrawIntersection(Vrt1, Vrt2))) | ?[Vurt1rt2: vRawTable, Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2)))).
tff('rawDifference0', axiom, ![Vrt2: vRawTable] : vrawDifference(vtempty, Vrt2) = vtempty).
tff('rawDifference1', axiom, ![Vrt1: vRawTable] : (Vrt1 != vtempty => vrawDifference(Vrt1, vtempty) = Vrt1)).
tff('rawDifference2', axiom, ![Vr1: vRow, Vrt2: vRawTable] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
tff('rawDifference3', axiom, ![Vr1: vRow, Vrt2: vRawTable] : ((vrowIn(Vr1, Vrt2) & Vrt2 != vtempty) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
tff('rawDifference4', axiom, ![Vr1: vRow, Vrt2: vRawTable, Vrt1: vRawTable] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, vrawDifference(Vrt1, Vrt2)))).
tff('rawDifference5', axiom, ![Vr1: vRow, Vrt2: vRawTable, Vrt1: vRawTable] : ((vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = vrawDifference(Vrt1, Vrt2))).
tff('rawDifference-INV', axiom, ![VRawTable0: vRawTable, VRawTable1: vRawTable, VRESULT: vRawTable] : (vrawDifference(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2: vRawTable] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1: vRawTable] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = Vrt1) | ?[Vr1: vRow, Vrt2: vRawTable] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty)) | ?[Vr1: vRow, Vrt2: vRawTable] : (vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vrawDifference(Vrt1, Vrt2))) | ?[Vdrt1rt2: vRawTable, Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : (vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vdrt1rt2)))).
tff('getQuery0', axiom, ![Vq: vQuery, Vts: vTStore] : vgetQuery(vconf(Vq, Vts)) = Vq).
tff('isSomeConf0', axiom, (~visSomeConf(vnoConf))).
tff('isSomeConf1', axiom, ![Vt: vConf] : visSomeConf(vsomeConf(Vt))).
tff('isSomeConf-true-INV', axiom, ![VOptConf0: vOptConf] : (visSomeConf(VOptConf0) => ((VOptConf0 = vnoConf & $false) | ?[Vt: vConf] : (VOptConf0 = vsomeConf(Vt) & $true)))).
tff('isSomeConf-false-INV', axiom, ![VOptConf0: vOptConf] : ((~visSomeConf(VOptConf0)) => ((VOptConf0 = vnoConf & $true) | ?[Vt: vConf] : (VOptConf0 = vsomeConf(Vt) & $false)))).
tff('getSomeConf0', axiom, ![Vc: vConf] : vgetSomeConf(vsomeConf(Vc)) = Vc).
tff('findCol0', axiom, ![Va: vAName, Vrt: vRawTable] : vfindCol(Va, vtable(vaempty, Vrt)) = vnoRawTable).
tff('findCol1', axiom, ![Va2: vAName, Val: vAList, Vrt: vRawTable] : vfindCol(Va2, vtable(vacons(Va2, Val), Vrt)) = vsomeRawTable(vprojectFirstRaw(Vrt))).
tff('findCol2', axiom, ![Va: vAName, Va2: vAName, Val: vAList, Vrt: vRawTable] : (Va != Va2 => vfindCol(Va, vtable(vacons(Va2, Val), Vrt)) = vfindCol(Va, vtable(Val, vdropFirstColRaw(Vrt))))).
tff('findCol-INV', axiom, ![VAName0: vAName, VTable0: vTable, VRESULT: vOptRawTable] : (vfindCol(VAName0, VTable0) = VRESULT => (?[Va: vAName, Vrt: vRawTable] : (VAName0 = Va & VTable0 = vtable(vaempty, Vrt) & VRESULT = vnoRawTable) | ?[Va: vAName, Va2: vAName, Val: vAList, Vrt: vRawTable] : (Va = Va2 & VAName0 = Va & VTable0 = vtable(vacons(Va2, Val), Vrt) & VRESULT = vsomeRawTable(vprojectFirstRaw(Vrt))) | ?[Va: vAName, Va2: vAName, Val: vAList, Vrt: vRawTable] : (Va != Va2 & VAName0 = Va & VTable0 = vtable(vacons(Va2, Val), Vrt) & VRESULT = vfindCol(Va, vtable(Val, vdropFirstColRaw(Vrt))))))).
tff('projectEmptyCol0', axiom, vprojectEmptyCol(vtempty) = vtempty).
tff('projectEmptyCol1', axiom, ![Vr: vRow, Vt: vRawTable] : vprojectEmptyCol(vtcons(Vr, Vt)) = vtcons(vrempty, vprojectEmptyCol(Vt))).
tff('project0', axiom, ![Val: vAList, Vrt: vRawTable] : vproject(vaempty, vtable(Val, Vrt)) = vsomeRawTable(vprojectEmptyCol(Vrt))).
tff('project1', axiom, ![Va: vAName, Vt: vTable, Valr: vAList] : (((visSomeRawTable(vfindCol(Va, Vt)) & visSomeRawTable(vproject(Valr, Vt))) & ![Val0: vAList, Vrt0: vRawTable] : Vt != vtable(Val0, Vrt0)) => vproject(vacons(Va, Valr), Vt) = vattachColToFrontRaw(vgetSomeRawTable(vfindCol(Va, Vt)), vgetSomeRawTable(vproject(Valr, Vt))))).
tff('project2', axiom, ![Va: vAName, Vt: vTable, Valr: vAList] : (((~(visSomeRawTable(vfindCol(Va, Vt)) & visSomeRawTable(vproject(Valr, Vt)))) & ![Val0: vAList, Vrt0: vRawTable] : Vt != vtable(Val0, Vrt0)) => vproject(vacons(Va, Valr), Vt) = vnoRawTable)).
tff('project-INV', axiom, ![VAList0: vAList, VTable0: vTable, VRESULT: vOptRawTable] : (vproject(VAList0, VTable0) = VRESULT => (?[Val: vAList, Vrt: vRawTable] : (VAList0 = vaempty & VTable0 = vtable(Val, Vrt) & VRESULT = vsomeRawTable(vprojectEmptyCol(Vrt))) | ?[Vt: vTable, Va: vAName, Valr: vAList] : ((visSomeRawTable(vfindCol(Va, Vt)) & visSomeRawTable(vproject(Valr, Vt))) & ![Val0: vAList, Vrt0: vRawTable] : Vt != vtable(Val0, Vrt0) & VAList0 = vacons(Va, Valr) & VTable0 = Vt & VRESULT = vattachColToFrontRaw(vgetSomeRawTable(vfindCol(Va, Vt)), vgetSomeRawTable(vproject(Valr, Vt)))) | ?[Vt: vTable, Va: vAName, Valr: vAList] : ((~(visSomeRawTable(vfindCol(Va, Vt)) & visSomeRawTable(vproject(Valr, Vt)))) & ![Val0: vAList, Vrt0: vRawTable] : Vt != vtable(Val0, Vrt0) & VAList0 = vacons(Va, Valr) & VTable0 = Vt & VRESULT = vnoRawTable)))).
tff('singleRowSelect0', axiom, ![Va2: vAName, Vfv: vFVal] : vsingleRowSelect(vacons(Va2, vaempty), vVEquals(Va2, Vfv), vrcons(Vfv, vrempty)) = visTrue).
tff('singleRowSelect1', axiom, ![Vf: vFVal, Vfv: vFVal, Va2: vAName] : (Vf != Vfv => vsingleRowSelect(vacons(Va2, vaempty), vVEquals(Va2, Vfv), vrcons(Vf, vrempty)) = visFalse)).
tff('singleRowSelect2', axiom, ![Va1: vAName, Va2: vAName, Vfv: vFVal, Vf: vFVal] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, vaempty), vVEquals(Va2, Vfv), vrcons(Vf, vrempty)) = verror)).
tff('singleRowSelect3', axiom, ![Var: vAList, Vr: vRow, Va2: vAName, Vfv: vFVal] : ((Var != vaempty | Vr != vrempty) => vsingleRowSelect(vacons(Va2, Var), vVEquals(Va2, Vfv), vrcons(Vfv, Vr)) = visTrue)).
tff('singleRowSelect4', axiom, ![Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : ((Vf != Vfv & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va2, Var), vVEquals(Va2, Vfv), vrcons(Vf, Vr)) = visFalse)).
tff('singleRowSelect5', axiom, ![Va1: vAName, Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : ((Va1 != Va2 & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVEquals(Va2, Vfv), vrcons(Vf, Vr)) = vsingleRowSelect(Var, vVEquals(Va2, Vfv), Vr))).
tff('singleRowSelect6', axiom, ![Vf: vFVal, Vfv: vFVal, Va2: vAName] : (vge(Vf, Vfv) => vsingleRowSelect(vacons(Va2, vaempty), vVGreater(Va2, Vfv), vrcons(Vf, vrempty)) = visTrue)).
tff('singleRowSelect7', axiom, ![Vf: vFVal, Vfv: vFVal, Va2: vAName] : ((~vge(Vf, Vfv)) => vsingleRowSelect(vacons(Va2, vaempty), vVGreater(Va2, Vfv), vrcons(Vf, vrempty)) = visFalse)).
tff('singleRowSelect8', axiom, ![Va1: vAName, Va2: vAName, Vfv: vFVal, Vf: vFVal] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, vaempty), vVGreater(Va2, Vfv), vrcons(Vf, vrempty)) = verror)).
tff('singleRowSelect9', axiom, ![Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : ((vge(Vf, Vfv) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va2, Var), vVGreater(Va2, Vfv), vrcons(Vf, Vr)) = visTrue)).
tff('singleRowSelect10', axiom, ![Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : (((~vge(Vf, Vfv)) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va2, Var), vVGreater(Va2, Vfv), vrcons(Vf, Vr)) = visFalse)).
tff('singleRowSelect11', axiom, ![Va1: vAName, Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : ((Va1 != Va2 & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVGreater(Va2, Vfv), vrcons(Vf, Vr)) = vsingleRowSelect(Var, vVGreater(Va2, Vfv), Vr))).
tff('singleRowSelect12', axiom, ![Vf: vFVal, Vfv: vFVal, Va2: vAName] : (vle(Vf, Vfv) => vsingleRowSelect(vacons(Va2, vaempty), vVSmaller(Va2, Vfv), vrcons(Vf, vrempty)) = visTrue)).
tff('singleRowSelect13', axiom, ![Vf: vFVal, Vfv: vFVal, Va2: vAName] : ((~vle(Vf, Vfv)) => vsingleRowSelect(vacons(Va2, vaempty), vVSmaller(Va2, Vfv), vrcons(Vf, vrempty)) = visFalse)).
tff('singleRowSelect14', axiom, ![Va1: vAName, Va2: vAName, Vfv: vFVal, Vf: vFVal] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, vaempty), vVSmaller(Va2, Vfv), vrcons(Vf, vrempty)) = verror)).
tff('singleRowSelect15', axiom, ![Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : ((vle(Vf, Vfv) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va2, Var), vVSmaller(Va2, Vfv), vrcons(Vf, Vr)) = visTrue)).
tff('singleRowSelect16', axiom, ![Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : (((~vle(Vf, Vfv)) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va2, Var), vVSmaller(Va2, Vfv), vrcons(Vf, Vr)) = visFalse)).
tff('singleRowSelect17', axiom, ![Va1: vAName, Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : ((Va1 != Va2 & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVSmaller(Va2, Vfv), vrcons(Vf, Vr)) = vsingleRowSelect(Var, vVSmaller(Va2, Vfv), Vr))).
tff('singleRowSelect-INV', axiom, ![VAList0: vAList, VPred0: vPred, VRow0: vRow, VRESULT: vOpt3] : (vsingleRowSelect(VAList0, VPred0, VRow0) = VRESULT => (?[Va2: vAName, Vfv: vFVal] : (VAList0 = vacons(Va2, vaempty) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vfv, vrempty) & VRESULT = visTrue) | ?[Va2: vAName, Vf: vFVal, Vfv: vFVal] : (Vf != Vfv & VAList0 = vacons(Va2, vaempty) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = visFalse) | ?[Va1: vAName, Va2: vAName, Vfv: vFVal, Vf: vFVal] : (Va1 != Va2 & VAList0 = vacons(Va1, vaempty) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = verror) | ?[Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal] : ((Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va2, Var) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vfv, Vr) & VRESULT = visTrue) | ?[Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : (Vf != Vfv & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va2, Var) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visFalse) | ?[Va1: vAName, Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : (Va1 != Va2 & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = vsingleRowSelect(Var, vVEquals(Va2, Vfv), Vr)) | ?[Va2: vAName, Vf: vFVal, Vfv: vFVal] : (vge(Vf, Vfv) & VAList0 = vacons(Va2, vaempty) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = visTrue) | ?[Va2: vAName, Vf: vFVal, Vfv: vFVal] : ((~vge(Vf, Vfv)) & VAList0 = vacons(Va2, vaempty) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = visFalse) | ?[Va1: vAName, Va2: vAName, Vfv: vFVal, Vf: vFVal] : (Va1 != Va2 & VAList0 = vacons(Va1, vaempty) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = verror) | ?[Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : (vge(Vf, Vfv) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va2, Var) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visTrue) | ?[Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : ((~vge(Vf, Vfv)) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va2, Var) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visFalse) | ?[Va1: vAName, Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : (Va1 != Va2 & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = vsingleRowSelect(Var, vVGreater(Va2, Vfv), Vr)) | ?[Va2: vAName, Vf: vFVal, Vfv: vFVal] : (vle(Vf, Vfv) & VAList0 = vacons(Va2, vaempty) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = visTrue) | ?[Va2: vAName, Vf: vFVal, Vfv: vFVal] : ((~vle(Vf, Vfv)) & VAList0 = vacons(Va2, vaempty) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = visFalse) | ?[Va1: vAName, Va2: vAName, Vfv: vFVal, Vf: vFVal] : (Va1 != Va2 & VAList0 = vacons(Va1, vaempty) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = verror) | ?[Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : (vle(Vf, Vfv) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va2, Var) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visTrue) | ?[Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : ((~vle(Vf, Vfv)) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va2, Var) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visFalse) | ?[Va1: vAName, Va2: vAName, Var: vAList, Vr: vRow, Vfv: vFVal, Vf: vFVal] : (Va1 != Va2 & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = vsingleRowSelect(Var, vVSmaller(Va2, Vfv), Vr))))).
tff('select0', axiom, ![Val: vAList, Vpred: vPred] : vselect(vtable(Val, vtempty), Vpred) = vsomeTable(vtable(Val, vtempty))).
tff('select1', axiom, ![Val: vAList, Vpred: vPred, Vr: vRow, Vrt: vRawTable] : (vsingleRowSelect(Val, Vpred, Vr) = visTrue => vselect(vtable(Val, vtcons(Vr, Vrt)), Vpred) = vsomeTable(vtable(Val, vtcons(Vr, vgetRaw(vgetSomeTable(vselect(vtable(Val, Vrt), Vpred)))))))).
tff('select2', axiom, ![Val: vAList, Vpred: vPred, Vr: vRow, Vrt: vRawTable] : ((vsingleRowSelect(Val, Vpred, Vr) != visTrue & vsingleRowSelect(Val, Vpred, Vr) = visFalse) => vselect(vtable(Val, vtcons(Vr, Vrt)), Vpred) = vselect(vtable(Val, Vrt), Vpred))).
tff('select3', axiom, ![Vrt: vRawTable, Vpred: vPred, Vr: vRow, Vrts: vOptTable, Val: vAList] : ((Vrts = vselect(vtable(Val, Vrt), Vpred) & vsingleRowSelect(Val, Vpred, Vr) != visTrue & vsingleRowSelect(Val, Vpred, Vr) != visFalse) => vselect(vtable(Val, vtcons(Vr, Vrt)), Vpred) = vnoTable)).
tff('select-INV', axiom, ![VTable0: vTable, VPred0: vPred, VRESULT: vOptTable] : (vselect(VTable0, VPred0) = VRESULT => (?[Val: vAList, Vpred: vPred] : (VTable0 = vtable(Val, vtempty) & VPred0 = Vpred & VRESULT = vsomeTable(vtable(Val, vtempty))) | ?[Vrt: vRawTable, Vpred: vPred, Vr: vRow, Val: vAList] : (vsingleRowSelect(Val, Vpred, Vr) = visTrue & VTable0 = vtable(Val, vtcons(Vr, Vrt)) & VPred0 = Vpred & VRESULT = vsomeTable(vtable(Val, vtcons(Vr, vgetRaw(vgetSomeTable(vselect(vtable(Val, Vrt), Vpred))))))) | ?[Vrt: vRawTable, Vpred: vPred, Vr: vRow, Vrts: vOptTable, Val: vAList] : (vsingleRowSelect(Val, Vpred, Vr) != visTrue & vsingleRowSelect(Val, Vpred, Vr) = visFalse & VTable0 = vtable(Val, vtcons(Vr, Vrt)) & VPred0 = Vpred & VRESULT = Vrts) | ?[Vrt: vRawTable, Vpred: vPred, Vr: vRow, Val: vAList] : (vsingleRowSelect(Val, Vpred, Vr) != visTrue & vsingleRowSelect(Val, Vpred, Vr) != visFalse & VTable0 = vtable(Val, vtcons(Vr, Vrt)) & VPred0 = Vpred & VRESULT = vnoTable)))).
tff('union0', axiom, ![Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : vunion(vtable(Val2, Vrt1), vtable(Val2, Vrt2)) = vsomeTable(vtable(Val2, vrawUnion(Vrt1, Vrt2)))).
tff('union1', axiom, ![Val1: vAList, Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : (Val1 != Val2 => vunion(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vnoTable)).
tff('union-INV', axiom, ![VTable0: vTable, VTable1: vTable, VRESULT: vOptTable] : (vunion(VTable0, VTable1) = VRESULT => (?[Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : (VTable0 = vtable(Val2, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vsomeTable(vtable(Val2, vrawUnion(Vrt1, Vrt2)))) | ?[Val1: vAList, Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : (Val1 != Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vnoTable)))).
tff('intersect0', axiom, ![Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : vintersect(vtable(Val2, Vrt1), vtable(Val2, Vrt2)) = vsomeTable(vtable(Val2, vrawIntersection(Vrt1, Vrt2)))).
tff('intersect1', axiom, ![Val1: vAList, Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : (Val1 != Val2 => vintersect(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vnoTable)).
tff('intersect-INV', axiom, ![VTable0: vTable, VTable1: vTable, VRESULT: vOptTable] : (vintersect(VTable0, VTable1) = VRESULT => (?[Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : (VTable0 = vtable(Val2, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vsomeTable(vtable(Val2, vrawIntersection(Vrt1, Vrt2)))) | ?[Val1: vAList, Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : (Val1 != Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vnoTable)))).
tff('difference0', axiom, ![Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : vdifference(vtable(Val2, Vrt1), vtable(Val2, Vrt2)) = vsomeTable(vtable(Val2, vrawDifference(Vrt1, Vrt2)))).
tff('difference1', axiom, ![Val1: vAList, Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : (Val1 != Val2 => vdifference(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vnoTable)).
tff('difference-INV', axiom, ![VTable0: vTable, VTable1: vTable, VRESULT: vOptTable] : (vdifference(VTable0, VTable1) = VRESULT => (?[Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : (VTable0 = vtable(Val2, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vsomeTable(vtable(Val2, vrawDifference(Vrt1, Vrt2)))) | ?[Val1: vAList, Val2: vAList, Vrt1: vRawTable, Vrt2: vRawTable] : (Val1 != Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vnoTable)))).
tff('reduce0', axiom, ![Vt: vTable, Vts: vTStore] : vreduce(vconf(vTvalue(Vt), Vts)) = vnoConf).
tff('reduce1', axiom, ![Vtn: vTName, Vts: vTStore] : (visSomeTable(vlookupStore(Vtn, Vts)) => vreduce(vconf(vSelectAllFrom(vRef(Vtn)), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(vlookupStore(Vtn, Vts))), Vts)))).
tff('reduce2', axiom, ![Vtn: vTName, Vts: vTStore] : ((~visSomeTable(vlookupStore(Vtn, Vts))) => vreduce(vconf(vSelectAllFrom(vRef(Vtn)), Vts)) = vnoConf)).
tff('reduce3', axiom, ![Vtn: vTName, Vts: vTStore, Val: vAList] : ((visSomeTable(vlookupStore(Vtn, Vts)) & visSomeRawTable(vproject(Val, vgetSomeTable(vlookupStore(Vtn, Vts))))) => vreduce(vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts)) = vsomeConf(vconf(vTvalue(vtable(Val, vgetSomeRawTable(vproject(Val, vgetSomeTable(vlookupStore(Vtn, Vts)))))), Vts)))).
tff('reduce4', axiom, ![Vtn: vTName, Vts: vTStore, Val: vAList] : ((visSomeTable(vlookupStore(Vtn, Vts)) & (~visSomeRawTable(vproject(Val, vgetSomeTable(vlookupStore(Vtn, Vts)))))) => vreduce(vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts)) = vnoConf)).
tff('reduce5', axiom, ![Vtn: vTName, Vts: vTStore, Val: vAList] : ((~visSomeTable(vlookupStore(Vtn, Vts))) => vreduce(vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts)) = vnoConf)).
tff('reduce6', axiom, ![Vtn: vTName, Vts: vTStore, Vp: vPred] : ((visSomeTable(vlookupStore(Vtn, Vts)) & visSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp))) => vreduce(vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp))), Vts)))).
tff('reduce7', axiom, ![Vtn: vTName, Vts: vTStore, Vp: vPred] : ((visSomeTable(vlookupStore(Vtn, Vts)) & (~visSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp)))) => vreduce(vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts)) = vnoConf)).
tff('reduce8', axiom, ![Vtn: vTName, Vts: vTStore, Vp: vPred] : ((~visSomeTable(vlookupStore(Vtn, Vts))) => vreduce(vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts)) = vnoConf)).
tff('reduce9', axiom, ![Vtn: vTName, Vts: vTStore, Vp: vPred, Val: vAList] : ((visSomeTable(vlookupStore(Vtn, Vts)) & visSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp)) & visSomeRawTable(vproject(Val, vgetSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp))))) => vreduce(vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts)) = vsomeConf(vconf(vTvalue(vtable(Val, vgetSomeRawTable(vproject(Val, vgetSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp)))))), Vts)))).
tff('reduce10', axiom, ![Vtn: vTName, Vts: vTStore, Vp: vPred, Val: vAList] : ((visSomeTable(vlookupStore(Vtn, Vts)) & visSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp)) & (~visSomeRawTable(vproject(Val, vgetSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp)))))) => vreduce(vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts)) = vnoConf)).
tff('reduce11', axiom, ![Vtn: vTName, Vts: vTStore, Vp: vPred, Val: vAList] : ((visSomeTable(vlookupStore(Vtn, Vts)) & (~visSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp)))) => vreduce(vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts)) = vnoConf)).
tff('reduce12', axiom, ![Vtn: vTName, Vts: vTStore, Val: vAList, Vp: vPred] : ((~visSomeTable(vlookupStore(Vtn, Vts))) => vreduce(vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts)) = vnoConf)).
tff('reduce13', axiom, ![Vt1: vTable, Vt2: vTable, Vts: vTStore] : (visSomeTable(vunion(Vt1, Vt2)) => vreduce(vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(vunion(Vt1, Vt2))), Vts)))).
tff('reduce14', axiom, ![Vt1: vTable, Vt2: vTable, Vts: vTStore] : ((~visSomeTable(vunion(Vt1, Vt2))) => vreduce(vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vnoConf)).
tff('reduce15', axiom, ![Vq2: vQuery, Vts: vTStore, Vt: vTable] : ((visSomeConf(vreduce(vconf(Vq2, Vts))) & ![Vt20: vTable] : Vq2 != vTvalue(Vt20)) => vreduce(vconf(vUnion(vTvalue(Vt), Vq2), Vts)) = vsomeConf(vconf(vUnion(vTvalue(Vt), vgetQuery(vgetSomeConf(vreduce(vconf(Vq2, Vts))))), Vts)))).
tff('reduce16', axiom, ![Vq2: vQuery, Vts: vTStore, Vt: vTable] : (((~visSomeConf(vreduce(vconf(Vq2, Vts)))) & ![Vt20: vTable] : Vq2 != vTvalue(Vt20)) => vreduce(vconf(vUnion(vTvalue(Vt), Vq2), Vts)) = vnoConf)).
tff('reduce17', axiom, ![Vq1: vQuery, Vts: vTStore, Vq2: vQuery] : ((visSomeConf(vreduce(vconf(Vq1, Vts))) & (![Vt10: vTable] : Vq1 != vTvalue(Vt10) | ![Vt20: vTable] : Vq2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vq1 != vTvalue(Vt0)) => vreduce(vconf(vUnion(Vq1, Vq2), Vts)) = vsomeConf(vconf(vUnion(vgetQuery(vgetSomeConf(vreduce(vconf(Vq1, Vts)))), Vq2), Vts)))).
tff('reduce18', axiom, ![Vq1: vQuery, Vts: vTStore, Vq2: vQuery] : (((~visSomeConf(vreduce(vconf(Vq1, Vts)))) & (![Vt10: vTable] : Vq1 != vTvalue(Vt10) | ![Vt20: vTable] : Vq2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vq1 != vTvalue(Vt0)) => vreduce(vconf(vUnion(Vq1, Vq2), Vts)) = vnoConf)).
tff('reduce19', axiom, ![Vt1: vTable, Vt2: vTable, Vts: vTStore] : (visSomeTable(vintersect(Vt1, Vt2)) => vreduce(vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(vintersect(Vt1, Vt2))), Vts)))).
tff('reduce20', axiom, ![Vt1: vTable, Vt2: vTable, Vts: vTStore] : ((~visSomeTable(vintersect(Vt1, Vt2))) => vreduce(vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vnoConf)).
tff('reduce21', axiom, ![Vsql2: vQuery, Vts: vTStore, Vt: vTable] : ((visSomeConf(vreduce(vconf(Vsql2, Vts))) & ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vIntersection(vTvalue(Vt), Vsql2), Vts)) = vsomeConf(vconf(vIntersection(vTvalue(Vt), vgetQuery(vgetSomeConf(vreduce(vconf(Vsql2, Vts))))), Vts)))).
tff('reduce22', axiom, ![Vsql2: vQuery, Vts: vTStore, Vt: vTable] : (((~visSomeConf(vreduce(vconf(Vsql2, Vts)))) & ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vIntersection(vTvalue(Vt), Vsql2), Vts)) = vnoConf)).
tff('reduce23', axiom, ![Vsql1: vQuery, Vts: vTStore, Vsql2: vQuery] : ((visSomeConf(vreduce(vconf(Vsql1, Vts))) & (![Vt10: vTable] : Vsql1 != vTvalue(Vt10) | ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vIntersection(Vsql1, Vsql2), Vts)) = vsomeConf(vconf(vIntersection(vgetQuery(vgetSomeConf(vreduce(vconf(Vsql1, Vts)))), Vsql2), Vts)))).
tff('reduce24', axiom, ![Vsql1: vQuery, Vts: vTStore, Vsql2: vQuery] : (((~visSomeConf(vreduce(vconf(Vsql1, Vts)))) & (![Vt10: vTable] : Vsql1 != vTvalue(Vt10) | ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vIntersection(Vsql1, Vsql2), Vts)) = vnoConf)).
tff('reduce25', axiom, ![Vt1: vTable, Vt2: vTable, Vts: vTStore] : (visSomeTable(vdifference(Vt1, Vt2)) => vreduce(vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(vdifference(Vt1, Vt2))), Vts)))).
tff('reduce26', axiom, ![Vt1: vTable, Vt2: vTable, Vts: vTStore] : ((~visSomeTable(vdifference(Vt1, Vt2))) => vreduce(vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vnoConf)).
tff('reduce27', axiom, ![Vsql2: vQuery, Vts: vTStore, Vt: vTable] : ((visSomeConf(vreduce(vconf(Vsql2, Vts))) & ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vDifference(vTvalue(Vt), Vsql2), Vts)) = vsomeConf(vconf(vDifference(vTvalue(Vt), vgetQuery(vgetSomeConf(vreduce(vconf(Vsql2, Vts))))), Vts)))).
tff('reduce28', axiom, ![Vsql2: vQuery, Vts: vTStore, Vt: vTable] : (((~visSomeConf(vreduce(vconf(Vsql2, Vts)))) & ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vDifference(vTvalue(Vt), Vsql2), Vts)) = vnoConf)).
tff('reduce29', axiom, ![Vsql1: vQuery, Vts: vTStore, Vsql2: vQuery] : ((visSomeConf(vreduce(vconf(Vsql1, Vts))) & (![Vt10: vTable] : Vsql1 != vTvalue(Vt10) | ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vDifference(Vsql1, Vsql2), Vts)) = vsomeConf(vconf(vDifference(vgetQuery(vgetSomeConf(vreduce(vconf(Vsql1, Vts)))), Vsql2), Vts)))).
tff('reduce30', axiom, ![Vsql1: vQuery, Vts: vTStore, Vsql2: vQuery] : (((~visSomeConf(vreduce(vconf(Vsql1, Vts)))) & (![Vt10: vTable] : Vsql1 != vTvalue(Vt10) | ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vDifference(Vsql1, Vsql2), Vts)) = vnoConf)).
tff('reduce-INV', axiom, ![VConf0: vConf, VRESULT: vOptConf] : (vreduce(VConf0) = VRESULT => (?[Vt: vTable, Vts: vTStore] : (VConf0 = vconf(vTvalue(Vt), Vts) & VRESULT = vnoConf) | ?[Vtn: vTName, Vts: vTStore] : (visSomeTable(vlookupStore(Vtn, Vts)) & VConf0 = vconf(vSelectAllFrom(vRef(Vtn)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(vlookupStore(Vtn, Vts))), Vts))) | ?[Vtn: vTName, Vts: vTStore] : ((~visSomeTable(vlookupStore(Vtn, Vts))) & VConf0 = vconf(vSelectAllFrom(vRef(Vtn)), Vts) & VRESULT = vnoConf) | ?[Vtn: vTName, Val: vAList, Vts: vTStore] : (visSomeTable(vlookupStore(Vtn, Vts)) & visSomeRawTable(vproject(Val, vgetSomeTable(vlookupStore(Vtn, Vts)))) & VConf0 = vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vtable(Val, vgetSomeRawTable(vproject(Val, vgetSomeTable(vlookupStore(Vtn, Vts)))))), Vts))) | ?[Vtn: vTName, Val: vAList, Vts: vTStore] : (visSomeTable(vlookupStore(Vtn, Vts)) & (~visSomeRawTable(vproject(Val, vgetSomeTable(vlookupStore(Vtn, Vts))))) & VConf0 = vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts) & VRESULT = vnoConf) | ?[Vtn: vTName, Vts: vTStore, Val: vAList] : ((~visSomeTable(vlookupStore(Vtn, Vts))) & VConf0 = vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts) & VRESULT = vnoConf) | ?[Vp: vPred, Vtn: vTName, Vts: vTStore] : (visSomeTable(vlookupStore(Vtn, Vts)) & visSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp)) & VConf0 = vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp))), Vts))) | ?[Vp: vPred, Vtn: vTName, Vts: vTStore] : (visSomeTable(vlookupStore(Vtn, Vts)) & (~visSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp))) & VConf0 = vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts) & VRESULT = vnoConf) | ?[Vtn: vTName, Vts: vTStore, Vp: vPred] : ((~visSomeTable(vlookupStore(Vtn, Vts))) & VConf0 = vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts) & VRESULT = vnoConf) | ?[Vp: vPred, Vtn: vTName, Val: vAList, Vts: vTStore] : (visSomeTable(vlookupStore(Vtn, Vts)) & visSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp)) & visSomeRawTable(vproject(Val, vgetSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp)))) & VConf0 = vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vtable(Val, vgetSomeRawTable(vproject(Val, vgetSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp)))))), Vts))) | ?[Vp: vPred, Vtn: vTName, Val: vAList, Vts: vTStore] : (visSomeTable(vlookupStore(Vtn, Vts)) & visSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp)) & (~visSomeRawTable(vproject(Val, vgetSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp))))) & VConf0 = vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts) & VRESULT = vnoConf) | ?[Vp: vPred, Vtn: vTName, Val: vAList, Vts: vTStore] : (visSomeTable(vlookupStore(Vtn, Vts)) & (~visSomeTable(vselect(vgetSomeTable(vlookupStore(Vtn, Vts)), Vp))) & VConf0 = vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts) & VRESULT = vnoConf) | ?[Vp: vPred, Vtn: vTName, Val: vAList, Vts: vTStore] : ((~visSomeTable(vlookupStore(Vtn, Vts))) & VConf0 = vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts) & VRESULT = vnoConf) | ?[Vt1: vTable, Vt2: vTable, Vts: vTStore] : (visSomeTable(vunion(Vt1, Vt2)) & VConf0 = vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(vunion(Vt1, Vt2))), Vts))) | ?[Vt1: vTable, Vt2: vTable, Vts: vTStore] : ((~visSomeTable(vunion(Vt1, Vt2))) & VConf0 = vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vnoConf) | ?[Vq2: vQuery, Vts: vTStore, Vt: vTable] : (visSomeConf(vreduce(vconf(Vq2, Vts))) & ![Vt20: vTable] : Vq2 != vTvalue(Vt20) & VConf0 = vconf(vUnion(vTvalue(Vt), Vq2), Vts) & VRESULT = vsomeConf(vconf(vUnion(vTvalue(Vt), vgetQuery(vgetSomeConf(vreduce(vconf(Vq2, Vts))))), Vts))) | ?[Vq2: vQuery, Vts: vTStore, Vt: vTable] : ((~visSomeConf(vreduce(vconf(Vq2, Vts)))) & ![Vt20: vTable] : Vq2 != vTvalue(Vt20) & VConf0 = vconf(vUnion(vTvalue(Vt), Vq2), Vts) & VRESULT = vnoConf) | ?[Vq1: vQuery, Vts: vTStore, Vq2: vQuery] : (visSomeConf(vreduce(vconf(Vq1, Vts))) & (![Vt10: vTable] : Vq1 != vTvalue(Vt10) | ![Vt20: vTable] : Vq2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vq1 != vTvalue(Vt0) & VConf0 = vconf(vUnion(Vq1, Vq2), Vts) & VRESULT = vsomeConf(vconf(vUnion(vgetQuery(vgetSomeConf(vreduce(vconf(Vq1, Vts)))), Vq2), Vts))) | ?[Vq1: vQuery, Vts: vTStore, Vq2: vQuery] : ((~visSomeConf(vreduce(vconf(Vq1, Vts)))) & (![Vt10: vTable] : Vq1 != vTvalue(Vt10) | ![Vt20: vTable] : Vq2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vq1 != vTvalue(Vt0) & VConf0 = vconf(vUnion(Vq1, Vq2), Vts) & VRESULT = vnoConf) | ?[Vt1: vTable, Vt2: vTable, Vts: vTStore] : (visSomeTable(vintersect(Vt1, Vt2)) & VConf0 = vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(vintersect(Vt1, Vt2))), Vts))) | ?[Vt1: vTable, Vt2: vTable, Vts: vTStore] : ((~visSomeTable(vintersect(Vt1, Vt2))) & VConf0 = vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vnoConf) | ?[Vsql2: vQuery, Vts: vTStore, Vt: vTable] : (visSomeConf(vreduce(vconf(Vsql2, Vts))) & ![Vt20: vTable] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vIntersection(vTvalue(Vt), Vsql2), Vts) & VRESULT = vsomeConf(vconf(vIntersection(vTvalue(Vt), vgetQuery(vgetSomeConf(vreduce(vconf(Vsql2, Vts))))), Vts))) | ?[Vsql2: vQuery, Vts: vTStore, Vt: vTable] : ((~visSomeConf(vreduce(vconf(Vsql2, Vts)))) & ![Vt20: vTable] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vIntersection(vTvalue(Vt), Vsql2), Vts) & VRESULT = vnoConf) | ?[Vsql1: vQuery, Vts: vTStore, Vsql2: vQuery] : (visSomeConf(vreduce(vconf(Vsql1, Vts))) & (![Vt10: vTable] : Vsql1 != vTvalue(Vt10) | ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vIntersection(Vsql1, Vsql2), Vts) & VRESULT = vsomeConf(vconf(vIntersection(vgetQuery(vgetSomeConf(vreduce(vconf(Vsql1, Vts)))), Vsql2), Vts))) | ?[Vsql1: vQuery, Vts: vTStore, Vsql2: vQuery] : ((~visSomeConf(vreduce(vconf(Vsql1, Vts)))) & (![Vt10: vTable] : Vsql1 != vTvalue(Vt10) | ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vIntersection(Vsql1, Vsql2), Vts) & VRESULT = vnoConf) | ?[Vt1: vTable, Vt2: vTable, Vts: vTStore] : (visSomeTable(vdifference(Vt1, Vt2)) & VConf0 = vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(vdifference(Vt1, Vt2))), Vts))) | ?[Vt1: vTable, Vt2: vTable, Vts: vTStore] : ((~visSomeTable(vdifference(Vt1, Vt2))) & VConf0 = vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vnoConf) | ?[Vsql2: vQuery, Vts: vTStore, Vt: vTable] : (visSomeConf(vreduce(vconf(Vsql2, Vts))) & ![Vt20: vTable] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vDifference(vTvalue(Vt), Vsql2), Vts) & VRESULT = vsomeConf(vconf(vDifference(vTvalue(Vt), vgetQuery(vgetSomeConf(vreduce(vconf(Vsql2, Vts))))), Vts))) | ?[Vsql2: vQuery, Vts: vTStore, Vt: vTable] : ((~visSomeConf(vreduce(vconf(Vsql2, Vts)))) & ![Vt20: vTable] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vDifference(vTvalue(Vt), Vsql2), Vts) & VRESULT = vnoConf) | ?[Vsql1: vQuery, Vts: vTStore, Vsql2: vQuery] : (visSomeConf(vreduce(vconf(Vsql1, Vts))) & (![Vt10: vTable] : Vsql1 != vTvalue(Vt10) | ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vDifference(Vsql1, Vsql2), Vts) & VRESULT = vsomeConf(vconf(vDifference(vgetQuery(vgetSomeConf(vreduce(vconf(Vsql1, Vts)))), Vsql2), Vts))) | ?[Vsql1: vQuery, Vts: vTStore, Vsql2: vQuery] : ((~visSomeConf(vreduce(vconf(Vsql1, Vts)))) & (![Vt10: vTable] : Vsql1 != vTvalue(Vt10) | ![Vt20: vTable] : Vsql2 != vTvalue(Vt20)) & ![Vt0: vTable] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vDifference(Vsql1, Vsql2), Vts) & VRESULT = vnoConf)))).
tff('DIFF-x1-x2', axiom, vx1 != vx2).
tff('DIFF-x1-y1', axiom, vx1 != vy1).
tff('DIFF-x1-y2', axiom, vx1 != vy2).
tff('DIFF-x1-z1', axiom, vx1 != vz1).
tff('DIFF-x1-z2', axiom, vx1 != vz2).
tff('DIFF-x2-y1', axiom, vx2 != vy1).
tff('DIFF-x2-y2', axiom, vx2 != vy2).
tff('DIFF-x2-z1', axiom, vx2 != vz1).
tff('DIFF-x2-z2', axiom, vx2 != vz2).
tff('DIFF-y1-y2', axiom, vy1 != vy2).
tff('DIFF-y1-z1', axiom, vy1 != vz1).
tff('DIFF-y1-z2', axiom, vy1 != vz2).
tff('DIFF-y2-z1', axiom, vy2 != vz1).
tff('DIFF-y2-z2', axiom, vy2 != vz2).
tff('DIFF-z1-z2', axiom, vz1 != vz2).
tff('DIFF-A1-A2', axiom, vA1 != vA2).
tff('DIFF-A1-A3', axiom, vA1 != vA3).
tff('DIFF-A2-A3', axiom, vA2 != vA3).
tff('test-projection3', conjecture, vproject(vacons(vA2, vacons(vA1, vaempty)), vtable(vacons(vA1, vacons(vA2, vacons(vA3, vaempty))), vtcons(vrcons(vx1, vrcons(vy2, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz1, vrempty))), vtempty)))) = vsomeRawTable(vtcons(vrcons(vy2, vrcons(vx1, vrempty)), vtcons(vrcons(vy1, vrcons(vx2, vrempty)), vtempty)))).
