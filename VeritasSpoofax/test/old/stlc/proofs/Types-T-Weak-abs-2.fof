fof('EQ-tvar', axiom, ![VVar0, VVar1] : ((VVar0 = VVar1) <=> (vtvar(VVar0) = vtvar(VVar1)))).
fof('EQ-tfun', axiom, ![VTyp0, VTyp2, VTyp1, VTyp3] : (((VTyp0 = VTyp2) & (VTyp1 = VTyp3)) <=> (vtfun(VTyp0, VTyp1) = vtfun(VTyp2, VTyp3)))).
fof('DIFF-tvar-tfun', axiom, ![VVar0, VTyp0, VTyp1] : (vtvar(VVar0) != vtfun(VTyp0, VTyp1))).
fof('EQ-var', axiom, ![VVar0, VVar1] : ((VVar0 = VVar1) <=> (vvar(VVar0) = vvar(VVar1)))).
fof('EQ-abs', axiom, ![VExp1, VVar0, VVar1, VTyp1, VExp0, VTyp0] : (((VVar0 = VVar1) & ((VTyp0 = VTyp1) & (VExp0 = VExp1))) <=> (vabs(VVar0, VTyp0, VExp0) = vabs(VVar1, VTyp1, VExp1)))).
fof('EQ-app', axiom, ![VExp0, VExp2, VExp1, VExp3] : (((VExp0 = VExp2) & (VExp1 = VExp3)) <=> (vapp(VExp0, VExp1) = vapp(VExp2, VExp3)))).
fof('DIFF-var-abs', axiom, ![VVar0, VVar1, VTyp0, VExp0] : (vvar(VVar0) != vabs(VVar1, VTyp0, VExp0))).
fof('DIFF-var-app', axiom, ![VVar0, VExp0, VExp1] : (vvar(VVar0) != vapp(VExp0, VExp1))).
fof('DIFF-abs-app', axiom, ![VExp1, VVar0, VExp2, VExp0, VTyp0] : (vabs(VVar0, VTyp0, VExp0) != vapp(VExp1, VExp2))).
fof('isValue0', axiom, ![Vx, VS, Ve] : visValue(vabs(Vx, VS, Ve))).
fof('isValue1', axiom, ![Vx] : (~visValue(vvar(Vx)))).
fof('isValue2', axiom, ![Ve1, Ve2] : (~visValue(vapp(Ve1, Ve2)))).
fof('isValue-true-INV', axiom, ![VExp0] : (visValue(VExp0) => ?[Vx, VS, Ve] : (VExp0 = vabs(Vx, VS, Ve)))).
fof('isValue-false-INV', axiom, ![VExp0] : ((~visValue(VExp0)) => (?[Vx] : (VExp0 = vvar(Vx)) | ?[Ve1, Ve2] : (VExp0 = vapp(Ve1, Ve2))))).
fof('isFreeVar0', axiom, ![Vv, Vx] : (visFreeVar(Vv, vvar(Vx)) <=> (Vx = Vv))).
fof('isFreeVar1', axiom, ![Vv, Vx, VT, Ve] : (visFreeVar(Vv, vabs(Vx, VT, Ve)) <=> ((Vx != Vv) & visFreeVar(Vv, Ve)))).
fof('isFreeVar2', axiom, ![Vv, Ve1, Ve2] : (visFreeVar(Vv, vapp(Ve1, Ve2)) <=> (visFreeVar(Vv, Ve1) | visFreeVar(Vv, Ve2)))).
fof('isFreeVar-true-INV', axiom, ![VVar0, VExp0] : (visFreeVar(VVar0, VExp0) => (?[Vv, Vx] : ((VVar0 = Vv) & (VExp0 = vvar(Vx)) & (Vx = Vv)) | ?[Vv, Vx, VT, Ve] : ((VVar0 = Vv) & (VExp0 = vabs(Vx, VT, Ve)) & ((Vx != Vv) & visFreeVar(Vv, Ve))) | ?[Vv, Ve1, Ve2] : ((VVar0 = Vv) & (VExp0 = vapp(Ve1, Ve2)) & (visFreeVar(Vv, Ve1) | visFreeVar(Vv, Ve2)))))).
fof('isFreeVar-false-INV', axiom, ![VVar0, VExp0] : ((~visFreeVar(VVar0, VExp0)) => (?[Vv, Vx] : ((VVar0 = Vv) & (VExp0 = vvar(Vx)) & (~(Vx = Vv))) | ?[Vv, Vx, VT, Ve] : ((VVar0 = Vv) & (VExp0 = vabs(Vx, VT, Ve)) & (~((Vx != Vv) & visFreeVar(Vv, Ve)))) | ?[Vv, Ve1, Ve2] : ((VVar0 = Vv) & (VExp0 = vapp(Ve1, Ve2)) & (~(visFreeVar(Vv, Ve1) | visFreeVar(Vv, Ve2))))))).
fof('EQ-bind', axiom, ![VCtx0, VCtx1, VVar0, VVar1, VTyp1, VTyp0] : (((VVar0 = VVar1) & ((VTyp0 = VTyp1) & (VCtx0 = VCtx1))) <=> (vbind(VVar0, VTyp0, VCtx0) = vbind(VVar1, VTyp1, VCtx1)))).
fof('DIFF-empty-bind', axiom, ![VVar0, VTyp0, VCtx0] : (vempty != vbind(VVar0, VTyp0, VCtx0))).
fof('EQ-someType', axiom, ![VTyp0, VTyp1] : ((VTyp0 = VTyp1) <=> (vsomeType(VTyp0) = vsomeType(VTyp1)))).
fof('DIFF-noType-someType', axiom, ![VTyp0] : (vnoType != vsomeType(VTyp0))).
fof('isSomeType0', axiom, (~visSomeType(vnoType))).
fof('isSomeType1', axiom, ![Ve] : visSomeType(vsomeType(Ve))).
fof('isSomeType-true-INV', axiom, ![VOptTyp0] : (visSomeType(VOptTyp0) => ?[Ve] : (VOptTyp0 = vsomeType(Ve)))).
fof('isSomeType-false-INV', axiom, ![VOptTyp0] : ((~visSomeType(VOptTyp0)) => (VOptTyp0 = vnoType))).
fof('getSomeType0', axiom, ![Ve] : (vgetSomeType(vsomeType(Ve)) = Ve)).
fof('lookup0', axiom, ![Vx] : (vlookup(Vx, vempty) = vnoType)).
fof('lookup1', axiom, ![Vx, Vy, VTy, VC] : ((Vx = Vy) => (vlookup(Vx, vbind(Vy, VTy, VC)) = vsomeType(VTy)))).
fof('lookup2', axiom, ![Vx, Vy, VTy, VC] : ((Vx != Vy) => (vlookup(Vx, vbind(Vy, VTy, VC)) = vlookup(Vx, VC)))).
fof('lookup-INV', axiom, ![VVar0, VCtx0, VRESULT] : ((vlookup(VVar0, VCtx0) = VRESULT) => (?[Vx] : ((VVar0 = Vx) & (VCtx0 = vempty) & (VRESULT = vnoType)) | ?[Vx, Vy, VTy, VC] : ((Vx = Vy) & (VVar0 = Vx) & (VCtx0 = vbind(Vy, VTy, VC)) & (VRESULT = vsomeType(VTy))) | ?[Vx, Vy, VTy, VC] : ((Vx != Vy) & (VVar0 = Vx) & (VCtx0 = vbind(Vy, VTy, VC)) & (VRESULT = vlookup(Vx, VC)))))).
fof('T-Context-Duplicate', axiom, ![Vx, VTx, Vy, Ve, VC, VTy, VT] : (((Vx = Vy) & vptcheck(vbind(Vx, VTx, vbind(Vy, VTy, VC)), Ve, VT)) => vptcheck(vbind(Vx, VTx, VC), Ve, VT))).
fof('T-Context-Swap', axiom, ![Vx, VTx, Vy, Ve, VC, VTy, VT] : (((Vx != Vy) & vptcheck(vbind(Vx, VTx, vbind(Vy, VTy, VC)), Ve, VT)) => vptcheck(vbind(Vy, VTy, vbind(Vx, VTx, VC)), Ve, VT))).
fof('T-var', axiom, ![Vx, VC, VT] : ((vlookup(Vx, VC) = vsomeType(VT)) => vptcheck(VC, vvar(Vx), VT))).
fof('T-abs', axiom, ![Vx, Ve, VC, VT, VS] : (vptcheck(vbind(Vx, VS, VC), Ve, VT) => vptcheck(VC, vabs(Vx, VS, Ve), vtfun(VS, VT)))).
fof('T-app', axiom, ![VC, Ve1, VT, VS, Ve2] : ((vptcheck(VC, Ve1, vtfun(VS, VT)) & vptcheck(VC, Ve2, VS)) => vptcheck(VC, vapp(Ve1, Ve2), VT))).
fof('T-inv', axiom, ![VC, Ve, VT] : (vptcheck(VC, Ve, VT) => (?[Vx] : ((Ve = vvar(Vx)) & (vlookup(Vx, VC) = vsomeType(VT))) | ?[Vx, Ve2, VT1, VT2] : ((Ve = vabs(Vx, VT1, Ve2)) & (VT = vtfun(VT1, VT2)) & vptcheck(vbind(Vx, VT1, VC), Ve2, VT2)) | ?[Ve1, Ve2, VS] : ((Ve = vapp(Ve1, Ve2)) & vptcheck(VC, Ve1, vtfun(VS, VT)) & vptcheck(VC, Ve2, VS))))).
fof('isValue3', axiom, ![Vx, VS, Ve] : visValue(vabs(Vx, VS, Ve))).
fof('isValue4', axiom, ![Vx] : (~visValue(vvar(Vx)))).
fof('isValue5', axiom, ![Ve1, Ve2] : (~visValue(vapp(Ve1, Ve2)))).
fof('isFreeVar3', axiom, ![Vv, Vx] : (visFreeVar(Vv, vvar(Vx)) <=> (Vx = Vv))).
fof('isFreeVar4', axiom, ![Vv, Vx, VT, Ve] : (visFreeVar(Vv, vabs(Vx, VT, Ve)) <=> ((Vx != Vv) & visFreeVar(Vv, Ve)))).
fof('isFreeVar5', axiom, ![Vv, Ve1, Ve2] : (visFreeVar(Vv, vapp(Ve1, Ve2)) <=> (visFreeVar(Vv, Ve1) | visFreeVar(Vv, Ve2)))).
fof('gensym-is-fresh', axiom, ![Ve, Vv] : ((vgensym(Ve) = Vv) => (~visFreeVar(Vv, Ve)))).
fof('isSomeType2', axiom, (~visSomeType(vnoType))).
fof('isSomeType3', axiom, ![Ve] : visSomeType(vsomeType(Ve))).
fof('getSomeType1', axiom, ![Ve] : (vgetSomeType(vsomeType(Ve)) = Ve)).
fof('lookup3', axiom, ![Vx] : (vlookup(Vx, vempty) = vnoType)).
fof('lookup4', axiom, ![Vx, Vy, VTy, VC] : ((Vx = Vy) => (vlookup(Vx, vbind(Vy, VTy, VC)) = vsomeType(VTy)))).
fof('lookup5', axiom, ![Vx, Vy, VTy, VC] : ((Vx != Vy) => (vlookup(Vx, vbind(Vy, VTy, VC)) = vlookup(Vx, VC)))).
fof('subst0', axiom, ![Vx, Vy, Ve] : ((Vx = Vy) => (vsubst(Vx, Ve, vvar(Vy)) = Ve))).
fof('subst1', axiom, ![Vx, Vy, Ve] : ((Vx != Vy) => (vsubst(Vx, Ve, vvar(Vy)) = vvar(Vy)))).
fof('subst2', axiom, ![Vx, Ve, Ve1, Ve2] : (vsubst(Vx, Ve, vapp(Ve1, Ve2)) = vapp(vsubst(Vx, Ve, Ve1), vsubst(Vx, Ve, Ve2)))).
fof('subst3', axiom, ![Vx, Vy, Ve, Ve1, VT] : ((Vx = Vy) => (vsubst(Vx, Ve, vabs(Vy, VT, Ve1)) = vabs(Vy, VT, Ve1)))).
fof('subst4', axiom, ![Vx, Vy, Ve, Ve1, Vfresh, VT] : (((Vx != Vy) & visFreeVar(Vy, Ve)) => (vsubst(Vx, Ve, vabs(Vy, VT, Ve1)) = vsubst(Vx, Ve, vabs(Vfresh, VT, vsubst(Vy, vvar(Vfresh), Ve1)))))).
fof('subst5', axiom, ![Vx, Vy, Ve, Ve1, VT] : (((Vx != Vy) & (~visFreeVar(Vy, Ve))) => (vsubst(Vx, Ve, vabs(Vy, VT, Ve1)) = vabs(Vy, VT, vsubst(Vx, Ve, Ve1))))).
fof('subst-INV', axiom, ![VVar0, VExp0, VExp1, VRESULT] : ((vsubst(VVar0, VExp0, VExp1) = VRESULT) => (?[Vx, Vy, Ve] : ((Vx = Vy) & (VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vvar(Vy)) & (VRESULT = Ve)) | ?[Vx, Vy, Ve] : ((Vx != Vy) & (VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vvar(Vy)) & (VRESULT = vvar(Vy))) | ?[Vx, Ve, Ve1, Ve2] : ((VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vapp(Ve1, Ve2)) & (VRESULT = vapp(vsubst(Vx, Ve, Ve1), vsubst(Vx, Ve, Ve2)))) | ?[Vx, Vy, Ve, Ve1, VT] : ((Vx = Vy) & (VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vabs(Vy, VT, Ve1)) & (VRESULT = vabs(Vy, VT, Ve1))) | ?[Vx, Vy, Ve, Ve1, Vfresh, VT] : ((Vx != Vy) & visFreeVar(Vy, Ve) & (VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vabs(Vy, VT, Ve1)) & (VRESULT = vsubst(Vx, Ve, vabs(Vfresh, VT, vsubst(Vy, vvar(Vfresh), Ve1))))) | ?[Vx, Vy, Ve, Ve1, VT] : ((Vx != Vy) & (~visFreeVar(Vy, Ve)) & (VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vabs(Vy, VT, Ve1)) & (VRESULT = vabs(Vy, VT, vsubst(Vx, Ve, Ve1))))))).
fof('alpha-equiv-refl', axiom, ![Ve] : valphaEquivalent(Ve, Ve)).
fof('alpha-equiv-sym', axiom, ![Ve1, Ve2] : (valphaEquivalent(Ve1, Ve2) => valphaEquivalent(Ve2, Ve1))).
fof('alpha-equiv-trans', axiom, ![Ve1, Ve2, Ve3] : ((valphaEquivalent(Ve1, Ve2) & valphaEquivalent(Ve2, Ve3)) => valphaEquivalent(Ve1, Ve3))).
fof('alpha-equiv-subst-abs', axiom, ![Vy, Ve, Vx, VS] : ((~visFreeVar(Vy, Ve)) => valphaEquivalent(vabs(Vx, VS, Ve), vabs(Vy, VS, vsubst(Vx, vvar(Vy), Ve))))).
fof('alpha-equiv-typing', axiom, ![VC, Ve, VT, Ve1] : ((vptcheck(VC, Ve, VT) & valphaEquivalent(Ve, Ve1)) => vptcheck(VC, Ve1, VT))).
fof('alpha-equiv-FreeVar', axiom, ![Vx, Ve, Ve1] : (((~visFreeVar(Vx, Ve)) & valphaEquivalent(Ve, Ve1)) => (~visFreeVar(Vx, Ve1)))).
fof('T-Weak-abs-1-gen', axiom, ![Vx, VS1, Vy, VC, Ve1, VT, VS] : (((Vx != Vy) & (vlookup(Vx, VC) = vnoType) & vptcheck(VC, vabs(Vy, VS1, Ve1), VT)) => vptcheck(vbind(Vx, VS, VC), vabs(Vy, VS1, Ve1), VT))).
fof('T-Weak-abs-2', conjecture, ![Vx, VS1, Vy, VC, VT, VS] : (((Vx = Vy) & (vlookup(Vx, VC) = vnoType) & vptcheck(VC, vabs(Vy, VS1, veabs), VT)) => vptcheck(vbind(Vx, VS, VC), vabs(Vy, VS1, veabs), VT))).
