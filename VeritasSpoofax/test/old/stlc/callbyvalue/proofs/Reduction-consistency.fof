fof('EQ-tvar', axiom, ![VVar0, VVar1] : ((vtvar(VVar0) = vtvar(VVar1)) => (VVar0 = VVar1))).
fof('EQ-tfun', axiom, ![VTyp0, VTyp1, VTyp2, VTyp3] : ((vtfun(VTyp0, VTyp1) = vtfun(VTyp2, VTyp3)) => ((VTyp0 = VTyp2) & (VTyp1 = VTyp3)))).
fof('DIFF-tvar-tfun', axiom, ![VVar0, VTyp0, VTyp1] : (vtvar(VVar0) != vtfun(VTyp0, VTyp1))).
fof('EQ-var', axiom, ![VVar0, VVar1] : ((vvar(VVar0) = vvar(VVar1)) => (VVar0 = VVar1))).
fof('EQ-abs', axiom, ![VExp1, VVar0, VVar1, VTyp1, VExp0, VTyp0] : ((vabs(VVar0, VTyp0, VExp0) = vabs(VVar1, VTyp1, VExp1)) => ((VVar0 = VVar1) & ((VTyp0 = VTyp1) & (VExp0 = VExp1))))).
fof('EQ-app', axiom, ![VExp0, VExp1, VExp2, VExp3] : ((vapp(VExp0, VExp1) = vapp(VExp2, VExp3)) => ((VExp0 = VExp2) & (VExp1 = VExp3)))).
fof('DIFF-var-abs', axiom, ![VVar0, VVar1, VTyp0, VExp0] : (vvar(VVar0) != vabs(VVar1, VTyp0, VExp0))).
fof('DIFF-var-app', axiom, ![VVar0, VExp0, VExp1] : (vvar(VVar0) != vapp(VExp0, VExp1))).
fof('DIFF-abs-app', axiom, ![VExp1, VVar0, VExp2, VExp0, VTyp0] : (vabs(VVar0, VTyp0, VExp0) != vapp(VExp1, VExp2))).
fof('isValue0', axiom, ![Vx, VS, Ve] : visValue(vabs(Vx, VS, Ve))).
fof('isValue1', axiom, ![Vx] : (![Vx0, VS0, Ve0] : (vvar(Vx) != vabs(Vx0, VS0, Ve0)) => (~visValue(vvar(Vx))))).
fof('isValue2', axiom, ![Ve1, Ve2] : ((![Vx0, VS0, Ve0] : (vapp(Ve1, Ve2) != vabs(Vx0, VS0, Ve0)) | ![Vx0] : (vapp(Ve1, Ve2) != vvar(Vx0))) => (~visValue(vapp(Ve1, Ve2))))).
fof('isValue-true-INV', axiom, ![VExp0] : (visValue(VExp0) => ?[Vx, VS, Ve] : (VExp0 = vabs(Vx, VS, Ve)))).
fof('isValue-false-INV', axiom, ![VExp0] : ((~visValue(VExp0)) => (?[Vx] : (![Vx0, VS0, Ve0] : (vvar(Vx) != vabs(Vx0, VS0, Ve0)) & (VExp0 = vvar(Vx))) | ?[Ve1, Ve2] : ((![Vx0, VS0, Ve0] : (vapp(Ve1, Ve2) != vabs(Vx0, VS0, Ve0)) | ![Vx0] : (vapp(Ve1, Ve2) != vvar(Vx0))) & (VExp0 = vapp(Ve1, Ve2)))))).
fof('isFreeVar0', axiom, ![Vv, Vx] : (visFreeVar(Vv, vvar(Vx)) <=> (Vx = Vv))).
fof('isFreeVar1', axiom, ![Vx, VT, Ve, Vv] : (![Vx0] : (vabs(Vx, VT, Ve) != vvar(Vx0)) => (visFreeVar(Vv, vabs(Vx, VT, Ve)) <=> ((Vx != Vv) & visFreeVar(Vv, Ve))))).
fof('isFreeVar2', axiom, ![Ve1, Ve2, Vv] : ((![Vx0] : (vapp(Ve1, Ve2) != vvar(Vx0)) | ![Vx0, VT0, Ve0] : (vapp(Ve1, Ve2) != vabs(Vx0, VT0, Ve0))) => (visFreeVar(Vv, vapp(Ve1, Ve2)) <=> (visFreeVar(Vv, Ve1) | visFreeVar(Vv, Ve2))))).
fof('isFreeVar-true-INV', axiom, ![VVar0, VExp0] : (visFreeVar(VVar0, VExp0) => (?[Vv, Vx] : ((VVar0 = Vv) & (VExp0 = vvar(Vx)) & (Vx = Vv)) | ?[Vx, VT, Ve, Vv] : (![Vx0] : (vabs(Vx, VT, Ve) != vvar(Vx0)) & (VVar0 = Vv) & (VExp0 = vabs(Vx, VT, Ve)) & ((Vx != Vv) & visFreeVar(Vv, Ve))) | ?[Ve1, Ve2, Vv] : ((![Vx0] : (vapp(Ve1, Ve2) != vvar(Vx0)) | ![Vx0, VT0, Ve0] : (vapp(Ve1, Ve2) != vabs(Vx0, VT0, Ve0))) & (VVar0 = Vv) & (VExp0 = vapp(Ve1, Ve2)) & (visFreeVar(Vv, Ve1) | visFreeVar(Vv, Ve2)))))).
fof('isFreeVar-false-INV', axiom, ![VVar0, VExp0] : ((~visFreeVar(VVar0, VExp0)) => (?[Vv, Vx] : ((VVar0 = Vv) & (VExp0 = vvar(Vx)) & (~(Vx = Vv))) | ?[Vx, VT, Ve, Vv] : (![Vx0] : (vabs(Vx, VT, Ve) != vvar(Vx0)) & (VVar0 = Vv) & (VExp0 = vabs(Vx, VT, Ve)) & (~((Vx != Vv) & visFreeVar(Vv, Ve)))) | ?[Ve1, Ve2, Vv] : ((![Vx0] : (vapp(Ve1, Ve2) != vvar(Vx0)) | ![Vx0, VT0, Ve0] : (vapp(Ve1, Ve2) != vabs(Vx0, VT0, Ve0))) & (VVar0 = Vv) & (VExp0 = vapp(Ve1, Ve2)) & (~(visFreeVar(Vv, Ve1) | visFreeVar(Vv, Ve2))))))).
fof('gensym-is-fresh', axiom, ![Ve, Vv] : ((vgensym(Ve) = Vv) => (~visFreeVar(Vv, Ve)))).
fof('EQ-bind', axiom, ![VCtx0, VCtx1, VVar0, VVar1, VTyp1, VTyp0] : ((vbind(VVar0, VTyp0, VCtx0) = vbind(VVar1, VTyp1, VCtx1)) => ((VVar0 = VVar1) & ((VTyp0 = VTyp1) & (VCtx0 = VCtx1))))).
fof('DIFF-empty-bind', axiom, ![VVar0, VTyp0, VCtx0] : (vempty != vbind(VVar0, VTyp0, VCtx0))).
fof('EQ-someType', axiom, ![VTyp0, VTyp1] : ((vsomeType(VTyp0) = vsomeType(VTyp1)) => (VTyp0 = VTyp1))).
fof('DIFF-noType-someType', axiom, ![VTyp0] : (vnoType != vsomeType(VTyp0))).
fof('isSomeType0', axiom, (~visSomeType(vnoType))).
fof('isSomeType1', axiom, ![Ve] : ((vsomeType(Ve) != vnoType) => visSomeType(vsomeType(Ve)))).
fof('isSomeType-true-INV', axiom, ![VOptTyp0] : (visSomeType(VOptTyp0) => ?[Ve] : ((vsomeType(Ve) != vnoType) & (VOptTyp0 = vsomeType(Ve))))).
fof('isSomeType-false-INV', axiom, ![VOptTyp0] : ((~visSomeType(VOptTyp0)) => (VOptTyp0 = vnoType))).
fof('getSomeType0', axiom, ![Ve] : (vgetSomeType(vsomeType(Ve)) = Ve)).
fof('lookup0', axiom, ![Vx] : (vlookup(Vx, vempty) = vnoType)).
fof('lookup1', axiom, ![Vy, VTy, VC, Vx] : (((vbind(Vy, VTy, VC) != vempty) & (Vx = Vy)) => (vlookup(Vx, vbind(Vy, VTy, VC)) = vsomeType(VTy)))).
fof('lookup2', axiom, ![Vy, VTy, VC, Vx] : (((vbind(Vy, VTy, VC) != vempty) & (Vx != Vy)) => (vlookup(Vx, vbind(Vy, VTy, VC)) = vlookup(Vx, VC)))).
fof('lookup-INV', axiom, ![VVar0, VCtx0, VRESULT] : ((vlookup(VVar0, VCtx0) = VRESULT) => (?[Vx] : ((VVar0 = Vx) & (VCtx0 = vempty) & (VRESULT = vnoType)) | ?[Vy, VTy, VC, Vx] : ((vbind(Vy, VTy, VC) != vempty) & (Vx = Vy) & (VVar0 = Vx) & (VCtx0 = vbind(Vy, VTy, VC)) & (VRESULT = vsomeType(VTy))) | ?[Vy, VTy, VC, Vx] : ((vbind(Vy, VTy, VC) != vempty) & (Vx != Vy) & (VVar0 = Vx) & (VCtx0 = vbind(Vy, VTy, VC)) & (VRESULT = vlookup(Vx, VC)))))).
fof('T-Context-Duplicate', axiom, ![Vx, VTx, Vy, Ve, VC, VTy, VT] : (((Vx = Vy) & vptcheck(vbind(Vx, VTx, vbind(Vy, VTy, VC)), Ve, VT)) => vptcheck(vbind(Vx, VTx, VC), Ve, VT))).
fof('T-Context-Swap', axiom, ![Vx, VTx, Vy, Ve, VC, VTy, VT] : (((Vx != Vy) & vptcheck(vbind(Vx, VTx, vbind(Vy, VTy, VC)), Ve, VT)) => vptcheck(vbind(Vy, VTy, vbind(Vx, VTx, VC)), Ve, VT))).
fof('subst0', axiom, ![Vx, Vy, Ve] : ((Vx = Vy) => (vsubst(Vx, Ve, vvar(Vy)) = Ve))).
fof('subst1', axiom, ![Vx, Vy, Ve] : ((Vx != Vy) => (vsubst(Vx, Ve, vvar(Vy)) = vvar(Vy)))).
fof('subst2', axiom, ![Ve1, Ve2, Vx, Ve] : (![Vy0] : (vapp(Ve1, Ve2) != vvar(Vy0)) => (vsubst(Vx, Ve, vapp(Ve1, Ve2)) = vapp(vsubst(Vx, Ve, Ve1), vsubst(Vx, Ve, Ve2))))).
fof('subst3', axiom, ![Vx, Vy, Ve, Ve1, VT] : (((![Vy0] : (vabs(Vy, VT, Ve1) != vvar(Vy0)) | ![Ve10, Ve20] : (vabs(Vy, VT, Ve1) != vapp(Ve10, Ve20))) & (Vx = Vy)) => (vsubst(Vx, Ve, vabs(Vy, VT, Ve1)) = vabs(Vy, VT, Ve1)))).
fof('subst4', axiom, ![Vx, Vy, Ve, Ve1, Vfresh, VT] : (((![Vy0] : (vabs(Vy, VT, Ve1) != vvar(Vy0)) | ![Ve10, Ve20] : (vabs(Vy, VT, Ve1) != vapp(Ve10, Ve20))) & (Vx != Vy) & visFreeVar(Vy, Ve)) => (vsubst(Vx, Ve, vabs(Vy, VT, Ve1)) = vsubst(Vx, Ve, vabs(Vfresh, VT, vsubst(Vy, vvar(Vfresh), Ve1)))))).
fof('subst5', axiom, ![Vx, Vy, Ve, Ve1, VT] : (((![Vy0] : (vabs(Vy, VT, Ve1) != vvar(Vy0)) | ![Ve10, Ve20] : (vabs(Vy, VT, Ve1) != vapp(Ve10, Ve20))) & (Vx != Vy) & (~visFreeVar(Vy, Ve))) => (vsubst(Vx, Ve, vabs(Vy, VT, Ve1)) = vabs(Vy, VT, vsubst(Vx, Ve, Ve1))))).
fof('subst-INV', axiom, ![VVar0, VExp0, VExp1, VRESULT] : ((vsubst(VVar0, VExp0, VExp1) = VRESULT) => (?[Vx, Vy, Ve] : ((Vx = Vy) & (VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vvar(Vy)) & (VRESULT = Ve)) | ?[Vx, Vy, Ve] : ((Vx != Vy) & (VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vvar(Vy)) & (VRESULT = vvar(Vy))) | ?[Ve1, Ve2, Vx, Ve] : (![Vy0] : (vapp(Ve1, Ve2) != vvar(Vy0)) & (VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vapp(Ve1, Ve2)) & (VRESULT = vapp(vsubst(Vx, Ve, Ve1), vsubst(Vx, Ve, Ve2)))) | ?[Vx, Vy, Ve, Ve1, VT] : ((![Vy0] : (vabs(Vy, VT, Ve1) != vvar(Vy0)) | ![Ve10, Ve20] : (vabs(Vy, VT, Ve1) != vapp(Ve10, Ve20))) & (Vx = Vy) & (VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vabs(Vy, VT, Ve1)) & (VRESULT = vabs(Vy, VT, Ve1))) | ?[Vx, Vy, Ve, Ve1, Vfresh, VT] : ((![Vy0] : (vabs(Vy, VT, Ve1) != vvar(Vy0)) | ![Ve10, Ve20] : (vabs(Vy, VT, Ve1) != vapp(Ve10, Ve20))) & (Vx != Vy) & visFreeVar(Vy, Ve) & (VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vabs(Vy, VT, Ve1)) & (VRESULT = vsubst(Vx, Ve, vabs(Vfresh, VT, vsubst(Vy, vvar(Vfresh), Ve1))))) | ?[Vx, Vy, Ve, Ve1, VT] : ((![Vy0] : (vabs(Vy, VT, Ve1) != vvar(Vy0)) | ![Ve10, Ve20] : (vabs(Vy, VT, Ve1) != vapp(Ve10, Ve20))) & (Vx != Vy) & (~visFreeVar(Vy, Ve)) & (VVar0 = Vx) & (VExp0 = Ve) & (VExp1 = vabs(Vy, VT, Ve1)) & (VRESULT = vabs(Vy, VT, vsubst(Vx, Ve, Ve1))))))).
fof('EQ-someExp', axiom, ![VExp0, VExp1] : ((vsomeExp(VExp0) = vsomeExp(VExp1)) => (VExp0 = VExp1))).
fof('DIFF-noExp-someExp', axiom, ![VExp0] : (vnoExp != vsomeExp(VExp0))).
fof('isSomeExp0', axiom, (~visSomeExp(vnoExp))).
fof('isSomeExp1', axiom, ![Ve] : ((vsomeExp(Ve) != vnoExp) => visSomeExp(vsomeExp(Ve)))).
fof('isSomeExp-true-INV', axiom, ![VOptExp0] : (visSomeExp(VOptExp0) => ?[Ve] : ((vsomeExp(Ve) != vnoExp) & (VOptExp0 = vsomeExp(Ve))))).
fof('isSomeExp-false-INV', axiom, ![VOptExp0] : ((~visSomeExp(VOptExp0)) => (VOptExp0 = vnoExp))).
fof('getSomeExp0', axiom, ![Ve] : (vgetSomeExp(vsomeExp(Ve)) = Ve)).
fof('reduce0', axiom, ![Vx] : (vreduce(vvar(Vx)) = vnoExp)).
fof('reduce1', axiom, ![Vx, VS, Ve] : (![Vx0] : (vabs(Vx, VS, Ve) != vvar(Vx0)) => (vreduce(vabs(Vx, VS, Ve)) = vnoExp))).
fof('reduce2', axiom, ![Vx, Ve1, VS, Ve2, Ve2red] : (((![Vx0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vvar(Vx0)) | ![Vx0, VS0, Ve0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vabs(Vx0, VS0, Ve0))) & (Ve2red = vreduce(Ve2)) & visSomeExp(Ve2red)) => (vreduce(vapp(vabs(Vx, VS, Ve1), Ve2)) = vsomeExp(vapp(vabs(Vx, VS, Ve1), vgetSomeExp(Ve2red)))))).
fof('reduce3', axiom, ![Vx, Ve1, VS, Ve2, Ve2red] : (((![Vx0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vvar(Vx0)) | ![Vx0, VS0, Ve0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vabs(Vx0, VS0, Ve0))) & (Ve2red = vreduce(Ve2)) & (~visSomeExp(Ve2red)) & visValue(Ve2)) => (vreduce(vapp(vabs(Vx, VS, Ve1), Ve2)) = vsomeExp(vsubst(Vx, Ve2, Ve1))))).
fof('reduce4', axiom, ![Vx, Ve1, VS, Ve2, Ve2red] : (((![Vx0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vvar(Vx0)) | ![Vx0, VS0, Ve0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vabs(Vx0, VS0, Ve0))) & (Ve2red = vreduce(Ve2)) & (~visSomeExp(Ve2red)) & (~visValue(Ve2))) => (vreduce(vapp(vabs(Vx, VS, Ve1), Ve2)) = vnoExp))).
fof('reduce5', axiom, ![Ve1, Ve2, Ve1red] : (((![Vx0] : (vapp(Ve1, Ve2) != vvar(Vx0)) | ![Vx0, VS0, Ve0] : (vapp(Ve1, Ve2) != vabs(Vx0, VS0, Ve0)) | ![Vx0, VS0, Ve10, Ve20] : (vapp(Ve1, Ve2) != vapp(vabs(Vx0, VS0, Ve10), Ve20))) & (Ve1red = vreduce(Ve1)) & visSomeExp(Ve1red)) => (vreduce(vapp(Ve1, Ve2)) = vsomeExp(vapp(vgetSomeExp(Ve1red), Ve2))))).
fof('reduce6', axiom, ![Ve1, Ve2, Ve1red] : (((![Vx0] : (vapp(Ve1, Ve2) != vvar(Vx0)) | ![Vx0, VS0, Ve0] : (vapp(Ve1, Ve2) != vabs(Vx0, VS0, Ve0)) | ![Vx0, VS0, Ve10, Ve20] : (vapp(Ve1, Ve2) != vapp(vabs(Vx0, VS0, Ve10), Ve20))) & (Ve1red = vreduce(Ve1)) & (~visSomeExp(Ve1red))) => (vreduce(vapp(Ve1, Ve2)) = vnoExp))).
fof('reduce-INV', axiom, ![VExp0, VRESULT] : ((vreduce(VExp0) = VRESULT) => (?[Vx] : ((VExp0 = vvar(Vx)) & (VRESULT = vnoExp)) | ?[Vx, VS, Ve] : (![Vx0] : (vabs(Vx, VS, Ve) != vvar(Vx0)) & (VExp0 = vabs(Vx, VS, Ve)) & (VRESULT = vnoExp)) | ?[Vx, Ve1, VS, Ve2, Ve2red] : ((![Vx0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vvar(Vx0)) | ![Vx0, VS0, Ve0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vabs(Vx0, VS0, Ve0))) & (Ve2red = vreduce(Ve2)) & visSomeExp(Ve2red) & (VExp0 = vapp(vabs(Vx, VS, Ve1), Ve2)) & (VRESULT = vsomeExp(vapp(vabs(Vx, VS, Ve1), vgetSomeExp(Ve2red))))) | ?[Vx, Ve1, VS, Ve2, Ve2red] : ((![Vx0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vvar(Vx0)) | ![Vx0, VS0, Ve0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vabs(Vx0, VS0, Ve0))) & (Ve2red = vreduce(Ve2)) & (~visSomeExp(Ve2red)) & visValue(Ve2) & (VExp0 = vapp(vabs(Vx, VS, Ve1), Ve2)) & (VRESULT = vsomeExp(vsubst(Vx, Ve2, Ve1)))) | ?[Vx, Ve1, VS, Ve2, Ve2red] : ((![Vx0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vvar(Vx0)) | ![Vx0, VS0, Ve0] : (vapp(vabs(Vx, VS, Ve1), Ve2) != vabs(Vx0, VS0, Ve0))) & (Ve2red = vreduce(Ve2)) & (~visSomeExp(Ve2red)) & (~visValue(Ve2)) & (VExp0 = vapp(vabs(Vx, VS, Ve1), Ve2)) & (VRESULT = vnoExp)) | ?[Ve1, Ve2, Ve1red] : ((![Vx0] : (vapp(Ve1, Ve2) != vvar(Vx0)) | ![Vx0, VS0, Ve0] : (vapp(Ve1, Ve2) != vabs(Vx0, VS0, Ve0)) | ![Vx0, VS0, Ve10, Ve20] : (vapp(Ve1, Ve2) != vapp(vabs(Vx0, VS0, Ve10), Ve20))) & (Ve1red = vreduce(Ve1)) & visSomeExp(Ve1red) & (VExp0 = vapp(Ve1, Ve2)) & (VRESULT = vsomeExp(vapp(vgetSomeExp(Ve1red), Ve2)))) | ?[Ve1, Ve2, Ve1red] : ((![Vx0] : (vapp(Ve1, Ve2) != vvar(Vx0)) | ![Vx0, VS0, Ve0] : (vapp(Ve1, Ve2) != vabs(Vx0, VS0, Ve0)) | ![Vx0, VS0, Ve10, Ve20] : (vapp(Ve1, Ve2) != vapp(vabs(Vx0, VS0, Ve10), Ve20))) & (Ve1red = vreduce(Ve1)) & (~visSomeExp(Ve1red)) & (VExp0 = vapp(Ve1, Ve2)) & (VRESULT = vnoExp))))).
fof('FALSE', conjecture, $false).
