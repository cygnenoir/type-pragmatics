module stlca.callbyvalue.Reduction

import stlca.Syntax
import stlca.Subst

sorts
	OptExp

constructors
	noExp : OptExp
	someExp : Exp -> OptExp

function
isSomeExp : OptExp -> Bool
isSomeExp(noExp) = false
isSomeExp(someExp(e)) = true

partial function
getSomeExp : OptExp -> Exp
getSomeExp(someExp(e)) = e

function
reduce : Exp -> OptExp
reduce(True) = noExp
reduce(False) = noExp
reduce(Zero) = noExp
reduce(succ(e)) =
	if isNum(e)
	then noExp
	else let ered = reduce(e) in
        if isSomeExp(ered)
        then someExp(succ(getSomeExp(ered)))
        else noExp
reduce(pred(succ(e))) =
	if isNum(e)
	then someExp(e)
	else let ered = reduce(e) in 
	    if isSomeExp(ered)
	    then someExp(pred(succ(getSomeExp(ered))))
	    else noExp
reduce(pred(Zero)) = someExp(Zero)
reduce(pred(e)) = let ered = reduce(e) in
    if isSomeExp(ered)
    then someExp(pred(getSomeExp(ered)))
    else noExp
reduce(isZero(Zero)) = someExp(True)
reduce(isZero(e)) =
	if isValue(e)
	then someExp(False)
	else let ered = reduce(e) in
        if isSomeExp(ered)
        then someExp(isZero(getSomeExp(ered)))
        else noExp
// reduce(True) = noExp
// reduce(False) = noExp
// reduce(Zero) = noExp
// reduce(succ(e)) = noExp
// reduce(pred(e)) = noExp
// reduce(isZero(e)) = noExp
reduce(var(x)) = noExp
reduce(abs(x, S, e)) = noExp
reduce(app(abs(x, S, e1), e2)) = let e2red = reduce(e2) in
	if isSomeExp(e2red)
	then someExp(app(abs(x, S, e1), getSomeExp(e2red)))
	else 
		if isValue(e2)
		then someExp(subst(x, e2, e1))
		else noExp
reduce(app(e1, e2)) = let e1red = reduce(e1) in
  if isSomeExp(e1red)
  then someExp(app(getSomeExp(e1red), e2))
  else noExp
reduce(e) = noExp


lemma
~e == succ(~e1)
reduce(~e) == ~res
========================== reduce-CODOM-succ
OR
=> ~res == noExp
=> exists ~e2
	~res == someExp(~e2)

lemma
~e == pred(~e1)
reduce(~e) == ~res
========================== reduce-CODOM-pred
OR
=> ~res == noExp
=> exists ~e2
	~res == someExp(~e2)

lemma
~e == isZero(~e1)
reduce(~e) == ~res
========================== reduce-CODOM-isZero
OR
=> ~res == noExp
=> exists ~e2
	~res == someExp(~e2)

lemma
~e == app(~e1, ~e3)
reduce(~e) == ~res
========================== reduce-CODOM-app
OR
=> ~res == noExp
=> exists ~e2
	~res == someExp(~e2)

lemma
reduce(~e) == ~res
========================== reduce-CODOM
OR
=> ~res == noExp
=> exists ~e2
	~res == someExp(~e2)

