module stlc2.SubstLemmaAux

import stlc2.Syntax
import stlc2.Context
import stlc2.Subst
import stlc2.AlphaEquivalence
import stlc2.Types


//Auxiliary lemmas for on contexts

//Proof by structural induction

// local {
// 	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-pred, T-inv-isZero, T-inv-True, T-inv-False, T-inv-Zero, T-app, T-abs, T-succ, T-pred, T-isZero, T-true, T-false, T-zero }
// 	
// 	goal
// 	~e == var(~y)
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	=========================== T-Weak-FreeVar-var
// 	bind(~x, ~S, ~C) |-  ~e : ~T
// }
// 
// local {
// 	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-pred, T-inv-isZero, T-inv-var, T-inv-False, T-inv-Zero, T-app, T-abs, T-succ, T-pred, T-isZero, T-var, T-false, T-zero }
// 
// 	goal
// 	~e == True
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	=========================== T-Weak-FreeVar-True
// 	bind(~x, ~S, ~C) |-  ~e : ~T
// }
// 
// local {
// 	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-pred, T-inv-isZero, T-inv-True, T-inv-var, T-inv-Zero, T-app, T-abs, T-succ, T-pred, T-isZero, T-true, T-var, T-zero }
// 
// 	goal
// 	~e == False
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	=========================== T-Weak-FreeVar-False
// 	bind(~x, ~S, ~C) |-  ~e : ~T
// }
// 
// local {
// 	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-pred, T-inv-isZero, T-inv-True, T-inv-False, T-inv-var, T-app, T-abs, T-succ, T-pred, T-isZero, T-true, T-false, T-var }
// 
// 	goal
// 	~e == Zero
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	=========================== T-Weak-FreeVar-Zero
// 	bind(~x, ~S, ~C) |-  ~e : ~T
// }
// 
// local {
// 	hide { T-inv, T-inv-app, T-inv-abs, T-inv-var, T-inv-pred, T-inv-isZero, T-inv-True, T-inv-False, T-inv-Zero, T-app, T-abs, T-var, T-pred, T-isZero, T-true, T-false, T-zero }
// 
// 	const esucc : Exp
// 	
// 	axiom
// 	!isFreeVar(~x, esucc)
// 	~C |- esucc : ~T
// 	============================== T-Weak-FreeVar-succ-IH
// 	bind(~x, ~S, ~C) |- esucc : ~T
// 	
// 	goal
// 	~e == succ(esucc)
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	============================== T-Weak-FreeVar-succ
// 	bind(~x, ~S, ~C) |- ~e : ~T
// }
// 
// local {
// 	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-var, T-inv-isZero, T-inv-True, T-inv-False, T-inv-Zero, T-app, T-abs, T-succ, T-var, T-isZero, T-true, T-false, T-zero }
// 
// 	const epred : Exp
// 	
// 	axiom
// 	!isFreeVar(~x, epred)
// 	~C |- epred : ~T
// 	============================== T-Weak-FreeVar-pred-IH
// 	bind(~x, ~S, ~C) |- epred : ~T
// 	
// 	goal
// 	~e == pred(epred)
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	============================== T-Weak-FreeVar-pred
// 	bind(~x, ~S, ~C) |- ~e : ~T
// }
// 
// local {
// 	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-pred, T-inv-var, T-inv-True, T-inv-False, T-inv-Zero, T-app, T-abs, T-succ, T-pred, T-var, T-true, T-false, T-zero }
// 
// 	const eisZero : Exp
// 	
// 	axiom
// 	!isFreeVar(~x, eisZero)
// 	~C |- eisZero : ~T
// 	============================== T-Weak-FreeVar-isZero-IH
// 	bind(~x, ~S, ~C) |- eisZero : ~T
// 	
// 	goal
// 	~e == isZero(eisZero)
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	============================== T-Weak-FreeVar-isZero
// 	bind(~x, ~S, ~C) |- ~e : ~T
// }
// 
// local {
// 	const eabs : Exp
// 
// 	axiom
// 	!isFreeVar(~x, eabs)
// 	~C |- eabs : ~T
// 	============================== T-Weak-FreeVar-abs-IH
// 	bind(~x, ~S, ~C) |- eabs : ~T
// 	
// 	goal
// 	~e == abs(~y, ~S1, eabs)
// 	~x != ~y
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	============================== T-Weak-FreeVar-abs-1
// 	bind(~x, ~S, ~C) |- ~e : ~T
// }
// 
// local {
// 	const eabs : Exp
// 	
// 	axiom
// 	~e == abs(~y, ~S1, ~e1)
// 	~x != ~y
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	============================== T-Weak-FreeVar-abs-1
// 	bind(~x, ~S, ~C) |- ~e : ~T
// 	
// 	
// 	//necessary axioms on alpha equivalence
// 	axioms
// 	============================ alpha-equiv-refl
// 	alphaEquivalent(~e, ~e)
// 
// 
// 	alphaEquivalent(~e1, ~e2)
// 	============================ alpha-equiv-sym
// 	alphaEquivalent(~e2, ~e1)
// 
//  
// 	alphaEquivalent(~e1, ~e2)
// 	alphaEquivalent(~e2, ~e3)
// 	============================ alpha-equiv-trans
// 	alphaEquivalent(~e1, ~e3)
// 
// 	!isFreeVar(~y, ~e)
// 	====================================================================== alpha-equiv-subst-abs
// 	alphaEquivalent(abs(~x, ~S, ~e), abs(~y, ~S, subst(~x, var(~y), ~e)))
// 
// 
// 	~C |- ~e : ~T
// 	alphaEquivalent(~e, ~e1)
// 	========================= alpha-equiv-typing
// 	~C |- ~e1 : ~T
// 	
// 	!isFreeVar(~x, ~e)
// 	alphaEquivalent(~e, ~e1)
// 	========================= alpha-equiv-FreeVar
// 	!isFreeVar(~x, ~e1)
// 
// 	//NOT needed!
// 	axiom
// 	!isFreeVar(~x, eabs)
// 	~C |- eabs : ~T
// 	============================== T-Weak-FreeVar-abs-IH
// 	bind(~x, ~S, ~C) |- eabs : ~T
// 
// 	goal
// 	~e == abs(~y, ~S1, eabs)
// 	~x == ~y
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	============================== T-Weak-FreeVar-abs-2
// 	bind(~x, ~S, ~C) |- ~e : ~T
// }
// 
// local {
// 	consts
// 		e1app : Exp
// 		e2app : Exp
// 		
// 	axioms
// 	!isFreeVar(~x, e1app)
// 	~C |- e1app : ~T
// 	=============================== T-Weak-FreeVar-app-IH1
// 	bind(~x, ~S, ~C) |- e1app : ~T
// 	
// 	!isFreeVar(~x, e2app)
// 	~C |- e2app : ~T
// 	=============================== T-Weak-FreeVar-app-IH2
// 	bind(~x, ~S, ~C) |- e2app : ~T
// 	
// 	goal
// 	~e == app(e1app, e2app)
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	============================== T-Weak-FreeVar-app
// 	bind(~x, ~S, ~C) |- ~e : ~T
// }


local {
	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-pred, T-inv-isZero, T-inv-True, T-inv-False, T-inv-Zero, T-app, T-abs, T-succ, T-pred, T-isZero, T-true, T-false, T-zero }
	
	goal
	!isFreeVar(~x, var(~y))
	~C |- var(~y) : ~T
	=========================== T-Weak-FreeVar-var
	bind(~x, ~S, ~C) |- var(~y) : ~T
}

local {
	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-pred, T-inv-isZero, T-inv-var, T-inv-False, T-inv-Zero, T-app, T-abs, T-succ, T-pred, T-isZero, T-var, T-false, T-zero }

	goal
	~e == True
	!isFreeVar(~x, True)
	~C |- True : ~T
	=========================== T-Weak-FreeVar-True
	bind(~x, ~S, ~C) |- True : ~T
}

local {
	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-pred, T-inv-isZero, T-inv-True, T-inv-var, T-inv-Zero, T-app, T-abs, T-succ, T-pred, T-isZero, T-true, T-var, T-zero }

	goal
	!isFreeVar(~x, False)
	~C |- False : ~T
	=========================== T-Weak-FreeVar-False
	bind(~x, ~S, ~C) |- False : ~T
}

local {
	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-pred, T-inv-isZero, T-inv-True, T-inv-False, T-inv-var, T-app, T-abs, T-succ, T-pred, T-isZero, T-true, T-false, T-var }

	goal
	!isFreeVar(~x, Zero)
	~C |- Zero : ~T
	=========================== T-Weak-FreeVar-Zero
	bind(~x, ~S, ~C) |- Zero : ~T
}

local {
	hide { T-inv, T-inv-app, T-inv-abs, T-inv-var, T-inv-pred, T-inv-isZero, T-inv-True, T-inv-False, T-inv-Zero, T-app, T-abs, T-var, T-pred, T-isZero, T-true, T-false, T-zero }

	const esucc : Exp
	
	axiom
	!isFreeVar(~x, esucc)
	~C |- esucc : ~T
	============================== T-Weak-FreeVar-succ-IH
	bind(~x, ~S, ~C) |- esucc : ~T
	
	goal
	!isFreeVar(~x, succ(esucc))
	~C |- succ(esucc) : ~T
	============================== T-Weak-FreeVar-succ
	bind(~x, ~S, ~C) |- succ(esucc) : ~T
}

local {
	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-var, T-inv-isZero, T-inv-True, T-inv-False, T-inv-Zero, T-app, T-abs, T-succ, T-var, T-isZero, T-true, T-false, T-zero }

	
	const epred : Exp
	
	axiom
	!isFreeVar(~x, epred)
	~C |- epred : ~T
	============================== T-Weak-FreeVar-pred-IH
	bind(~x, ~S, ~C) |- epred : ~T
	
	goal
	!isFreeVar(~x, pred(epred))
	~C |- pred(epred) : ~T
	============================== T-Weak-FreeVar-pred
	bind(~x, ~S, ~C) |- pred(epred) : ~T
}

local {
	hide { T-inv, T-inv-app, T-inv-abs, T-inv-succ, T-inv-pred, T-inv-var, T-inv-True, T-inv-False, T-inv-Zero, T-app, T-abs, T-succ, T-pred, T-var, T-true, T-false, T-zero }

	
	const eisZero : Exp
	
	axiom
	!isFreeVar(~x, eisZero)
	~C |- eisZero : ~T
	============================== T-Weak-FreeVar-isZero-IH
	bind(~x, ~S, ~C) |- eisZero : ~T
	
	goal
	!isFreeVar(~x, isZero(eisZero))
	~C |- isZero(eisZero) : ~T
	============================== T-Weak-FreeVar-isZero
	bind(~x, ~S, ~C) |- isZero(eisZero) : ~T
}

local {
	hide { T-inv, T-inv-app, T-inv-var, T-inv-succ, T-inv-pred, T-inv-isZero, T-inv-True, T-inv-False, T-inv-Zero, T-app, T-var, T-succ, T-pred, T-isZero, T-true, T-false, T-zero }

	
	const eabs : Exp

	axiom
	!isFreeVar(~x, eabs)
	~C |- eabs : ~T
	============================== T-Weak-FreeVar-abs-IH
	bind(~x, ~S, ~C) |- eabs : ~T
	
	goal
	~x != ~y
	!isFreeVar(~x, abs(~y, ~S1, eabs))
	~C |- abs(~y, ~S1, eabs) : ~T
	============================= T-Weak-FreeVar-abs-1
	bind(~x, ~S, ~C) |- abs(~y, ~S1, eabs) : ~T
}

local {
	hide { T-inv, T-inv-app, T-inv-var, T-inv-succ, T-inv-pred, T-inv-isZero, T-inv-True, T-inv-False, T-inv-Zero, T-app, T-var, T-succ, T-pred, T-isZero, T-true, T-false, T-zero }

	
	const eabs : Exp
	
	axiom
	~x != ~y
	!isFreeVar(~x, abs(~y, ~S1, ~e1))
	~C |- abs(~y, ~S1, ~e1) : ~T
	============================= T-Weak-FreeVar-abs-1
	bind(~x, ~S, ~C) |- abs(~y, ~S1, ~e1) : ~T
	
	
	//necessary axioms on alpha equivalence
	axioms
	============================ alpha-equiv-refl
	alphaEquivalent(~e, ~e)


	alphaEquivalent(~e1, ~e2)
	============================ alpha-equiv-sym
	alphaEquivalent(~e2, ~e1)

 
	alphaEquivalent(~e1, ~e2)
	alphaEquivalent(~e2, ~e3)
	============================ alpha-equiv-trans
	alphaEquivalent(~e1, ~e3)

	!isFreeVar(~y, ~e)
	====================================================================== alpha-equiv-subst-abs
	alphaEquivalent(abs(~x, ~S, ~e), abs(~y, ~S, subst(~x, var(~y), ~e)))


	~C |- ~e : ~T
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-typing
	~C |- ~e1 : ~T
	
	!isFreeVar(~x, ~e)
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-FreeVar
	!isFreeVar(~x, ~e1)

	//NOT needed!
	axiom
	!isFreeVar(~x, eabs)
	~C |- eabs : ~T
	============================== T-Weak-FreeVar-abs-IH
	bind(~x, ~S, ~C) |- eabs : ~T

	goal
	~x == ~y
	!isFreeVar(~x, abs(~y, ~S1, eabs))
	~C |- abs(~y, ~S1, eabs) : ~T
	============================ T-Weak-FreeVar-abs-2
	bind(~x, ~S, ~C) |- abs(~y, ~S1, eabs) : ~T
}

local {
	hide { T-inv, T-inv-var, T-inv-abs, T-inv-succ, T-inv-pred, T-inv-isZero, T-inv-True, T-inv-False, T-inv-Zero, T-var, T-abs, T-succ, T-pred, T-isZero, T-true, T-false, T-zero }

	consts
		e1app : Exp
		e2app : Exp
		
	axioms
	!isFreeVar(~x, e1app)
	~C |- e1app : ~T
	=============================== T-Weak-FreeVar-app-IH1
	bind(~x, ~S, ~C) |- e1app : ~T
	
	!isFreeVar(~x, e2app)
	~C |- e2app : ~T
	=============================== T-Weak-FreeVar-app-IH2
	bind(~x, ~S, ~C) |- e2app : ~T
	
	goal
	!isFreeVar(~x, app(e1app, e2app))
	~C |- app(e1app, e2app) : ~T
	=========================== T-Weak-FreeVar-app
	bind(~x, ~S, ~C) |- app(e1app, e2app) : ~T
}

