module stlc2.SubstLemma

import stlc2.Subst
import stlc2.Syntax
import stlc2.Context
import stlc2.Types
import stlc2.Gensym
import stlc2.AlphaEquivalence
import stlc2.SubstLemmaAux

// local {
// 	lemma
// 	~e2 == var(~y)
// 	~x == ~y
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	============================== T-subst-var-1
// 	~C |- subst(~x, ~e, ~e2) : ~T2
// 	
// 	lemma
// 	~e2 == var(~y)
// 	~x != ~y
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	============================== T-subst-var-2
// 	~C |- subst(~x, ~e, ~e2) : ~T2
// 	
// 	goal
// 	~e2 == var(~y)
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	============================== T-subst-var
// 	~C |- subst(~x, ~e, ~e2) : ~T2
// }
// 
// goal
// ~e2 == True
// ~C |- ~e : ~T
// bind(~x, ~T, ~C) |- ~e2 : ~T2
// ============================== T-subst-true
// ~C |- subst(~x, ~e, ~e2) : ~T2
// 
// goal
// ~e2 == False
// ~C |- ~e : ~T
// bind(~x, ~T, ~C) |- ~e2 : ~T2
// ============================== T-subst-false
// ~C |- subst(~x, ~e, ~e2) : ~T2
// 
// goal
// ~e2 == Zero
// ~C |- ~e : ~T
// bind(~x, ~T, ~C) |- ~e2 : ~T2
// ============================== T-subst-zero
// ~C |- subst(~x, ~e, ~e2) : ~T2
// 
// local {
// 	const esucc : Exp
// 	
// 	axiom
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- esucc : ~T2
// 	================================ T-subst-IH-succ
// 	~C |- subst(~x, ~e, esucc) : ~T2
// 	
// 	goal
// 	~e2 == succ(esucc)
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	============================== T-subst-succ
// 	~C |- subst(~x, ~e, ~e2) : ~T2
// }
// 
// local {
// 	const epred : Exp
// 	
// 	axiom
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- epred : ~T2
// 	================================ T-subst-IH-pred
// 	~C |- subst(~x, ~e, epred) : ~T2
// 	
// 	goal
// 	~e2 == pred(epred)
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	============================== T-subst-pred
// 	~C |- subst(~x, ~e, ~e2) : ~T2
// }
// 
// local {
// 	const eisZero : Exp
// 	
// 	axiom
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- eisZero : ~T2
// 	================================ T-subst-IH-isZero
// 	~C |- subst(~x, ~e, eisZero) : ~T2
// 	
// 	goal
// 	~e2 == isZero(eisZero)
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	============================== T-subst-isZero
// 	~C |- subst(~x, ~e, ~e2) : ~T2
// }
// 
// local {
// 	consts
// 		e1app : Exp
// 		e2app : Exp
// 	
// 	axioms
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- e1app : ~T2
// 	================================ T-subst-IH-app1
// 	~C |- subst(~x, ~e, e1app) : ~T2
// 	
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- e2app : ~T2
// 	================================ T-subst-IH-app2
// 	~C |- subst(~x, ~e, e2app) : ~T2
// 
// 	lemma
// 	~e2 == app(e1app, e2app)
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	============================== T-subst-app-use-INV
// 	exists ~S
// 	  bind(~x, ~T, ~C) |- e1app : arrow(~S, ~T2)
// 	  bind(~x, ~T, ~C) |- e2app : ~S
// 
// 	lemma
// 	~e2 == app(e1app, e2app)
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	============================== T-subst-app-use-IH
// 	exists ~S
// 	  ~C |- subst(~x, ~e, e1app) : arrow(~S, ~T2)
// 	  ~C |- subst(~x, ~e, e2app) : ~S
// 	
// 	goal
// 	~e2 == app(e1app, e2app)
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	============================== T-subst-app
// 	~C |- subst(~x, ~e, ~e2) : ~T2
// }
// 
// goal
// ~e2 == abs(~y, ~S, ~e1)
// ~x == ~y
// ~C |- ~e : ~T
// bind(~x, ~T, ~C) |- ~e2 : ~T2
// ============================== T-subst-abs-1
// ~C |- subst(~x, ~e, ~e2) : ~T2
// 
// 
// local {
// 	const eabs : Exp
// 	
// 	//Lemma must be used locally only here! Proof is in SubstLemmaAux.stl
// 	
// 	axiom
// 	!isFreeVar(~x, ~e)
// 	~C |- ~e : ~T
// 	=========================== T-Weak-FreeVar
// 	bind(~x, ~S, ~C) |- ~e : ~T
// 	
// 	axiom
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- eabs : ~T2
// 	============================== T-subst-IH-abs
// 	~C |- subst(~x, ~e, eabs) : ~T2
// 
// 	goal
// 	~e2 == abs(~y, ~S, eabs)
// 	~x != ~y
// 	!isFreeVar(~y, ~e)
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	================================================= T-subst-abs-2
// 	~C |- subst(~x, ~e, ~e2) : ~T2
// }
// 
// local {
// 	const eabs : Exp
// 	
// 	axiom
// 	~e2 == abs(~y, ~S, ~e1)
// 	~x != ~y
// 	!isFreeVar(~y, ~e)
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	================================================= T-subst-abs-2
// 	~C |- subst(~x, ~e, ~e2) : ~T2
// 	
// 	//necessary axioms on alpha equivalence
// 	axioms
// 	============================ alpha-equiv-refl
// 	alphaEquivalent(~e, ~e)
// 
// 
// 	alphaEquivalent(~e1, ~e2)
// 	============================ alpha-equiv-sym
// 	alphaEquivalent(~e2, ~e1)
// 
//  
// 	alphaEquivalent(~e1, ~e2)
// 	alphaEquivalent(~e2, ~e3)
// 	============================ alpha-equiv-trans
// 	alphaEquivalent(~e1, ~e3)
// 	
// 	!isFreeVar(~y, ~e)
// 	====================================================================== alpha-equiv-subst-abs
// 	alphaEquivalent(abs(~x, ~S, ~e), abs(~y, ~S, subst(~x, var(~y), ~e)))
// 
// 
// 	~C |- ~e : ~T
// 	alphaEquivalent(~e, ~e1)
// 	========================= alpha-equiv-typing
// 	~C |- ~e1 : ~T
// 	
// 	//auxiliary lemma which is needed in this case, but can also be proven
// 	lemma
// 	~fresh == gensym(app(app(~e, ~e1), var(~x)))
// 	============================================= fresh-unequal-var-3
// 	~x != ~fresh
// 	
// 	//another auxiliary lemma which is needed in this case, but can also be proven
// 	lemma
// 	~fresh == gensym(app(app(~e, ~e1), var(~x)))
// 	============================================= fresh-free-2
// 	!isFreeVar(~fresh, ~e1)
// 		
// 	axiom //not needed
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- eabs : ~T2
// 	============================== T-subst-IH-abs
// 	~C |- subst(~x, ~e, eabs) : ~T2
// 	
// 	goal
// 	~e2 == abs(~y, ~S, eabs)
// 	~x != ~y
// 	isFreeVar(~y, ~e)
// 	~C |- ~e : ~T
// 	bind(~x, ~T, ~C) |- ~e2 : ~T2
// 	================================================= T-subst-abs-3
// 	~C |- subst(~x, ~e, ~e2) : ~T2
// }


local {
	hide-all
	include { T-inv-var, T-var, lookup0, lookup1, lookup2, getSomeType0, subst6, subst7, isFreeVar6, T-Weak-FreeVar, T-Strong, T-Context-Duplicate, T-Context-Swap }
	goal
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- var(~y) : ~T2
	============================== T-subst-var
	~C |- subst(~x, ~e, var(~y)) : ~T2
}

local {
	hide-all
	include { T-inv-True, T-true, subst0, isFreeVar0, T-Strong, T-Context-Duplicate, T-Context-Swap }
	goal
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- True : ~T2
	============================== T-subst-true
	~C |- subst(~x, ~e, True) : ~T2
}

local {
	hide-all
	include { T-inv-False, T-false, subst1, isFreeVar1, T-Strong, T-Context-Duplicate, T-Context-Swap }
	goal
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- False : ~T2
	============================== T-subst-false
	~C |- subst(~x, ~e, False) : ~T2
}

local {
	hide-all
	include { T-inv-Zero, T-zero, subst2, isFreeVar2, T-Strong, T-Context-Duplicate, T-Context-Swap }
	goal
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- Zero : ~T2
	============================== T-subst-zero
	~C |- subst(~x, ~e, Zero) : ~T2
}

local {
	hide-all
	include { T-inv-succ, T-succ, subst3, isFreeVar3, T-Strong, T-Context-Duplicate, T-Context-Swap }
	const esucc : Exp
	
	axiom
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- esucc : ~T2
	================================ T-subst-IH-succ
	~C |- subst(~x, ~e, esucc) : ~T2
	
	goal
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- succ(esucc) : ~T2
	============================== T-subst-succ
	~C |- subst(~x, ~e, succ(esucc)) : ~T2
}

local {
	hide-all
	include { T-inv-pred, T-pred, subst4, isFreeVar4, T-Strong, T-Context-Duplicate, T-Context-Swap }
	
	const epred : Exp
	
	axiom
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- epred : ~T2
	================================ T-subst-IH-pred
	~C |- subst(~x, ~e, epred) : ~T2
	
	goal
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- pred(epred) : ~T2
	============================== T-subst-pred
	~C |- subst(~x, ~e, pred(epred)) : ~T2
}

local {
	hide-all
	include { T-inv-isZero, T-isZero, subst5, isFreeVar5, T-Strong, T-Context-Duplicate, T-Context-Swap }
	
	const eisZero : Exp
	
	axiom
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- eisZero : ~T2
	================================ T-subst-IH-isZero
	~C |- subst(~x, ~e, eisZero) : ~T2
	
	goal
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- isZero(eisZero) : ~T2
	============================== T-subst-isZero
	~C |- subst(~x, ~e, isZero(eisZero)) : ~T2
}

local {
	hide-all
	include { T-inv-app, T-app, subst8, isFreeVar8, T-Strong, T-Context-Duplicate, T-Context-Swap }
	
	consts
		e1app : Exp
		e2app : Exp
	
	axioms
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e1app : ~T2
	================================ T-subst-IH-app1
	~C |- subst(~x, ~e, e1app) : ~T2
	
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e2app : ~T2
	================================ T-subst-IH-app2
	~C |- subst(~x, ~e, e2app) : ~T2

	goal
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- app(e1app, e2app) : ~T2
	============================== T-subst-app
	~C |- subst(~x, ~e, app(e1app, e2app)) : ~T2
}
local {
	hide-all
	include { T-abs-inv, T-abs, subst9, isFreeVar7, T-Weak-FreeVar, T-Strong, T-Context-Duplicate, T-Context-Swap }
	
	goal
	~x == ~y
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- abs(~y, ~S, ~e1) : ~T2
	============================== T-subst-abs-1
	~C |- subst(~x, ~e, abs(~y, ~S, ~e1)) : ~T2
}

local {
	hide-all
	include { T-inv-abs, T-abs, subst11, isFreeVar7, T-Strong, T-Context-Duplicate, T-Context-Swap }
	
	const eabs : Exp
	
	//Lemma must be used locally only here! Proof is in SubstLemmaAux.stl
	
	axiom
	!isFreeVar(~x, ~e)
	~C |- ~e : ~T
	=========================== T-Weak-FreeVar
	bind(~x, ~S, ~C) |- ~e : ~T
	
	axiom
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- eabs : ~T2
	============================== T-subst-IH-abs
	~C |- subst(~x, ~e, eabs) : ~T2

	goal
	~x != ~y
	!isFreeVar(~y, ~e)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- abs(~y, ~S, eabs) : ~T2
	================================================= T-subst-abs-2
	~C |- subst(~x, ~e, abs(~y, ~S, eabs)) : ~T2
}

local {
	hide-all
	include { gensym-is-fresh, subst10, isFreeVar7, isFreeVar8, isFreeVar6 }

	const eabs : Exp
	
	axiom
	~x != ~y
	!isFreeVar(~y, ~e)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- abs(~y, ~S, ~e1) : ~T2
	================================================= T-subst-abs-2
	~C |- subst(~x, ~e, abs(~y, ~S, ~e1)) : ~T2
	
	//necessary axioms on alpha equivalence
	axioms
	============================ alpha-equiv-refl
	alphaEquivalent(~e, ~e)


	alphaEquivalent(~e1, ~e2)
	============================ alpha-equiv-sym
	alphaEquivalent(~e2, ~e1)

 
	alphaEquivalent(~e1, ~e2)
	alphaEquivalent(~e2, ~e3)
	============================ alpha-equiv-trans
	alphaEquivalent(~e1, ~e3)
	
	!isFreeVar(~y, ~e)
	====================================================================== alpha-equiv-subst-abs
	alphaEquivalent(abs(~x, ~S, ~e), abs(~y, ~S, subst(~x, var(~y), ~e)))


	~C |- ~e : ~T
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-typing
	~C |- ~e1 : ~T
	
	//auxiliary lemma which is needed in this case, but can also be proven
	lemma
	~fresh == gensym(app(app(~e, ~e1), var(~x)))
	============================================= fresh-unequal-var-3
	~x != ~fresh
	
	//another auxiliary lemma which is needed in this case, but can also be proven
	lemma
	~fresh == gensym(app(app(~e, ~e1), var(~x)))
	============================================= fresh-free-2
	!isFreeVar(~fresh, ~e1)

	axiom //not needed
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- eabs : ~T2
	============================== T-subst-IH-abs
	~C |- subst(~x, ~e, eabs) : ~T2
	
	lemma
	!isFreeVar(~y, eabs)
	gensym(app(app(~e, eabs), var(~x))) == ~y
	======================================== T-apply-alpha-equiv
	alphaEquivalent(abs(~z, ~S, eabs), abs(~y, ~S, subst(~z, var(~y), eabs)))

	
	goal
	~x != ~y
	isFreeVar(~y, ~e)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- abs(~y, ~S, eabs) : ~T2
	================================================= T-subst-abs-3
	~C |- subst(~x, ~e, abs(~y, ~S, eabs)) : ~T2
}


// substitution lemma becomes an axiom after the proof
axiom
~C |- ~e : ~T
bind(~x, ~T, ~C) |- ~e2 : ~T2
============================== T-subst
~C |- subst(~x, ~e, ~e2) : ~T2

