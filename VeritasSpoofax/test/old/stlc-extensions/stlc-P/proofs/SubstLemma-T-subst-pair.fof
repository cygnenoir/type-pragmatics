
fof('EQ-var', axiom, (![VVar0,VVar1] : (((vvar(VVar0)=vvar(VVar1)) => (VVar0=VVar1)) & ((VVar0=VVar1) => (vvar(VVar0)=vvar(VVar1)))))).
fof('EQ-abs', axiom, (![VVar0,VTyp0,VExp0,VVar1,VTyp1,VExp1] : (((vabs(VVar0,VTyp0,VExp0)=vabs(VVar1,VTyp1,VExp1)) => ((VVar0=VVar1) & ((VTyp0=VTyp1) & (VExp0=VExp1)))) & (((VVar0=VVar1) & ((VTyp0=VTyp1) & (VExp0=VExp1))) => (vabs(VVar0,VTyp0,VExp0)=vabs(VVar1,VTyp1,VExp1)))))).
fof('EQ-app', axiom, (![VExp0,VExp1,VExp2,VExp3] : (((vapp(VExp0,VExp1)=vapp(VExp2,VExp3)) => ((VExp0=VExp2) & (VExp1=VExp3))) & (((VExp0=VExp2) & (VExp1=VExp3)) => (vapp(VExp0,VExp1)=vapp(VExp2,VExp3)))))).
fof('EQ-pair', axiom, (![VExp0,VExp1,VExp2,VExp3] : (((vpair(VExp0,VExp1)=vpair(VExp2,VExp3)) => ((VExp0=VExp2) & (VExp1=VExp3))) & (((VExp0=VExp2) & (VExp1=VExp3)) => (vpair(VExp0,VExp1)=vpair(VExp2,VExp3)))))).
fof('EQ-first', axiom, (![VExp0,VExp1] : (((vfirst(VExp0)=vfirst(VExp1)) => (VExp0=VExp1)) & ((VExp0=VExp1) => (vfirst(VExp0)=vfirst(VExp1)))))).
fof('EQ-second', axiom, (![VExp0,VExp1] : (((vsecond(VExp0)=vsecond(VExp1)) => (VExp0=VExp1)) & ((VExp0=VExp1) => (vsecond(VExp0)=vsecond(VExp1)))))).
fof('DIFF-var-abs', axiom, (![VVar0,VVar1,VTyp0,VExp0] : (vvar(VVar0)!=vabs(VVar1,VTyp0,VExp0)))).
fof('DIFF-var-app', axiom, (![VVar0,VExp0,VExp1] : (vvar(VVar0)!=vapp(VExp0,VExp1)))).
fof('DIFF-abs-app', axiom, (![VVar0,VTyp0,VExp0,VExp1,VExp2] : (vabs(VVar0,VTyp0,VExp0)!=vapp(VExp1,VExp2)))).
fof('DIFF-var-pair', axiom, (![VVar0,VExp0,VExp1] : (vvar(VVar0)!=vpair(VExp0,VExp1)))).
fof('DIFF-abs-pair', axiom, (![VVar0,VTyp0,VExp0,VExp1,VExp2] : (vabs(VVar0,VTyp0,VExp0)!=vpair(VExp1,VExp2)))).
fof('DIFF-app-pair', axiom, (![VExp0,VExp1,VExp2,VExp3] : (vapp(VExp0,VExp1)!=vpair(VExp2,VExp3)))).
fof('DIFF-var-first', axiom, (![VVar0,VExp0] : (vvar(VVar0)!=vfirst(VExp0)))).
fof('DIFF-abs-first', axiom, (![VVar0,VTyp0,VExp0,VExp1] : (vabs(VVar0,VTyp0,VExp0)!=vfirst(VExp1)))).
fof('DIFF-app-first', axiom, (![VExp0,VExp1,VExp2] : (vapp(VExp0,VExp1)!=vfirst(VExp2)))).
fof('DIFF-pair-first', axiom, (![VExp0,VExp1,VExp2] : (vpair(VExp0,VExp1)!=vfirst(VExp2)))).
fof('DIFF-var-second', axiom, (![VVar0,VExp0] : (vvar(VVar0)!=vsecond(VExp0)))).
fof('DIFF-abs-second', axiom, (![VVar0,VTyp0,VExp0,VExp1] : (vabs(VVar0,VTyp0,VExp0)!=vsecond(VExp1)))).
fof('DIFF-app-second', axiom, (![VExp0,VExp1,VExp2] : (vapp(VExp0,VExp1)!=vsecond(VExp2)))).
fof('DIFF-pair-second', axiom, (![VExp0,VExp1,VExp2] : (vpair(VExp0,VExp1)!=vsecond(VExp2)))).
fof('DIFF-first-second', axiom, (![VExp0,VExp1] : (vfirst(VExp0)!=vsecond(VExp1)))).
fof('isValue0', axiom, (![Vx,VS,Ve,VExp0] : ((VExp0=vabs(Vx,VS,Ve)) => visValue(VExp0)))).
fof('isValue1', axiom, (![Vx,VExp0] : ((VExp0=vvar(Vx)) => (~visValue(VExp0))))).
fof('isValue2', axiom, (![Ve1,Ve2,VExp0] : ((VExp0=vapp(Ve1,Ve2)) => (~visValue(VExp0))))).
fof('isValue3', axiom, (![VExp0,Ve1,Ve2] : ((VExp0=vpair(Ve1,Ve2)) => (((visValue(Ve1) & visValue(Ve2)) => visValue(VExp0)) & (visValue(VExp0) => (visValue(Ve1) & visValue(Ve2))))))).
fof('isValue4', axiom, (![Ve,VExp0] : ((VExp0=vfirst(Ve)) => (~visValue(VExp0))))).
fof('isValue5', axiom, (![Ve,VExp0] : ((VExp0=vsecond(Ve)) => (~visValue(VExp0))))).
fof('isFreeVar0', axiom, (![VVar0,VExp0,Vx,Vv] : (((VVar0=Vv) & (VExp0=vvar(Vx))) => (((Vx=Vv) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => (Vx=Vv)))))).
fof('isFreeVar1', axiom, (![VT,VVar0,VExp0,Vx,Vv,Ve] : (((VVar0=Vv) & (VExp0=vabs(Vx,VT,Ve))) => ((((Vx!=Vv) & visFreeVar(Vv,Ve)) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => ((Vx!=Vv) & visFreeVar(Vv,Ve))))))).
fof('isFreeVar2', axiom, (![VVar0,VExp0,Ve1,Vv,Ve2] : (((VVar0=Vv) & (VExp0=vapp(Ve1,Ve2))) => (((visFreeVar(Vv,Ve1) | visFreeVar(Vv,Ve2)) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => (visFreeVar(Vv,Ve1) | visFreeVar(Vv,Ve2))))))).
fof('isFreeVar3', axiom, (![VVar0,VExp0,Ve1,Vv,Ve2] : (((VVar0=Vv) & (VExp0=vpair(Ve1,Ve2))) => (((visFreeVar(Vv,Ve1) | visFreeVar(Vv,Ve2)) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => (visFreeVar(Vv,Ve1) | visFreeVar(Vv,Ve2))))))).
fof('isFreeVar4', axiom, (![VVar0,VExp0,Vv,Ve] : (((VVar0=Vv) & (VExp0=vfirst(Ve))) => ((visFreeVar(Vv,Ve) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => visFreeVar(Vv,Ve)))))).
fof('isFreeVar5', axiom, (![VVar0,VExp0,Vv,Ve] : (((VVar0=Vv) & (VExp0=vsecond(Ve))) => ((visFreeVar(Vv,Ve) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => visFreeVar(Vv,Ve)))))).
fof('EQ-empty', axiom, (((vempty=vempty) => $true) & ($true => (vempty=vempty)))).
fof('EQ-bind', axiom, (![VVar0,VTyp0,VCtx0,VVar1,VTyp1,VCtx1] : (((vbind(VVar0,VTyp0,VCtx0)=vbind(VVar1,VTyp1,VCtx1)) => ((VVar0=VVar1) & ((VTyp0=VTyp1) & (VCtx0=VCtx1)))) & (((VVar0=VVar1) & ((VTyp0=VTyp1) & (VCtx0=VCtx1))) => (vbind(VVar0,VTyp0,VCtx0)=vbind(VVar1,VTyp1,VCtx1)))))).
fof('EQ-noType', axiom, (((vnoType=vnoType) => $true) & ($true => (vnoType=vnoType)))).
fof('EQ-someType', axiom, (![VTyp0,VTyp1] : (((vsomeType(VTyp0)=vsomeType(VTyp1)) => (VTyp0=VTyp1)) & ((VTyp0=VTyp1) => (vsomeType(VTyp0)=vsomeType(VTyp1)))))).
fof('DIFF-empty-bind', axiom, (![VVar0,VTyp0,VCtx0] : (vempty!=vbind(VVar0,VTyp0,VCtx0)))).
fof('DIFF-noType-someType', axiom, (![VTyp0] : (vnoType!=vsomeType(VTyp0)))).
fof('isSomeType0', axiom, (![VOptTyp0] : ((VOptTyp0=vnoType) => (~visSomeType(VOptTyp0))))).
fof('isSomeType1', axiom, (![Ve,VOptTyp0] : ((VOptTyp0=vsomeType(Ve)) => visSomeType(VOptTyp0)))).
fof('getSomeType0', axiom, (![VOptTyp0,RESULT,Ve] : ((VOptTyp0=vsomeType(Ve)) => ((RESULT=vgetSomeType(VOptTyp0)) => (RESULT=Ve))))).
fof('lookup0', axiom, (![Vx,VVar0,VCtx0,RESULT] : (((VVar0=Vx) & (VCtx0=vempty)) => ((RESULT=vlookup(VVar0,VCtx0)) => (RESULT=vnoType))))).
fof('lookup1', axiom, (![VC,Vx,Vy,VVar0,VCtx0,RESULT,VTy] : (((VVar0=Vx) & (VCtx0=vbind(Vy,VTy,VC))) => ((Vx=Vy) => ((RESULT=vlookup(VVar0,VCtx0)) => (RESULT=vsomeType(VTy))))))).
fof('lookup2', axiom, (![VTy,Vy,VVar0,VCtx0,RESULT,Vx,VC] : (((VVar0=Vx) & (VCtx0=vbind(Vy,VTy,VC))) => ((~(Vx=Vy)) => ((RESULT=vlookup(VVar0,VCtx0)) => (RESULT=vlookup(Vx,VC))))))).
fof('lookup-INV', axiom, (![VVar0,VCtx0,RESULT] : ((vlookup(VVar0,VCtx0)=RESULT) => ((?[Vx] : ((VVar0=Vx) & ((VCtx0=vempty) & (RESULT=vnoType)))) | ((?[VC,Vx,Vy,VTy] : ((VVar0=Vx) & ((VCtx0=vbind(Vy,VTy,VC)) & ((Vx=Vy) & (RESULT=vsomeType(VTy)))))) | (?[VTy,Vy,Vx,VC] : ((VVar0=Vx) & ((VCtx0=vbind(Vy,VTy,VC)) & ((~(Vx=Vy)) & (RESULT=vlookup(Vx,VC))))))))))).
fof('T-Context-Duplicate', axiom, (![Vy,VTy,Vx,VTx,VC,Ve,VT] : (((Vx=Vy) & vtcheck(vbind(Vx,VTx,vbind(Vy,VTy,VC)),Ve,VT)) => vtcheck(vbind(Vx,VTx,VC),Ve,VT)))).
fof('T-Context-Swap', axiom, (![Vy,VTy,Vx,VTx,VC,Ve,VT] : (((Vx!=Vy) & vtcheck(vbind(Vx,VTx,vbind(Vy,VTy,VC)),Ve,VT)) => vtcheck(vbind(Vy,VTy,vbind(Vx,VTx,VC)),Ve,VT)))).
fof('gensym-is-fresh', axiom, (![Vv,Ve] : ((vgensym(Ve)=Vv) => (~visFreeVar(Vv,Ve))))).
fof('subst0', axiom, (![Vx,Vy,VVar0,VExp0,VExp1,RESULT,Ve] : (((VVar0=Vx) & ((VExp0=Ve) & (VExp1=vvar(Vy)))) => ((Vx=Vy) => ((RESULT=vsubst(VVar0,VExp0,VExp1)) => (RESULT=Ve)))))).
fof('subst1', axiom, (![Ve,Vx,VVar0,VExp0,VExp1,RESULT,Vy] : (((VVar0=Vx) & ((VExp0=Ve) & (VExp1=vvar(Vy)))) => ((~(Vx=Vy)) => ((RESULT=vsubst(VVar0,VExp0,VExp1)) => (RESULT=vvar(Vy))))))).
fof('subst2', axiom, (![VVar0,VExp0,VExp1,RESULT,Ve1,Vx,Ve,Ve2] : (((VVar0=Vx) & ((VExp0=Ve) & (VExp1=vapp(Ve1,Ve2)))) => ((RESULT=vsubst(VVar0,VExp0,VExp1)) => (RESULT=vapp(vsubst(Vx,Ve,Ve1),vsubst(Vx,Ve,Ve2))))))).
fof('subst3', axiom, (![Ve,Vx,VVar0,VExp0,VExp1,RESULT,Vy,VT,Ve1] : (((VVar0=Vx) & ((VExp0=Ve) & (VExp1=vabs(Vy,VT,Ve1)))) => ((Vx=Vy) => ((RESULT=vsubst(VVar0,VExp0,VExp1)) => (RESULT=vabs(Vy,VT,Ve1))))))).
fof('subst4', axiom, (![VVar0,VExp0,VExp1,RESULT,Vx,Ve,VT,Vy,Vfresh,Ve1] : (((VVar0=Vx) & ((VExp0=Ve) & (VExp1=vabs(Vy,VT,Ve1)))) => (((~(Vx=Vy)) & (visFreeVar(Vy,Ve) & (Vfresh=vgensym(vapp(vapp(Ve,Ve1),vvar(Vx)))))) => ((RESULT=vsubst(VVar0,VExp0,VExp1)) => (RESULT=vsubst(Vx,Ve,vabs(Vfresh,VT,vsubst(Vy,vvar(Vfresh),Ve1))))))))).
fof('subst5', axiom, (![VVar0,VExp0,VExp1,RESULT,Vy,VT,Vx,Ve,Ve1] : (((VVar0=Vx) & ((VExp0=Ve) & (VExp1=vabs(Vy,VT,Ve1)))) => (((~(Vx=Vy)) & (~visFreeVar(Vy,Ve))) => ((RESULT=vsubst(VVar0,VExp0,VExp1)) => (RESULT=vabs(Vy,VT,vsubst(Vx,Ve,Ve1)))))))).
fof('subst6', axiom, (![VVar0,VExp0,VExp1,RESULT,Ve1,Vx,Ve,Ve2] : (((VVar0=Vx) & ((VExp0=Ve) & (VExp1=vpair(Ve1,Ve2)))) => ((RESULT=vsubst(VVar0,VExp0,VExp1)) => (RESULT=vpair(vsubst(Vx,Ve,Ve1),vsubst(Vx,Ve,Ve2))))))).
fof('subst7', axiom, (![VVar0,VExp0,VExp1,RESULT,Vx,Ve,Ve1] : (((VVar0=Vx) & ((VExp0=Ve) & (VExp1=vfirst(Ve1)))) => ((RESULT=vsubst(VVar0,VExp0,VExp1)) => (RESULT=vfirst(vsubst(Vx,Ve,Ve1))))))).
fof('subst8', axiom, (![VVar0,VExp0,VExp1,RESULT,Vx,Ve,Ve1] : (((VVar0=Vx) & ((VExp0=Ve) & (VExp1=vsecond(Ve1)))) => ((RESULT=vsubst(VVar0,VExp0,VExp1)) => (RESULT=vsecond(vsubst(Vx,Ve,Ve1))))))).
fof('subst-INV', axiom, (![VVar0,VExp0,VExp1,RESULT] : ((vsubst(VVar0,VExp0,VExp1)=RESULT) => ((?[Vx,Vy,Ve] : ((VVar0=Vx) & ((VExp0=Ve) & ((VExp1=vvar(Vy)) & ((Vx=Vy) & (RESULT=Ve)))))) | ((?[Ve,Vx,Vy] : ((VVar0=Vx) & ((VExp0=Ve) & ((VExp1=vvar(Vy)) & ((~(Vx=Vy)) & (RESULT=vvar(Vy))))))) | ((?[Ve1,Vx,Ve,Ve2] : ((VVar0=Vx) & ((VExp0=Ve) & ((VExp1=vapp(Ve1,Ve2)) & (RESULT=vapp(vsubst(Vx,Ve,Ve1),vsubst(Vx,Ve,Ve2))))))) | ((?[Ve,Vx,Vy,VT,Ve1] : ((VVar0=Vx) & ((VExp0=Ve) & ((VExp1=vabs(Vy,VT,Ve1)) & ((Vx=Vy) & (RESULT=vabs(Vy,VT,Ve1))))))) | ((?[Vx,Ve,VT,Vy,Vfresh,Ve1] : ((VVar0=Vx) & ((VExp0=Ve) & ((VExp1=vabs(Vy,VT,Ve1)) & ((~(Vx=Vy)) & (visFreeVar(Vy,Ve) & ((Vfresh=vgensym(vapp(vapp(Ve,Ve1),vvar(Vx)))) & (RESULT=vsubst(Vx,Ve,vabs(Vfresh,VT,vsubst(Vy,vvar(Vfresh),Ve1))))))))))) | ((?[Vy,VT,Vx,Ve,Ve1] : ((VVar0=Vx) & ((VExp0=Ve) & ((VExp1=vabs(Vy,VT,Ve1)) & ((~(Vx=Vy)) & ((~visFreeVar(Vy,Ve)) & (RESULT=vabs(Vy,VT,vsubst(Vx,Ve,Ve1))))))))) | ((?[Ve1,Vx,Ve,Ve2] : ((VVar0=Vx) & ((VExp0=Ve) & ((VExp1=vpair(Ve1,Ve2)) & (RESULT=vpair(vsubst(Vx,Ve,Ve1),vsubst(Vx,Ve,Ve2))))))) | ((?[Vx,Ve,Ve1] : ((VVar0=Vx) & ((VExp0=Ve) & ((VExp1=vfirst(Ve1)) & (RESULT=vfirst(vsubst(Vx,Ve,Ve1))))))) | (?[Vx,Ve,Ve1] : ((VVar0=Vx) & ((VExp0=Ve) & ((VExp1=vsecond(Ve1)) & (RESULT=vsecond(vsubst(Vx,Ve,Ve1)))))))))))))))))).
fof('EQ-arrow', axiom, (![VTyp0,VTyp1,VTyp2,VTyp3] : (((varrow(VTyp0,VTyp1)=varrow(VTyp2,VTyp3)) => ((VTyp0=VTyp2) & (VTyp1=VTyp3))) & (((VTyp0=VTyp2) & (VTyp1=VTyp3)) => (varrow(VTyp0,VTyp1)=varrow(VTyp2,VTyp3)))))).
fof('EQ-pairType', axiom, (![VTyp0,VTyp1,VTyp2,VTyp3] : (((vpairType(VTyp0,VTyp1)=vpairType(VTyp2,VTyp3)) => ((VTyp0=VTyp2) & (VTyp1=VTyp3))) & (((VTyp0=VTyp2) & (VTyp1=VTyp3)) => (vpairType(VTyp0,VTyp1)=vpairType(VTyp2,VTyp3)))))).
fof('DIFF-arrow-pairType', axiom, (![VTyp0,VTyp1,VTyp2,VTyp3] : (varrow(VTyp0,VTyp1)!=vpairType(VTyp2,VTyp3)))).
fof('T-var', axiom, (![VC,Vx,VT] : ((vlookup(Vx,VC)=vsomeType(VT)) => vtcheck(VC,vvar(Vx),VT)))).
fof('T-abs', axiom, (![VC,Vx,Ve,VS,VT] : (vtcheck(vbind(Vx,VS,VC),Ve,VT) => vtcheck(VC,vabs(Vx,VS,Ve),varrow(VS,VT))))).
fof('T-app', axiom, (![VS,VC,Ve1,Ve2,VT] : ((vtcheck(VC,Ve1,varrow(VS,VT)) & vtcheck(VC,Ve2,VS)) => vtcheck(VC,vapp(Ve1,Ve2),VT)))).
fof('T-pair', axiom, (![VC,Ve1,Ve2,VT1,VT2] : ((vtcheck(VC,Ve1,VT1) & vtcheck(VC,Ve2,VT2)) => vtcheck(VC,vpair(Ve1,Ve2),vpairType(VT1,VT2))))).
fof('T-first', axiom, (![VT2,VC,Ve,VT1] : (vtcheck(VC,Ve,vpairType(VT1,VT2)) => vtcheck(VC,vfirst(Ve),VT1)))).
fof('T-second', axiom, (![VT1,VC,Ve,VT2] : (vtcheck(VC,Ve,vpairType(VT1,VT2)) => vtcheck(VC,vsecond(Ve),VT2)))).
fof('T-inv', axiom, (![Ve,VC,VT] : (vtcheck(VC,Ve,VT) => ((?[Vx] : ((Ve=vvar(Vx)) & (vlookup(Vx,VC)=vsomeType(VT)))) | ((?[Vx,Ve2,VT1,VT2] : ((Ve=vabs(Vx,VT1,Ve2)) & ((VT=varrow(VT1,VT2)) & vtcheck(vbind(Vx,VT1,VC),Ve2,VT2)))) | ((?[Ve1,Ve2,VS] : ((Ve=vapp(Ve1,Ve2)) & (vtcheck(VC,Ve1,varrow(VS,VT)) & vtcheck(VC,Ve2,VS)))) | ((?[Ve1,Ve2,VT1,VT2] : ((Ve=vpair(Ve1,Ve2)) & ((VT=vpairType(VT1,VT2)) & (vtcheck(VC,Ve1,VT1) & vtcheck(VC,Ve2,VT2))))) | ((?[Ve1,VT2] : ((Ve=vfirst(Ve1)) & vtcheck(VC,Ve1,vpairType(VT,VT2)))) | (?[Ve1,VT1] : ((Ve=vsecond(Ve1)) & vtcheck(VC,Ve1,vpairType(VT1,VT)))))))))))).
fof('T-Weak', axiom, (![Vx,VS,VC,Ve,VT] : (((vlookup(Vx,VC)=vnoType) & vtcheck(VC,Ve,VT)) => vtcheck(vbind(Vx,VS,VC),Ve,VT)))).
fof('T-Strong', axiom, (![Vx,VS,VC,Ve,VT] : (((~visFreeVar(Vx,Ve)) & vtcheck(vbind(Vx,VS,VC),Ve,VT)) => vtcheck(VC,Ve,VT)))).
fof('EQ-e1', axiom, (((ve1=ve1) => $true) & ($true => (ve1=ve1)))).
fof('EQ-e2', axiom, (((ve2=ve2) => $true) & ($true => (ve2=ve2)))).
fof('T-subst-pair-IH1', axiom, (![VT,VC,Vx,Ve,VT2] : ((vtcheck(VC,Ve,VT) & vtcheck(vbind(Vx,VT,VC),ve1,VT2)) => vtcheck(VC,vsubst(Vx,Ve,ve1),VT2)))).
fof('T-subst-pair-IH2', axiom, (![VT,VC,Vx,Ve,VT2] : ((vtcheck(VC,Ve,VT) & vtcheck(vbind(Vx,VT,VC),ve2,VT2)) => vtcheck(VC,vsubst(Vx,Ve,ve2),VT2)))).
fof('T-subst-pair-use-IH', axiom, (![VT,VT2,VC,Vx,Ve] : ((vtcheck(VC,Ve,VT) & vtcheck(vbind(Vx,VT,VC),vpair(ve1,ve2),VT2)) => (?[VT1,VT3] : ((VT2=vpairType(VT1,VT3)) & (vtcheck(VC,vsubst(Vx,Ve,ve1),VT1) & vtcheck(VC,vsubst(Vx,Ve,ve2),VT3))))))).
fof('T-subst-pair', conjecture, (![VT,VC,Vx,Ve,VT2] : ((vtcheck(VC,Ve,VT) & vtcheck(vbind(Vx,VT,VC),vpair(ve1,ve2),VT2)) => vtcheck(VC,vsubst(Vx,Ve,vpair(ve1,ve2)),VT2)))).