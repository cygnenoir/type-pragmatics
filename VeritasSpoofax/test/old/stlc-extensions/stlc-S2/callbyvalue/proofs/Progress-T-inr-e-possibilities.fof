
fof('EQ-var', axiom, (![VVar0,VVar1] : (((vvar(VVar0)=vvar(VVar1)) => (VVar0=VVar1)) & ((VVar0=VVar1) => (vvar(VVar0)=vvar(VVar1)))))).
fof('EQ-abs', axiom, (![VVar0,VTyp0,VExp0,VVar1,VTyp1,VExp1] : (((vabs(VVar0,VTyp0,VExp0)=vabs(VVar1,VTyp1,VExp1)) => ((VVar0=VVar1) & ((VTyp0=VTyp1) & (VExp0=VExp1)))) & (((VVar0=VVar1) & ((VTyp0=VTyp1) & (VExp0=VExp1))) => (vabs(VVar0,VTyp0,VExp0)=vabs(VVar1,VTyp1,VExp1)))))).
fof('EQ-app', axiom, (![VExp0,VExp1,VExp2,VExp3] : (((vapp(VExp0,VExp1)=vapp(VExp2,VExp3)) => ((VExp0=VExp2) & (VExp1=VExp3))) & (((VExp0=VExp2) & (VExp1=VExp3)) => (vapp(VExp0,VExp1)=vapp(VExp2,VExp3)))))).
fof('EQ-inl', axiom, (![VExp0,VTyp0,VExp1,VTyp1] : (((vinl(VExp0,VTyp0)=vinl(VExp1,VTyp1)) => ((VExp0=VExp1) & (VTyp0=VTyp1))) & (((VExp0=VExp1) & (VTyp0=VTyp1)) => (vinl(VExp0,VTyp0)=vinl(VExp1,VTyp1)))))).
fof('EQ-inr', axiom, (![VExp0,VTyp0,VExp1,VTyp1] : (((vinr(VExp0,VTyp0)=vinr(VExp1,VTyp1)) => ((VExp0=VExp1) & (VTyp0=VTyp1))) & (((VExp0=VExp1) & (VTyp0=VTyp1)) => (vinr(VExp0,VTyp0)=vinr(VExp1,VTyp1)))))).
fof('EQ-case', axiom, (![VExp0,VVar0,VExp1,VVar1,VExp2,VExp3,VVar2,VExp4,VVar3,VExp5] : (((vcase(VExp0,VVar0,VExp1,VVar1,VExp2)=vcase(VExp3,VVar2,VExp4,VVar3,VExp5)) => ((VExp0=VExp3) & ((VVar0=VVar2) & ((VExp1=VExp4) & ((VVar1=VVar3) & (VExp2=VExp5)))))) & (((VExp0=VExp3) & ((VVar0=VVar2) & ((VExp1=VExp4) & ((VVar1=VVar3) & (VExp2=VExp5))))) => (vcase(VExp0,VVar0,VExp1,VVar1,VExp2)=vcase(VExp3,VVar2,VExp4,VVar3,VExp5)))))).
fof('DIFF-var-abs', axiom, (![VVar0,VVar1,VTyp0,VExp0] : (vvar(VVar0)!=vabs(VVar1,VTyp0,VExp0)))).
fof('DIFF-var-app', axiom, (![VVar0,VExp0,VExp1] : (vvar(VVar0)!=vapp(VExp0,VExp1)))).
fof('DIFF-abs-app', axiom, (![VVar0,VTyp0,VExp0,VExp1,VExp2] : (vabs(VVar0,VTyp0,VExp0)!=vapp(VExp1,VExp2)))).
fof('DIFF-var-inl', axiom, (![VVar0,VExp0,VTyp0] : (vvar(VVar0)!=vinl(VExp0,VTyp0)))).
fof('DIFF-abs-inl', axiom, (![VVar0,VTyp0,VExp0,VExp1,VTyp1] : (vabs(VVar0,VTyp0,VExp0)!=vinl(VExp1,VTyp1)))).
fof('DIFF-app-inl', axiom, (![VExp0,VExp1,VExp2,VTyp0] : (vapp(VExp0,VExp1)!=vinl(VExp2,VTyp0)))).
fof('DIFF-var-inr', axiom, (![VVar0,VExp0,VTyp0] : (vvar(VVar0)!=vinr(VExp0,VTyp0)))).
fof('DIFF-abs-inr', axiom, (![VVar0,VTyp0,VExp0,VExp1,VTyp1] : (vabs(VVar0,VTyp0,VExp0)!=vinr(VExp1,VTyp1)))).
fof('DIFF-app-inr', axiom, (![VExp0,VExp1,VExp2,VTyp0] : (vapp(VExp0,VExp1)!=vinr(VExp2,VTyp0)))).
fof('DIFF-inl-inr', axiom, (![VExp0,VTyp0,VExp1,VTyp1] : (vinl(VExp0,VTyp0)!=vinr(VExp1,VTyp1)))).
fof('DIFF-var-case', axiom, (![VVar0,VExp0,VVar1,VExp1,VVar2,VExp2] : (vvar(VVar0)!=vcase(VExp0,VVar1,VExp1,VVar2,VExp2)))).
fof('DIFF-abs-case', axiom, (![VVar0,VTyp0,VExp0,VExp1,VVar1,VExp2,VVar2,VExp3] : (vabs(VVar0,VTyp0,VExp0)!=vcase(VExp1,VVar1,VExp2,VVar2,VExp3)))).
fof('DIFF-app-case', axiom, (![VExp0,VExp1,VExp2,VVar0,VExp3,VVar1,VExp4] : (vapp(VExp0,VExp1)!=vcase(VExp2,VVar0,VExp3,VVar1,VExp4)))).
fof('DIFF-inl-case', axiom, (![VExp0,VTyp0,VExp1,VVar0,VExp2,VVar1,VExp3] : (vinl(VExp0,VTyp0)!=vcase(VExp1,VVar0,VExp2,VVar1,VExp3)))).
fof('DIFF-inr-case', axiom, (![VExp0,VTyp0,VExp1,VVar0,VExp2,VVar1,VExp3] : (vinr(VExp0,VTyp0)!=vcase(VExp1,VVar0,VExp2,VVar1,VExp3)))).
fof('isValue0', axiom, (![Vx,VS,Ve,VExp0] : ((VExp0=vabs(Vx,VS,Ve)) => visValue(VExp0)))).
fof('isValue1', axiom, (![Vx,VExp0] : ((VExp0=vvar(Vx)) => (~visValue(VExp0))))).
fof('isValue2', axiom, (![Ve1,Ve2,VExp0] : ((VExp0=vapp(Ve1,Ve2)) => (~visValue(VExp0))))).
fof('isValue3', axiom, (![VT,VExp0,Ve] : ((VExp0=vinl(Ve,VT)) => ((visValue(Ve) => visValue(VExp0)) & (visValue(VExp0) => visValue(Ve)))))).
fof('isValue4', axiom, (![VT,VExp0,Ve] : ((VExp0=vinr(Ve,VT)) => ((visValue(Ve) => visValue(VExp0)) & (visValue(VExp0) => visValue(Ve)))))).
fof('isValue5', axiom, (![Ve,Vx1,Ve1,Vx2,Ve2,VExp0] : ((VExp0=vcase(Ve,Vx1,Ve1,Vx2,Ve2)) => (~visValue(VExp0))))).
fof('isFreeVar0', axiom, (![VVar0,VExp0,Vx,Vv] : (((VVar0=Vv) & (VExp0=vvar(Vx))) => (((Vx=Vv) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => (Vx=Vv)))))).
fof('isFreeVar1', axiom, (![VT,VVar0,VExp0,Vx,Vv,Ve] : (((VVar0=Vv) & (VExp0=vabs(Vx,VT,Ve))) => ((((Vx!=Vv) & visFreeVar(Vv,Ve)) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => ((Vx!=Vv) & visFreeVar(Vv,Ve))))))).
fof('isFreeVar2', axiom, (![VVar0,VExp0,Ve1,Vv,Ve2] : (((VVar0=Vv) & (VExp0=vapp(Ve1,Ve2))) => (((visFreeVar(Vv,Ve1) | visFreeVar(Vv,Ve2)) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => (visFreeVar(Vv,Ve1) | visFreeVar(Vv,Ve2))))))).
fof('isFreeVar3', axiom, (![VT,VVar0,VExp0,Vv,Ve] : (((VVar0=Vv) & (VExp0=vinl(Ve,VT))) => ((visFreeVar(Vv,Ve) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => visFreeVar(Vv,Ve)))))).
fof('isFreeVar4', axiom, (![VT,VVar0,VExp0,Vv,Ve] : (((VVar0=Vv) & (VExp0=vinr(Ve,VT))) => ((visFreeVar(Vv,Ve) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => visFreeVar(Vv,Ve)))))).
fof('isFreeVar5', axiom, (![VVar0,VExp0,Ve,Vx1,Ve1,Vx2,Vv,Ve2] : (((VVar0=Vv) & (VExp0=vcase(Ve,Vx1,Ve1,Vx2,Ve2))) => (((visFreeVar(Vv,Ve) | (((Vv!=Vx1) & visFreeVar(Vv,Ve1)) | ((Vv!=Vx2) & visFreeVar(Vv,Ve2)))) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => (visFreeVar(Vv,Ve) | (((Vv!=Vx1) & visFreeVar(Vv,Ve1)) | ((Vv!=Vx2) & visFreeVar(Vv,Ve2))))))))).
fof('EQ-empty', axiom, (((vempty=vempty) => $true) & ($true => (vempty=vempty)))).
fof('EQ-bind', axiom, (![VVar0,VTyp0,VCtx0,VVar1,VTyp1,VCtx1] : (((vbind(VVar0,VTyp0,VCtx0)=vbind(VVar1,VTyp1,VCtx1)) => ((VVar0=VVar1) & ((VTyp0=VTyp1) & (VCtx0=VCtx1)))) & (((VVar0=VVar1) & ((VTyp0=VTyp1) & (VCtx0=VCtx1))) => (vbind(VVar0,VTyp0,VCtx0)=vbind(VVar1,VTyp1,VCtx1)))))).
fof('EQ-noType', axiom, (((vnoType=vnoType) => $true) & ($true => (vnoType=vnoType)))).
fof('EQ-someType', axiom, (![VTyp0,VTyp1] : (((vsomeType(VTyp0)=vsomeType(VTyp1)) => (VTyp0=VTyp1)) & ((VTyp0=VTyp1) => (vsomeType(VTyp0)=vsomeType(VTyp1)))))).
fof('DIFF-empty-bind', axiom, (![VVar0,VTyp0,VCtx0] : (vempty!=vbind(VVar0,VTyp0,VCtx0)))).
fof('DIFF-noType-someType', axiom, (![VTyp0] : (vnoType!=vsomeType(VTyp0)))).
fof('isSomeType0', axiom, (![VOptTyp0] : ((VOptTyp0=vnoType) => (~visSomeType(VOptTyp0))))).
fof('isSomeType1', axiom, (![Ve,VOptTyp0] : ((VOptTyp0=vsomeType(Ve)) => visSomeType(VOptTyp0)))).
fof('getSomeType0', axiom, (![VOptTyp0,RESULT,Ve] : ((VOptTyp0=vsomeType(Ve)) => ((RESULT=vgetSomeType(VOptTyp0)) => (RESULT=Ve))))).
fof('lookup0', axiom, (![Vx,VVar0,VCtx0,RESULT] : (((VVar0=Vx) & (VCtx0=vempty)) => ((RESULT=vlookup(VVar0,VCtx0)) => (RESULT=vnoType))))).
fof('lookup1', axiom, (![VC,Vx,Vy,VVar0,VCtx0,RESULT,VTy] : (((VVar0=Vx) & (VCtx0=vbind(Vy,VTy,VC))) => ((Vx=Vy) => ((RESULT=vlookup(VVar0,VCtx0)) => (RESULT=vsomeType(VTy))))))).
fof('lookup2', axiom, (![VTy,Vy,VVar0,VCtx0,RESULT,Vx,VC] : (((VVar0=Vx) & (VCtx0=vbind(Vy,VTy,VC))) => ((~(Vx=Vy)) => ((RESULT=vlookup(VVar0,VCtx0)) => (RESULT=vlookup(Vx,VC))))))).
fof('lookup-INV', axiom, (![VVar0,VCtx0,RESULT] : ((lookup(VVar0,VCtx0)=RESULT) => ((?[Vx] : ((VVar0=Vx) & ((VCtx0=vempty) & (RESULT=vnoType)))) | ((?[VC,Vx,Vy,VTy] : ((VVar0=Vx) & ((VCtx0=vbind(Vy,VTy,VC)) & ((Vx=Vy) & (RESULT=vsomeType(VTy)))))) | (?[VTy,Vy,Vx,VC] : ((VVar0=Vx) & ((VCtx0=vbind(Vy,VTy,VC)) & ((~(Vx=Vy)) & (RESULT=vlookup(Vx,VC))))))))))).
fof('T-Context-Duplicate', axiom, (![Vy,VTy,Vx,VTx,VC,Ve,VT] : (((Vx=Vy) & vtcheck(vbind(Vx,VTx,vbind(Vy,VTy,VC)),Ve,VT)) => vtcheck(vbind(Vx,VTx,VC),Ve,VT)))).
fof('T-Context-Swap', axiom, (![Vy,VTy,Vx,VTx,VC,Ve,VT] : (((Vx!=Vy) & vtcheck(vbind(Vx,VTx,vbind(Vy,VTy,VC)),Ve,VT)) => vtcheck(vbind(Vy,VTy,vbind(Vx,VTx,VC)),Ve,VT)))).
fof('gensym-is-fresh', axiom, (![Vv,Ve] : ((vgensym(Ve)=Vv) => (~visFreeVar(Vv,Ve))))).
fof('EQ-noExp', axiom, (((vnoExp=vnoExp) => $true) & ($true => (vnoExp=vnoExp)))).
fof('EQ-someExp', axiom, (![VExp0,VExp1] : (((vsomeExp(VExp0)=vsomeExp(VExp1)) => (VExp0=VExp1)) & ((VExp0=VExp1) => (vsomeExp(VExp0)=vsomeExp(VExp1)))))).
fof('DIFF-noExp-someExp', axiom, (![VExp0] : (vnoExp!=vsomeExp(VExp0)))).
fof('isSomeExp0', axiom, (![VOptExp0] : ((VOptExp0=vnoExp) => (~visSomeExp(VOptExp0))))).
fof('isSomeExp1', axiom, (![Ve,VOptExp0] : ((VOptExp0=vsomeExp(Ve)) => visSomeExp(VOptExp0)))).
fof('getSomeExp0', axiom, (![VOptExp0,RESULT,Ve] : ((VOptExp0=vsomeExp(Ve)) => ((RESULT=vgetSomeExp(VOptExp0)) => (RESULT=Ve))))).
fof('reduce0', axiom, (![Vx,VExp0,RESULT] : ((VExp0=vvar(Vx)) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp))))).
fof('reduce1', axiom, (![Vx,VS,Ve,VExp0,RESULT] : ((VExp0=vabs(Vx,VS,Ve)) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp))))).
fof('reduce2', axiom, (![Ve2,VExp0,RESULT,Vx,VS,Ve1,Ve2red] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) => (((Ve2red=vreduce(Ve2)) & visSomeExp(Ve2red)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vapp(vabs(Vx,VS,Ve1),vgetSomeExp(Ve2red))))))))).
fof('reduce3', axiom, (![VS,Ve2red,VExp0,RESULT,Vx,Ve2,Ve1] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) => (((Ve2red=vreduce(Ve2)) & ((~visSomeExp(Ve2red)) & visValue(Ve2))) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vsubst(Vx,Ve2,Ve1)))))))).
fof('reduce4', axiom, (![Vx,VS,Ve1,Ve2red,Ve2,VExp0,RESULT] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) => (((Ve2red=vreduce(Ve2)) & ((~visSomeExp(Ve2red)) & (~visValue(Ve2)))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce5', axiom, (![Ve1,VExp0,RESULT,Ve1red,Ve2] : (((VExp0=vapp(Ve1,Ve2)) & (![VVx0,VVS0,VVe10] : (Ve1!=vabs(VVx0,VVS0,VVe10)))) => (((Ve1red=vreduce(Ve1)) & visSomeExp(Ve1red)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vapp(vgetSomeExp(Ve1red),Ve2)))))))).
fof('reduce6', axiom, (![Ve2,Ve1,Ve1red,VExp0,RESULT] : (((VExp0=vapp(Ve1,Ve2)) & (![VVx0,VVS0,VVe10] : (Ve1!=vabs(VVx0,VVS0,VVe10)))) => (((Ve1red=vreduce(Ve1)) & (~visSomeExp(Ve1red))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce7', axiom, (![Vx2,Vt2,VT,VExp0,RESULT,Vx1,Vv,Vt1] : ((VExp0=vcase(vinl(Vv,VT),Vx1,Vt1,Vx2,Vt2)) => (visValue(vinl(Vv,VT)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vsubst(Vx1,Vv,Vt1)))))))).
fof('reduce8', axiom, (![Vv,VT,VExp0,RESULT,Vvred,Vx1,Vt1,Vx2,Vt2] : ((VExp0=vcase(vinl(Vv,VT),Vx1,Vt1,Vx2,Vt2)) => (((~visValue(vinl(Vv,VT))) & ((Vvred=vreduce(vinl(Vv,VT))) & visSomeExp(Vvred))) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vcase(vgetSomeExp(Vvred),Vx1,Vt1,Vx2,Vt2)))))))).
fof('reduce9', axiom, (![Vx1,Vt1,Vx2,Vt2,Vv,VT,Vvred,VExp0,RESULT] : ((VExp0=vcase(vinl(Vv,VT),Vx1,Vt1,Vx2,Vt2)) => (((~visValue(vinl(Vv,VT))) & ((Vvred=vreduce(vinl(Vv,VT))) & (~visSomeExp(Vvred)))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce10', axiom, (![Vx1,Vt1,VT,VExp0,RESULT,Vx2,Vv,Vt2] : ((VExp0=vcase(vinr(Vv,VT),Vx1,Vt1,Vx2,Vt2)) => (visValue(vinr(Vv,VT)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vsubst(Vx2,Vv,Vt2)))))))).
fof('reduce11', axiom, (![Vv,VT,VExp0,RESULT,Vvred,Vx1,Vt1,Vx2,Vt2] : ((VExp0=vcase(vinr(Vv,VT),Vx1,Vt1,Vx2,Vt2)) => (((~visValue(vinr(Vv,VT))) & ((Vvred=vreduce(vinr(Vv,VT))) & visSomeExp(Vvred))) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vcase(vgetSomeExp(Vvred),Vx1,Vt1,Vx2,Vt2)))))))).
fof('reduce12', axiom, (![Vx1,Vt1,Vx2,Vt2,Vv,VT,Vvred,VExp0,RESULT] : ((VExp0=vcase(vinr(Vv,VT),Vx1,Vt1,Vx2,Vt2)) => (((~visValue(vinr(Vv,VT))) & ((Vvred=vreduce(vinr(Vv,VT))) & (~visSomeExp(Vvred)))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce13', axiom, (![Ve,VExp0,RESULT,Vered,Vx1,Vt1,Vx2,Vt2] : (((VExp0=vcase(Ve,Vx1,Vt1,Vx2,Vt2)) & ((![VVv0,VVT0] : (Ve!=vinr(VVv0,VVT0))) & (![VVv1,VVT1] : (Ve!=vinl(VVv1,VVT1))))) => (((Vered=vreduce(Ve)) & visSomeExp(Vered)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vcase(vgetSomeExp(Vered),Vx1,Vt1,Vx2,Vt2)))))))).
fof('reduce14', axiom, (![Vx1,Vt1,Vx2,Vt2,Ve,Vered,VExp0,RESULT] : (((VExp0=vcase(Ve,Vx1,Vt1,Vx2,Vt2)) & ((![VVv0,VVT0] : (Ve!=vinr(VVv0,VVT0))) & (![VVv1,VVT1] : (Ve!=vinl(VVv1,VVT1))))) => (((Vered=vreduce(Ve)) & (~visSomeExp(Vered))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce15', axiom, (![Ve,VExp0,RESULT,Vered,VT] : ((VExp0=vinl(Ve,VT)) => (((Vered=vreduce(Ve)) & visSomeExp(Vered)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vinl(vgetSomeExp(Vered),VT)))))))).
fof('reduce16', axiom, (![VT,Ve,Vered,VExp0,RESULT] : ((VExp0=vinl(Ve,VT)) => (((Vered=vreduce(Ve)) & (~visSomeExp(Vered))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce17', axiom, (![Ve,VExp0,RESULT,Vered,VT] : ((VExp0=vinr(Ve,VT)) => (((Vered=vreduce(Ve)) & visSomeExp(Vered)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vinr(vgetSomeExp(Vered),VT)))))))).
fof('reduce18', axiom, (![VT,Ve,Vered,VExp0,RESULT] : ((VExp0=vinr(Ve,VT)) => (((Vered=vreduce(Ve)) & (~visSomeExp(Vered))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce-INV', axiom, (![VExp0,RESULT] : ((reduce(VExp0)=RESULT) => ((?[Vx] : ((VExp0=vvar(Vx)) & (RESULT=vnoExp))) | ((?[Vx,VS,Ve] : ((VExp0=vabs(Vx,VS,Ve)) & (RESULT=vnoExp))) | ((?[Ve2,Vx,VS,Ve1,Ve2red] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) & ((Ve2red=vreduce(Ve2)) & (visSomeExp(Ve2red) & (RESULT=vsomeExp(vapp(vabs(Vx,VS,Ve1),vgetSomeExp(Ve2red)))))))) | ((?[VS,Ve2red,Vx,Ve2,Ve1] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) & ((Ve2red=vreduce(Ve2)) & ((~visSomeExp(Ve2red)) & (visValue(Ve2) & (RESULT=vsomeExp(vsubst(Vx,Ve2,Ve1)))))))) | ((?[Vx,VS,Ve1,Ve2red,Ve2] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) & ((Ve2red=vreduce(Ve2)) & ((~visSomeExp(Ve2red)) & ((~visValue(Ve2)) & (RESULT=vnoExp)))))) | ((?[Ve1,Ve1red,Ve2] : ((VExp0=vapp(Ve1,Ve2)) & ((![VVx0,VVS0,VVe10] : (Ve1!=vabs(VVx0,VVS0,VVe10))) & ((Ve1red=vreduce(Ve1)) & (visSomeExp(Ve1red) & (RESULT=vsomeExp(vapp(vgetSomeExp(Ve1red),Ve2)))))))) | ((?[Ve2,Ve1,Ve1red] : ((VExp0=vapp(Ve1,Ve2)) & ((![VVx0,VVS0,VVe10] : (Ve1!=vabs(VVx0,VVS0,VVe10))) & ((Ve1red=vreduce(Ve1)) & ((~visSomeExp(Ve1red)) & (RESULT=vnoExp)))))) | ((?[Vx2,Vt2,VT,Vx1,Vv,Vt1] : ((VExp0=vcase(vinl(Vv,VT),Vx1,Vt1,Vx2,Vt2)) & (visValue(vinl(Vv,VT)) & (RESULT=vsomeExp(vsubst(Vx1,Vv,Vt1)))))) | ((?[Vv,VT,Vvred,Vx1,Vt1,Vx2,Vt2] : ((VExp0=vcase(vinl(Vv,VT),Vx1,Vt1,Vx2,Vt2)) & ((~visValue(vinl(Vv,VT))) & ((Vvred=vreduce(vinl(Vv,VT))) & (visSomeExp(Vvred) & (RESULT=vsomeExp(vcase(vgetSomeExp(Vvred),Vx1,Vt1,Vx2,Vt2)))))))) | ((?[Vx1,Vt1,Vx2,Vt2,Vv,VT,Vvred] : ((VExp0=vcase(vinl(Vv,VT),Vx1,Vt1,Vx2,Vt2)) & ((~visValue(vinl(Vv,VT))) & ((Vvred=vreduce(vinl(Vv,VT))) & ((~visSomeExp(Vvred)) & (RESULT=vnoExp)))))) | ((?[Vx1,Vt1,VT,Vx2,Vv,Vt2] : ((VExp0=vcase(vinr(Vv,VT),Vx1,Vt1,Vx2,Vt2)) & (visValue(vinr(Vv,VT)) & (RESULT=vsomeExp(vsubst(Vx2,Vv,Vt2)))))) | ((?[Vv,VT,Vvred,Vx1,Vt1,Vx2,Vt2] : ((VExp0=vcase(vinr(Vv,VT),Vx1,Vt1,Vx2,Vt2)) & ((~visValue(vinr(Vv,VT))) & ((Vvred=vreduce(vinr(Vv,VT))) & (visSomeExp(Vvred) & (RESULT=vsomeExp(vcase(vgetSomeExp(Vvred),Vx1,Vt1,Vx2,Vt2)))))))) | ((?[Vx1,Vt1,Vx2,Vt2,Vv,VT,Vvred] : ((VExp0=vcase(vinr(Vv,VT),Vx1,Vt1,Vx2,Vt2)) & ((~visValue(vinr(Vv,VT))) & ((Vvred=vreduce(vinr(Vv,VT))) & ((~visSomeExp(Vvred)) & (RESULT=vnoExp)))))) | ((?[Ve,Vered,Vx1,Vt1,Vx2,Vt2] : ((VExp0=vcase(Ve,Vx1,Vt1,Vx2,Vt2)) & ((![VVv0,VVT0] : (Ve!=vinr(VVv0,VVT0))) & ((![VVv1,VVT1] : (Ve!=vinl(VVv1,VVT1))) & ((Vered=vreduce(Ve)) & (visSomeExp(Vered) & (RESULT=vsomeExp(vcase(vgetSomeExp(Vered),Vx1,Vt1,Vx2,Vt2))))))))) | ((?[Vx1,Vt1,Vx2,Vt2,Ve,Vered] : ((VExp0=vcase(Ve,Vx1,Vt1,Vx2,Vt2)) & ((![VVv0,VVT0] : (Ve!=vinr(VVv0,VVT0))) & ((![VVv1,VVT1] : (Ve!=vinl(VVv1,VVT1))) & ((Vered=vreduce(Ve)) & ((~visSomeExp(Vered)) & (RESULT=vnoExp))))))) | ((?[Ve,Vered,VT] : ((VExp0=vinl(Ve,VT)) & ((Vered=vreduce(Ve)) & (visSomeExp(Vered) & (RESULT=vsomeExp(vinl(vgetSomeExp(Vered),VT))))))) | ((?[VT,Ve,Vered] : ((VExp0=vinl(Ve,VT)) & ((Vered=vreduce(Ve)) & ((~visSomeExp(Vered)) & (RESULT=vnoExp))))) | ((?[Ve,Vered,VT] : ((VExp0=vinr(Ve,VT)) & ((Vered=vreduce(Ve)) & (visSomeExp(Vered) & (RESULT=vsomeExp(vinr(vgetSomeExp(Vered),VT))))))) | (?[VT,Ve,Vered] : ((VExp0=vinr(Ve,VT)) & ((Vered=vreduce(Ve)) & ((~visSomeExp(Vered)) & (RESULT=vnoExp)))))))))))))))))))))))))).
fof('reduce-CODOM', axiom, (![Ve,Vres] : ((vreduce(Ve)=Vres) => ((Vres=vnoExp) | (?[Ve2] : (Vres=vsomeExp(Ve2))))))).
fof('EQ-arrow', axiom, (![VTyp0,VTyp1,VTyp2,VTyp3] : (((varrow(VTyp0,VTyp1)=varrow(VTyp2,VTyp3)) => ((VTyp0=VTyp2) & (VTyp1=VTyp3))) & (((VTyp0=VTyp2) & (VTyp1=VTyp3)) => (varrow(VTyp0,VTyp1)=varrow(VTyp2,VTyp3)))))).
fof('EQ-sum', axiom, (![VTyp0,VTyp1,VTyp2,VTyp3] : (((vsum(VTyp0,VTyp1)=vsum(VTyp2,VTyp3)) => ((VTyp0=VTyp2) & (VTyp1=VTyp3))) & (((VTyp0=VTyp2) & (VTyp1=VTyp3)) => (vsum(VTyp0,VTyp1)=vsum(VTyp2,VTyp3)))))).
fof('DIFF-arrow-sum', axiom, (![VTyp0,VTyp1,VTyp2,VTyp3] : (varrow(VTyp0,VTyp1)!=vsum(VTyp2,VTyp3)))).
fof('T-var', axiom, (![VC,Vx,VT] : ((vlookup(Vx,VC)=vsomeType(VT)) => vtcheck(VC,vvar(Vx),VT)))).
fof('T-abs', axiom, (![VC,Vx,Ve,VS,VT] : (vtcheck(vbind(Vx,VS,VC),Ve,VT) => vtcheck(VC,vabs(Vx,VS,Ve),varrow(VS,VT))))).
fof('T-app', axiom, (![VS,VC,Ve1,Ve2,VT] : ((vtcheck(VC,Ve1,varrow(VS,VT)) & vtcheck(VC,Ve2,VS)) => vtcheck(VC,vapp(Ve1,Ve2),VT)))).
fof('T-inl', axiom, (![VC,Ve,VT1,VT2] : (vtcheck(VC,Ve,VT1) => vtcheck(VC,vinl(Ve,vsum(VT1,VT2)),vsum(VT1,VT2))))).
fof('T-inr', axiom, (![VC,Ve,VT1,VT2] : (vtcheck(VC,Ve,VT2) => vtcheck(VC,vinr(Ve,vsum(VT1,VT2)),vsum(VT1,VT2))))).
fof('T-case', axiom, (![VT1,VT2,VC,Ve,Vx1,Vt1,Vx2,Vt2,VT] : ((vtcheck(VC,Ve,vsum(VT1,VT2)) & (vtcheck(vbind(Vx1,VT1,VC),Vt1,VT) & vtcheck(vbind(Vx2,VT2,VC),Vt2,VT))) => vtcheck(VC,vcase(Ve,Vx1,Vt1,Vx2,Vt2),VT)))).
fof('T-inv', axiom, (![Ve,VC,VT] : (vtcheck(VC,Ve,VT) => ((?[Vx] : ((Ve=vvar(Vx)) & (vlookup(Vx,VC)=vsomeType(VT)))) | ((?[Vx,Ve2,VT1,VT2] : ((Ve=vabs(Vx,VT1,Ve2)) & ((VT=varrow(VT1,VT2)) & vtcheck(vbind(Vx,VT1,VC),Ve2,VT2)))) | ((?[Ve1,Ve2,VS] : ((Ve=vapp(Ve1,Ve2)) & (vtcheck(VC,Ve1,varrow(VS,VT)) & vtcheck(VC,Ve2,VS)))) | ((?[Vt,VT1,VT2] : ((Ve=vinl(Vt,vsum(VT1,VT2))) & ((VT=vsum(VT1,VT2)) & vtcheck(VC,Vt,VT1)))) | ((?[Vt,VT1,VT2] : ((Ve=vinr(Vt,vsum(VT1,VT2))) & ((VT=vsum(VT1,VT2)) & vtcheck(VC,Vt,VT2)))) | (?[Ve1,Vx1,Vt1,Vx2,Vt2,VT1,VT2] : ((Ve=vcase(Ve1,Vx1,Vt1,Vx2,Vt2)) & (vtcheck(VC,Ve1,vsum(VT1,VT2)) & (vtcheck(vbind(Vx1,VT1,VC),Vt1,VT) & vtcheck(vbind(Vx2,VT2,VC),Vt2,VT))))))))))))).
fof('T-inv-var', axiom, (![Vx,VC,VT] : (vtcheck(VC,vvar(Vx),VT) => (vlookup(Vx,VC)=vsomeType(VT))))).
fof('T-inv-abs', axiom, (![VT,Vx,VT1,VC,Ve] : (vtcheck(VC,vabs(Vx,VT1,Ve),VT) => (?[VT2] : ((VT=varrow(VT1,VT2)) & vtcheck(vbind(Vx,VT1,VC),Ve,VT2)))))).
fof('T-inv-app', axiom, (![Ve1,VT,VC,Ve2] : (vtcheck(VC,vapp(Ve1,Ve2),VT) => (?[VS] : (vtcheck(VC,Ve1,varrow(VS,VT)) & vtcheck(VC,Ve2,VS)))))).
fof('T-inv-inl', axiom, (![VT1,VC,Ve] : (vtcheck(VC,vinl(Ve,VT1),VT1) => (?[VT3,VT4] : ((VT1=vsum(VT3,VT4)) & vtcheck(VC,Ve,VT3)))))).
fof('T-inv-inr', axiom, (![VT1,VC,Ve] : (vtcheck(VC,vinr(Ve,VT1),VT1) => (?[VT3,VT4] : ((VT1=vsum(VT3,VT4)) & vtcheck(VC,Ve,VT4)))))).
fof('T-inv-inl-type', axiom, (![VC,Ve,VT1,VT2] : (vtcheck(VC,vinl(Ve,VT1),VT2) => (VT1=VT2)))).
fof('T-inv-inr-type', axiom, (![VC,Ve,VT1,VT2] : (vtcheck(VC,vinr(Ve,VT1),VT2) => (VT1=VT2)))).
fof('T-inv-case', axiom, (![Ve1,Vx1,Vt1,Vx2,VC,Vt2,VT] : (vtcheck(VC,vcase(Ve1,Vx1,Vt1,Vx2,Vt2),VT) => (?[VT1,VT2] : (vtcheck(VC,Ve1,vsum(VT1,VT2)) & (vtcheck(vbind(Vx1,VT1,VC),Vt1,VT) & vtcheck(vbind(Vx2,VT2,VC),Vt2,VT))))))).
fof('T-Weak', axiom, (![Vx,VS,VC,Ve,VT] : (((vlookup(Vx,VC)=vnoType) & vtcheck(VC,Ve,VT)) => vtcheck(vbind(Vx,VS,VC),Ve,VT)))).
fof('T-Strong', axiom, (![Vx,VS,VC,Ve,VT] : (((~visFreeVar(Vx,Ve)) & vtcheck(vbind(Vx,VS,VC),Ve,VT)) => vtcheck(VC,Ve,VT)))).
fof('T-value-INV', axiom, (![Ve] : (visValue(Ve) => ((?[Vx,VS,Veabs] : (Ve=vabs(Vx,VS,Veabs))) | ((?[Ve1,VT] : ((Ve=vinl(Ve1,VT)) & visValue(Ve1))) | (?[Ve1,VT] : ((Ve=vinr(Ve1,VT)) & visValue(Ve1)))))))).
fof('EQ-e', axiom, (((ve=ve) => $true) & ($true => (ve=ve)))).
fof('T-Progress-T-inl-IH', axiom, (![VT] : ((vtcheck(vempty,ve,VT) & (~visValue(ve))) => (?[Veout] : (vreduce(ve)=vsomeExp(Veout)))))).
fof('T-inr-e-isValue', axiom, (![VT] : ((vtcheck(vempty,vinr(ve,VT),VT) & (vreduce(ve)=vnoExp)) => visValue(ve)))).
fof('T-inr-e-possibilities', conjecture, (![VT] : ((vtcheck(vempty,vinr(ve,VT),VT) & visValue(ve)) => ((?[Vx,VS,Veabs] : (ve=vabs(Vx,VS,Veabs))) | ((?[Ve1,VT2] : ((ve=vinl(Ve1,VT2)) & visValue(Ve1))) | (?[Ve1,VT2] : ((ve=vinr(Ve1,VT2)) & visValue(Ve1)))))))).