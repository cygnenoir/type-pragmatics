module encodingcompstudyQL.QLTypeSystemInv

import encodingcompstudyQL.BasicTypes
import encodingcompstudyQL.QLSyntax
import encodingcompstudyQL.QLSemanticsData
import encodingcompstudyQL.QLTypeSystem

//Do we need this axiom?
axiom 
~mc1 |- ~q : ~mc2
===================================== T-inv-general 
exists ~atm1, ~qm1, ~atm2, ~qm2
	~mc1 == MC(~atm1, ~qm1)
	~mc2 == MC(~atm2, ~qm2)

axiom
MC(~atm1, ~qm1) |- ~q : MC(~atm2, ~qm2)
=============================================== T-inv
OR
=> (~q == qempty) && (~atm2 == atmempty) && (~qm2 == atmempty)
=> exists ~qid, ~l, ~at
		~q == qsingle(question(~qid, ~l, ~at))
		~atm2 == atmbind(~qid, ~at, atmempty)
		~qm2 == atmempty
		lookupATMap(~qid, ~atm1) == noAType
=> exists ~qid, ~at, ~exp
		~q == qsingle(value(~qid, ~at, ~exp))
		~atm2 == atmbind(~qid, ~at, atmempty)
		~qm2 == atmempty
		lookupATMap(~qid, ~atm1) == noAType
		echeck(~atm1, ~exp) == someAType(~at)
=> exists ~qid, ~l, ~at
		~q == qsingle(defquestion(~qid, ~l, ~at))
		~atm2 == atmempty
		~qm2 == atmbind(~qid, ~at, atmempty)
		lookupATMap(~qid, ~qm1) == noAType
=> exists ~qid, ~at
		~q == qsingle(ask(~qid))
		~atm2 == atmbind(~qid, ~at, atmempty)
		~qm2 == atmempty
		lookupATMap(~qid, ~qm1) == someAType(~at)
		lookupATMap(~qid, ~atm1) == noAType
=> exists ~q1, ~q2, ~atmq1, ~atmq2, ~qmq1, ~qmq2
		~q == qseq(~q1, ~q2)
		~atm2 == appendATMap(~atmq1, ~atmq2)
		~qm2 == appendATMap(~qmq1, ~qmq2)
		MC(~atm1, ~qm1) |- ~q1 : MC(~atmq1, ~qmq1)
		MC(appendATMap(~atm1, ~atmq1), appendATMap(~qm1, ~qmq1)) |- ~q2 : MC(~atmq2, ~qmq2)
=> exists ~exp, ~q1, ~q2, ~atmq1, ~atmq2, ~qmq1, ~qmq2
		~q == qcond(~exp, ~q1, ~q2)
		~atm2 == intersectATM(~atmq1, ~atmq2)
		~qm2 == intersectATM(~qmq1, ~qmq2)
		echeck(~atm1, ~exp) == someAType(YesNo)
		MC(~atm1, ~qm1) |- ~q1 : MC(~atmq1, ~qmq1)
		MC(~atm1, ~qm1) |- ~q2 : MC(~atmq2, ~qmq2)
=> exists ~gid, ~q1, ~atmq1, ~qmq1
		~q == qgroup(~gid, ~q1)
		~atm2 == ~atmq1
		~qm2 == ~qmq1
		MC(~atm1, ~qm1) |- ~q1 : MC(~atmq1, ~qmq1)
		
//individual inversion axioms, for certain syntax constructs
lemma
~q == qempty
MC(~atm1, ~qm1) |- ~q : MC(~atm2, ~qm2)
========================================== T-inv-qempty
~atm2 == atmempty
~qm2 == atmempty

lemma
~q == qsingle(question(~qid, ~l, ~at))
MC(~atm1, ~qm1) |- ~q : MC(~atm2, ~qm2)
========================================== T-inv-qsingle-question
~atm2 == atmbind(~qid, ~at, atmempty)
~qm2 == atmempty
lookupATMap(~qid, ~atm1) == noAType

lemma
~q == qsingle(value(~qid, ~at, ~exp))
MC(~atm1, ~qm1) |- ~q : MC(~atm2, ~qm2)
========================================== T-inv-qsingle-value
~atm2 == atmbind(~qid, ~at, atmempty)
~qm2 == atmempty
lookupATMap(~qid, ~atm1) == noAType
echeck(~atm1, ~exp) == someAType(~at)	

lemma
~q == qsingle(defquestion(~qid, ~l, ~at))
MC(~atm1, ~qm1) |- ~q : MC(~atm2, ~qm2)
========================================== T-inv-qsingle-defquestion	
~atm2 == atmempty
~qm2 == atmbind(~qid, ~at, atmempty)
lookupATMap(~qid, ~qm1) == noAType	

lemma
~q == qsingle(ask(~qid))
MC(~atm1, ~qm1) |- ~q : MC(~atm2, ~qm2)
========================================== T-inv-qsingle-ask
exists ~at
	~atm2 == atmbind(~qid, ~at, atmempty)
	~qm2 == atmempty
	lookupATMap(~qid, ~qm1) == someAType(~at)
	lookupATMap(~qid, ~atm1) == noAType
	
lemma
~q == qseq(~q1, ~q2)
MC(~atm1, ~qm1) |- ~q : MC(~atm2, ~qm2)
========================================== T-inv-qseq
exists ~atmq1, ~atmq2, ~qmq1, ~qmq2
	~atm2 == appendATMap(~atmq1, ~atmq2)
	~qm2 == appendATMap(~qmq1, ~qmq2)
	MC(~atm1, ~qm1) |- ~q1 : MC(~atmq1, ~qmq1)
	MC(appendATMap(~atm1, ~atmq1), appendATMap(~qm1, ~qmq1)) |- ~q2 : MC(~atmq2, ~qmq2)
	
lemma
~q == qcond(~exp, ~q1, ~q2)
MC(~atm1, ~qm1) |- ~q : MC(~atm2, ~qm2)
========================================== T-inv-qcond
exists ~atmq1, ~atmq2, ~qmq1, ~qmq2
	~atm2 == intersectATM(~atmq1, ~atmq2)
	~qm2 == intersectATM(~qmq1, ~qmq2)
	echeck(~atm1, ~exp) == someAType(YesNo)
	MC(~atm1, ~qm1) |- ~q1 : MC(~atmq1, ~qmq1)
	MC(~atm1, ~qm1) |- ~q2 : MC(~atmq2, ~qmq2)
	
lemma
~q == qgroup(~gid, ~q1)
MC(~atm1, ~qm1) |- ~q : MC(~atm2, ~qm2)
========================================== T-inv-qgroup
MC(~atm1, ~qm1) |- ~q1 : MC(~atm2, ~qm2)		
		
//Do we need this axiom?		
axiom
qcCheck(MC(~atm0, ~qm0), QC(~am, ~qm, ~q)) == ~atm
======================================================================================= T-inv-qcCheck
exists ~atm1, ~atm2, ~qm2
	typeAM(~am) == ~atm1
	MC(appendATMap(~atm0, ~atm1), appendATMap(~qm0, typeQM(~qm))) |- ~q : MC(~atm2, ~qm2)
	~atm == appendATMap(~atm1, ~atm2)