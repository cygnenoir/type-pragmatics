module encodingcompstudyQL.QLSemantics

import encodingcompstudyQL.QLSyntax
import encodingcompstudyQL.BasicTypes

//answer oracle for Boolean questions
function 
askYesNo : Label -> YN

//answer oracle for Numbers
function
askNumber : Label -> nat

//answer orcale for strings
function
askString : Label -> string

//convenience function for asking the right oracle, given a question label and an answer type
function
getAnswer : Label AType -> Aval
getAnswer(l, YesNo) = B(askYesNo(l))
getAnswer(l, Number) = Num(askNumber(l))
getAnswer(l, Text) = T(askString(l))


function
evalBinOp : BinOp Aval Aval -> OptExp
evalBinOp(add(), Num(n1), Num(n2)) = someExp(constant(Num(plus(n1, n2))))
evalBinOp(sub(), Num(n1), Num(n2)) = someExp(constant(Num(minus(n1, n2))))
evalBinOp(mul(), Num(n1), Num(n2)) = someExp(constant(Num(multiply(n1, n2))))
evalBinOp(div(), Num(n1), Num(n2)) = someExp(constant(Num(divide(n1, n2))))
evalBinOp(gt(), Num(n1), Num(n2)) = someExp(constant(B(gt(n1, n2))))
evalBinOp(lt(), Num(n1), Num(n2)) = someExp(constant(B(lt(n1, n2))))
evalBinOp(and(), B(b1), B(b2)) = someExp(constant(B(and(n1, n2))))
evalBinOp(or(), B(b2), B(b2)) = someExp(constant(B(or(n1, n2))))
evalBinOp(eq(), Num(n1), Num(n2)) = if (n1 == n2) then someExp(constant(B(yes))) else someExp(constant(B(no)))
evalBinOp(eq(), B(b1), B(b2)) = if (b1 == b2) then someExp(constant(B(yes))) else someExp(constant(B(no)))
evalBinOp(eq(), T(t1), T(t2)) = if (t1 == t2) then someExp(constant(B(yes))) else someExp(constant(B(no)))
evalBinOp(op, a1, a2) = noExp

function
evalUnOp : UnOp Aval -> OptExp
evalUnOp(not(), B(b)) = someExp(constant(B(not(b))))
evalUnOp(op, a) = noExp


data OptExp = noExp | someExp(Exp)

function
isSomeExp : OptExp -> Bool
isSomeExp(noExp) = false
isSomeExp(someExp(e)) = true

partial function
getExp : OptExp -> Exp
getExp(someExp(e)) = e

function
expIsValue : Exp -> Bool
expIsValue(constant(av)) = true
expIsValue(e) = false

partial function
getExpValue : Exp -> Aval
getExpValue(constant(av)) = av


//function for evaluating expressions
//this function should fail if it does not find an answer in the given AnsMap
function
reduceExp : Exp AnsMap -> OptExp
reduceExp(constant(av), am) = noExp
reduceExp(qvar(qid), am) =
    let avOpt = lookupAnsMap(qid, am) in
        if (isSomeAval(avOpt))
	then someExp(constant(getAval(avOpt)))
	else noExp
reduceExp(binop(e1, op, e2), am) =
    if (expIsValue(e1) && expIsValue(e2))
    then evalBinOp(op, getExpValue(e1), getExpValue(e2))
    else let eOpt1 = reduceExp(e1, am) in
        if (isSomeExp(eOpt1))
        then someExp(binop(getExp(eOpt1), op, e2))
        else let eOpt2 = reduceExp(e2, am) in
            if (isSomeExp(eOpt2))
            then someExp(binop(e1, op, getExp(e2)))
            else noExp
reduceExp(unop(op, e), am) =
    if (expIsValue(e))
    then evalUnOp(op, getExpValue(e))
    else let eOpt = reduceExp(e, am) in
        if (isSomeExp(eOpt))
	then someExp(evalUnOp(op, getExp(eOpt)))
	else noExp

//main reduction function, for reducing configurations of answermaps and questionnaires to configurations of answermaps and questionnaires
//argument QC: (remaining) questionnaire configuration 
//(in which AnsMap contains all previously given answers - and qb is the remaining questionnaire block)
//returns: Option of QC (where AnsMap contains all answers to the previous questions, 
//qb the remaining questionnaire block)
function
reduce: QC -> OptQC

reduce(QC(am, qm, qempty)) = noQC //cannot reduce value configuration further

reduce(QC(am, qm, qsingle(question(qid, l, t)))) =
    let av = getAnswer(l, t) in
        someQC(QC(abind(qid, av, am), qm, qempty))
reduce(QC(am, qm, qsingle(value(qid, t, e)))) =
    if (expIsValue(e))
    then someQC(QC(abind(qid, getExpValue(e), am), qm, qempty))
    else let eOpt = reduceExp(e, am) in
        if (isSomeExp(eOpt))
	then someQC(QC(am, qm, qsingle(value(qid, t, getExp(eOpt)))))
	else noQC
reduce(QC(am, qm, qsingle(defquestion(qid, l, t)))) =
    let av = getAnswer(l, t) in
        someQC(QC(am, qmbind(qid, l, t, qm), qempty))
reduce(QC(am, qm, qsingle(ask(qid)))) =
    let qOpt = lookupQMap(qid, qm) in
        if (isSomeQuestion(qOpt))
        then someQC(QC(am, qm, qsingle(question(qid, getQuestionLabel(qOpt), getQuestionAType(qOpt)))))
        else noQC

reduce(QC(am, qm, qseq(qempty(), qs2))) = someQC(QC(am, qm, qs2))
reduce(QC(am, qm, qseq(qs1, qs2))) =
    let qcOpt = reduce(QC(am, qm, qs1)) in
        if (isSomeQC(qcOpt))
	then someQC(qcappend(getQC(qcOpt), qs2))
	else noQC

reduce(QC(am, qm, qcond(constant(B(yes)), qs1, qs2))) = someQC(QC(am, qm, qs1))
reduce(QC(am, qm, qcond(constant(B(no)), qs1, qs2))) = someQC(QC(am, qm, qs2))
reduce(QC(am, qm, qcond(e, qs1, qs2))) =
    let eOpt = reduceExp(e, am) in
        if (isSomeExp(eOpt))
	then someQC(QC(am, qm, qcond(getExp(e), qs1, qs2)))
	else noQC

reduce(QC(am, qm, qgroup(gid, qs))) = someQC(QC(am, qm, qs))

