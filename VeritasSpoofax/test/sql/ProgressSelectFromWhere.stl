module sql.ProgressSelectFromWhere

import sql.SoundnessAuxDefs
import sql.TStore
import sql.Tables
import sql.TableAux
import sql.TContext
import sql.TypeSystem
import sql.Semantics
import sql.Syntax

strategy induction-successful-lookup {
	
	goal 
	~TS == emptyStore
	StoreContextConsistent(~TS, ~TTC)
	lookupContext(~tn, ~TTC) == someTType(~tt)
	========================================== successful-lookup-empty
	exists ~t
		lookupStore(~tn, ~TS) = someTable(~t)
		
	local {	
		const TSR: TStore
		
		axiom
		~TS == TSR
		StoreContextConsistent(~TS, ~TTC)
		lookupContext(~tn, ~TTC) == someTType(~tt)
		========================================== successful-lookup-bind-IH
		exists ~t
			lookupStore(~tn, ~TS) = someTable(~t)
		
		goal 
		~TS == bindStore(~tm, ~t, TSR)
		StoreContextConsistent(~TS, ~TTC)
		lookupContext(~tn, ~TTC) == someTType(~tt)
		========================================== successful-lookup-bind
		exists ~t
			lookupStore(~tn, ~TS) = someTable(~t)
	}
	
	hide-all
	axiom
	StoreContextConsistent(~TS, ~TTC)
	lookupContext(~tn, ~TTC) == someTType(~tt)
	========================================== successful-lookup-ind
	exists ~t
		lookupStore(~tn, ~TS) = someTable(~t)
	
}

lemma verify-with induction-successful-lookup 
StoreContextConsistent(~TS, ~TTC)
lookupContext(~tn, ~TTC) == someTType(~tt)
========================================== successful-lookup
exists ~t
	lookupStore(~tn, ~TS) = someTable(~t)
	

strategy induction-welltyped-lookup {
	
	goal
	~TS == emptyStore
	StoreContextConsistent(~TS, ~TTC)
	lookupStore(~tn, ~TS) = someTable(~t)
	lookupContext(~tn, ~TTC) == someTType(~tt)
	========================================== welltyped-lookup-empty
	welltypedtable(~tt, ~t)

	local {
		const TSR : TStore
		
		axiom 
		~TS == TSR
		StoreContextConsistent(~TS, ~TTC)
		lookupStore(~tn, ~TS) = someTable(~t)
		lookupContext(~tn, ~TTC) == someTType(~tt)
		========================================== welltyped-lookup-bind-IH
		welltypedtable(~tt, ~t)
		
		goal
		~TS == bindStore(~tm, ~t, TSR)
		StoreContextConsistent(~TS, ~TTC)
		lookupStore(~tn, ~TS) = someTable(~t)
		lookupContext(~tn, ~TTC) == someTType(~tt)
		========================================== welltyped-lookup-bind
		welltypedtable(~tt, ~t)
	}
	
	hide-all
	axiom
	StoreContextConsistent(~TS, ~TTC)
	lookupStore(~tn, ~TS) = someTable(~t)
	lookupContext(~tn, ~TTC) == someTType(~tt)
	========================================== welltyped-lookup-ind
	welltypedtable(~tt, ~t)
	
}


lemma verify-with induction-welltyped-lookup
StoreContextConsistent(~TS, ~TTC)
lookupStore(~tn, ~TS) = someTable(~t)
lookupContext(~tn, ~TTC) == someTType(~tt)
========================================== welltyped-lookup
welltypedtable(~tt, ~t)

strategy induction-projectTypeAttrL-implies-findAllColType {
	
	goal
	~al == aempty
	projectTypeAttrL(~al, ~tt) == someTType(~tt2)
	attrIn(~n, ~al)
	=========================================== projectTypeAttrL-implies-findAllColType-aempty
	exists ~ft
		findColType(~n, ~tt) == someFType(~ft)
		
	local {
		const alr : AttrL
		
		axiom 
		~al == alr
		projectTypeAttrL(~al, ~tt) == someTType(~tt2)
		attrIn(~n, ~al)
		=========================================== projectTypeAttrL-implies-findAllColType-acons-IH
		exists ~ft
			findColType(~n, ~tt) == someFType(~ft)
			
		goal
		~al == acons(~a, alr)
		projectTypeAttrL(~al, ~tt) == someTType(~tt2)
		attrIn(~n, ~al)
		=========================================== projectTypeAttrL-implies-findAllColType-acons
		exists ~ft
			findColType(~n, ~tt) == someFType(~ft)
	}
	
	
	hide-all
	axiom 
	projectTypeAttrL(~al, ~tt) == someTType(~tt2)
	attrIn(~n, ~al)
	=========================================== projectTypeAttrL-implies-findAllColType-ind
	exists ~ft
		findColType(~n, ~tt) == someFType(~ft)
	
}

strategy induction-dropFirstColRaw-preserves-welltypedRaw {
	
	goal
	~rt == tempty
	~tt == ttcons(~n, ~ft, ~ttr)
	welltypedRawtable(~tt, ~rt)
	============================================= dropFirstColRaw-preserves-welltypedRaw-tempty
	welltypedRawtable(~ttr, dropFirstColRaw(~rt))
	
	local {
		const rtr : RawTable
		
		axiom
		~rt == rtr
		~tt == ttcons(~n, ~ft, ~ttr)
		welltypedRawtable(~tt, ~rt)
		============================================= dropFirstColRaw-preserves-welltypedRaw-tcons-IH
		welltypedRawtable(~ttr, dropFirstColRaw(~rt))
		
		goal
		~rt == tcons(~r, rtr)
		~tt == ttcons(~n, ~ft, ~ttr)
		welltypedRawtable(~tt, ~rt)
		============================================= dropFirstColRaw-preserves-welltypedRaw-tcons
		welltypedRawtable(~ttr, dropFirstColRaw(~rt))
	}
	
	hide-all
	axiom
	~tt == ttcons(~n, ~ft, ~ttr)
	welltypedRawtable(~tt, ~rt)
	============================================= dropFirstColRaw-preserves-welltypedRaw-ind
	welltypedRawtable(~ttr, dropFirstColRaw(~rt))
}

strategy induction-findColType-implies-findCol {
	
	goal
	~al == aempty
	welltypedtable(~tt, table(~al, ~rt))
	findColType(~n, ~tt) == someFType(~ft)
	=============================================== findColType-implies-findCol-aempty
	exists ~rt
		findCol(~n, ~al, ~rt) == someRawTable(~rt)
		
	local {
		const alr : AttrL
		
		axiom 
		~al == alr
		welltypedtable(~tt, table(~al, ~rt))
		findColType(~n, ~tt) == someFType(~ft)
		=============================================== findColType-implies-findCol-acons-IH
		exists ~rt
			findCol(~n, ~al, ~rt) == someRawTable(~rt)
			
		lemma verify-with induction-dropFirstColRaw-preserves-welltypedRaw
		~tt == ttcons(~n, ~ft, ~ttr)
		welltypedRawtable(~tt, ~rt)
		============================================= dropFirstColRaw-preserves-welltypedRaw
		welltypedRawtable(~ttr, dropFirstColRaw(~rt))
			
		goal 
		~al == acons(~a, alr)
		welltypedtable(~tt, table(~al, ~rt))
		findColType(~n, ~tt) == someFType(~ft)
		=============================================== findColType-implies-findCol-acons
		exists ~rt
			findCol(~n, ~al, ~rt) == someRawTable(~rt)
		
	}
	
	hide-all
	axiom
	welltypedtable(~tt, table(~al, ~rt))
	findColType(~n, ~tt) == someFType(~ft)
	=============================================== findColType-implies-findCol-ind
	exists ~rt
		findCol(~n, ~al, ~rt) == someRawTable(~rt)
}

strategy induction-projectType-implies-findCol {
	
	goal
	~al2 == aempty
	welltypedtable(~tt, table(~al, ~rt))
	projectTypeAttrL(~al2, ~tt) == someTType(~tt2)
	attrIn(~n, ~al2)
	=============================================== projectType-implies-findCol-aempty
	exists ~rt2
		findCol(~n, ~al, ~rt) == someRawTable(~rt2)
		
	local {
		const alr: AttrL
		
		axiom
		~al2 == alr
		welltypedtable(~tt, table(~al, ~rt))
		projectTypeAttrL(~al2, ~tt) == someTType(~tt2)
		attrIn(~n, ~al2)
		=============================================== projectType-implies-findCol-acons-IH
		exists ~rt2
			findCol(~n, ~al, ~rt) == someRawTable(~rt2)
			
		lemma verify-with induction-projectTypeAttrL-implies-findAllColType
		projectTypeAttrL(~al, ~tt) == someTType(~tt2)
		attrIn(~n, ~al)
		=============================================== projectTypeAttrL-implies-findAllColType
		exists ~ft
			 findColType(~n, ~tt) == someFType(~ft)
			 
		lemma verify-with induction-findColType-implies-findCol
		welltypedtable(~tt, table(~al, ~rt))
		findColType(~n, ~tt) == someFType(~ft)
		=============================================== findColType-implies-findCol
		exists ~rt
			findCol(~n, ~al, ~rt) == someRawTable(~rt)
	
		goal
		~al2 == acons(~a, alr)
		welltypedtable(~tt, table(~al, ~rt))
		projectTypeAttrL(~al2, ~tt) == someTType(~tt2)
		attrIn(~n, ~al2)
		=============================================== projectType-implies-findCol-acons
		exists ~rt2
			findCol(~n, ~al, ~rt) == someRawTable(~rt2)
			
	}
	
	hide-all
	axiom
	welltypedtable(~tt, table(~al, ~rt))
	projectTypeAttrL(~al2, ~tt) == someTType(~tt2)
	attrIn(~n, ~al2)
	=============================================== projectType-implies-findCol-ind
	exists ~rt2
		findCol(~n, ~al, ~rt) == someRawTable(~rt2)
}

	
strategy induction-projectCols-progress {
	
	goal
	~al2 == aempty
	welltypedtable(~tt, table(~al, ~rt))
	projectType(list(~al2), ~tt) == someTType(~tt2)
	================================================= projectCols-progress-aempty
	exists ~rt2
	   projectCols(~al2, ~al, ~rt) == someRawTable(~rt2)
	   
	local {
		const alr: AttrL
		
		axiom
		~al2 == alr
		welltypedtable(~tt, table(~al, ~rt))
		projectType(list(~al2), ~tt) == someTType(~tt2)
		================================================= projectCols-progress-acons-IH
		exists ~rt2
	   		projectCols(~al2, ~al, ~rt) == someRawTable(~rt2)
	   		
	   	lemma verify-with induction-projectType-implies-findCol 
		welltypedtable(~tt, table(~al, ~rt))
		projectTypeAttrL(~al2, ~tt) == someTType(~tt2)
		attrIn(~n, ~al2)
		=============================================== projectType-implies-findCol
		exists ~rt2
			findCol(~n, ~al, ~rt) == someRawTable(~rt2)
	   		
	   	goal 
	   	~al2 == acons(~a, alr)
		welltypedtable(~tt, table(~al, ~rt))
		projectType(list(~al2), ~tt) == someTType(~tt2)
		================================================= projectCols-progress-acons
		exists ~rt2
	   		projectCols(~al2, ~al, ~rt) == someRawTable(~rt2)
		
	}
	
	hide-all
	axiom
	welltypedtable(~tt, table(~al, ~rt))
	projectType(list(~al2), ~tt) == someTType(~tt2)
	================================================= projectCols-progress-ind
	exists ~rt2
	   projectCols(~al2, ~al, ~rt) == someRawTable(~rt2)
	   

}

strategy projectTable-aux {
	lemma verify-with induction-projectCols-progress
	welltypedtable(~tt, table(~al, ~rt))
	projectType(list(~al2), ~tt) == someTType(~tt2)
	===================================================== projectCols-progress
	exists ~rt2
		  projectCols(~al2, ~al, ~rt) == someRawTable(~rt2)
}
	

strategy projectTable-progress-aux {
		
		lemma verify-with projectTable-aux
		welltypedtable(~tt, ~t)
		projectType(~s, ~tt) == someTType(~tt2)
		=================================================== projectTable-progress
		exists ~t2
			projectTable(~s, ~t) == someTable(~t2)
}

strategy induction-filterRows-preserves-table {
	
	goal
	~rt == tempty
	welltypedRawtable(~tt, ~rt)
	================================================== filterRows-preserves-table-tempty
	welltypedRawtable(~tt, filterRows(~rt, ~al, ~p))
	
	local {
		const rtr : RawTable
		
		axiom
		~rt == rtr
		welltypedRawtable(~tt, ~rt)
		================================================== filterRows-preserves-table-tcons-IH
		welltypedRawtable(~tt, filterRows(~rt, ~al, ~p))
		
		goal
		~rt == tcons(~r, rtr)
		welltypedRawtable(~tt, ~rt)
		================================================== filterRows-preserves-table-tcons
		welltypedRawtable(~tt, filterRows(~rt, ~al, ~p))
		
	}
	
	hide-all
	axiom 
	welltypedRawtable(~tt, ~rt)
	================================================== filterRows-preserves-table-ind
	welltypedRawtable(~tt, filterRows(~rt, ~al, ~p))

}

strategy filter-preserves-type-aux {
	
	lemma verify-with induction-filterRows-preserves-table
	welltypedRawtable(~tt, ~rt)
	================================================== filterRows-preserves-table
	welltypedRawtable(~tt, filterRows(~rt, ~al, ~p))

}

strategy filter-preserves-type-lemma {
	lemma verify-with filter-preserves-type-aux
	welltypedtable(~tt, ~t)
	================================================== filter-preserves-type
	welltypedtable(~tt, filterTable(~t, ~p))		

}







