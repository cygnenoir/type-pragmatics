{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18700\viewh20820\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 Requirements ProofGraph\
\
- Versioning of Graph should be possible (for logging a version history)\
- being able to tell the difference between two graphs (graph diff)\
- persist a snapshot (several?)\
- easy cloning/copying of graphs\
- event handling (register listeners, to update e.g. visualization of the graphs once sth. changes) -> ProofGraph class could do this, not necessarily the data base\
- parallel processing should be possible (safely) -> immutability or snapshot isolation / transactions (that are as small as possible)\
(- if data bases used: Spec could also already be a part of a data base, to make persisting the data base more efficient\
Specification as view on a data base of specification elements; entities should be as small as possible; for each field in the UML diagram one has to decide whether its a property or a link)\
- enable graph queries (fold/map/filter\'85) -> ProofGraph could encapsulate that\
- history: commit yourself whenever you want to keep a change (git-style, no merge)\
- always only add steps to the data base; history consists of different graph entities with their own links to steps; edge entities require version ranges on the labels? (for graph traversal)\
- garbage collection? - e.g. in Xodus, what is expired data?\
- leave version control for later ;)\
}