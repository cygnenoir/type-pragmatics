module stlcP.SubstLemmaAux

import stlcP.Syntax
import stlcP.Context
import stlcP.Subst
import stlcP.AlphaEquivalence
import stlcP.Types


//Auxiliary lemmas for on contexts

//Proof by structural induction 

// goal
// ~e == var(~y)
// !isFreeVar(~x, ~e)
// ~C |- ~e : ~T
// ================================ T-Weak-FreeVar-var
// bind(~x, ~S, ~C) |- ~e : ~T

goal
!isFreeVar(~x, var(~y))
~C |- var(~y) : ~T
================================ T-Weak-FreeVar-var
bind(~x, ~S, ~C) |- var(~y) : ~T

local {
	const eabs : Exp

	axiom
	!isFreeVar(~x, eabs)
	~C |- eabs : ~T
	============================== T-Weak-FreeVar-abs-IH
	bind(~x, ~S, ~C) |- eabs : ~T
	
	goal
	~x != ~y
	!isFreeVar(~x, abs(~y, ~S1, eabs))
	~C |- abs(~y, ~S1, eabs) : ~T
	============================= T-Weak-FreeVar-abs-1
	bind(~x, ~S, ~C) |- abs(~y, ~S1, eabs) : ~T
}

local {
	consts
	   e1 : Exp
	   e2 : Exp
	
	axioms
	!isFreeVar(~x, e1)
	~C |- e1 : ~T
	=================== T-Weak-FreeVar-pair-IH1
	bind(~x, ~S, ~C) |- e1 : ~T
	
	axioms
	!isFreeVar(~x, e2)
	~C |- e2 : ~T
	==================== T-Weak-FreeVar-pair-IH2
	bind(~x, ~S, ~C) |- e2 : ~T
	
	lemma
	!isFreeVar(~x, pair(e1, e2))
	~C |- pair(e1, e2) : ~T
	===================================== T-Strong-pair-use-INV
	exists ~T1, ~T2
	  ~T == pairType(~T1, ~T2)
	  ~C |- e1 : ~T1
	  ~C |- e2 : ~T2
	
	lemma
	!isFreeVar(~x, pair(e1, e2))
	~C |- pair(e1, e2) : ~T
	===================================== T-Strong-pair-use-IH
	exists ~T1, ~T2
	  ~T == pairType(~T1, ~T2)
	  ~C |- e1 : ~T1
	  ~C |- e2 : ~T2
	  bind(~x, ~S, ~C) |- e1 : ~T1
	  bind(~x, ~S, ~C) |- e2 : ~T2
	
	goal
	!isFreeVar(~x, pair(e1, e2))
	~C |- pair(e1, e2) : ~T
	==================== T-Weak-FreeVar-pair
	bind(~x, ~S, ~C) |- pair(e1, e2) : ~T
}

local {
	consts
	   e1 : Exp
	   e2 : Exp
	
	axioms
	!isFreeVar(~x, e1)
	~C |- e1 : ~T
	=================== T-Weak-FreeVar-first-IH
	bind(~x, ~S, ~C) |- e1 : ~T

	goal
	~e == first(e1)
	!isFreeVar(~x, ~e)
	~C |- ~e : ~T
	==================== T-Weak-FreeVar-first
	bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	consts
	   e1 : Exp
	   e2 : Exp
	
	axioms
	!isFreeVar(~x, e1)
	~C |- e1 : ~T
	=================== T-Weak-FreeVar-second-IH
	bind(~x, ~S, ~C) |- e1 : ~T

	goal
	~e == second(e1)
	!isFreeVar(~x, ~e)
	~C |- ~e : ~T
	==================== T-Weak-FreeVar-second
	bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	const eabs : Exp
	
	axiom
	~e == abs(~y, ~S1, ~e1)
	~x != ~y
	!isFreeVar(~x, ~e)
	~C |- ~e : ~T
	============================= T-Weak-FreeVar-abs-1
	bind(~x, ~S, ~C) |- ~e : ~T
	
	
	//necessary axioms on alpha equivalence
	axioms
	============================ alpha-equiv-refl
	alphaEquivalent(~e, ~e)


	alphaEquivalent(~e1, ~e2)
	============================ alpha-equiv-sym
	alphaEquivalent(~e2, ~e1)

 
	alphaEquivalent(~e1, ~e2)
	alphaEquivalent(~e2, ~e3)
	============================ alpha-equiv-trans
	alphaEquivalent(~e1, ~e3)

	!isFreeVar(~y, ~e)
	====================================================================== alpha-equiv-subst-abs
	alphaEquivalent(abs(~x, ~S, ~e), abs(~y, ~S, subst(~x, var(~y), ~e)))


	~C |- ~e : ~T
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-typing
	~C |- ~e1 : ~T
	
	!isFreeVar(~x, ~e)
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-FreeVar
	!isFreeVar(~x, ~e1)

	//NOT needed!
	axiom
	!isFreeVar(~x, eabs)
	~C |- eabs : ~T
	============================== T-Weak-FreeVar-abs-IH
	bind(~x, ~S, ~C) |- eabs : ~T

	goal
	~e == abs(~y, ~S1, eabs)
	~x == ~y
	!isFreeVar(~x, ~e)
	~C |- ~e : ~T
	======================================== T-Weak-FreeVar-abs-2
	bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	consts
		e1app : Exp
		e2app : Exp
		
	axioms
	!isFreeVar(~x, e1app)
	~C |- e1app : ~T
	=============================== T-Weak-FreeVar-app-IH1
	bind(~x, ~S, ~C) |- e1app : ~T
	
	!isFreeVar(~x, e2app)
	~C |- e2app : ~T
	=============================== T-Weak-FreeVar-app-IH2
	bind(~x, ~S, ~C) |- e2app : ~T
	
	lemma
	~C |- app(e1app, e2app) : ~T
	=========================== T-Weak-FreeVar-app-use-INV
	exists ~S1
	  ~C |- e1app : arrow(~S1, ~T)
	  ~C |- e2app : ~S1

    lemma
	~e == app(e1app, e2app)
	!isFreeVar(~x, ~e)
	~C |- ~e : ~T
	=========================== T-Weak-FreeVar-app-use-IH
	exists ~S1
	  bind(~x, ~S, ~C) |- e1app : arrow(~S1, ~T)
	  bind(~x, ~S, ~C) |- e2app : ~S1
	
	// goal
	// ~e == app(e1app, e2app)
	// !isFreeVar(~x, ~e)
	// ~C |- ~e : ~T
	// ========================================= T-Weak-FreeVar-app
	// bind(~x, ~S, ~C) |- ~e : ~T
	
	goal
	!isFreeVar(~x, app(e1app, e2app))
	~C |- app(e1app, e2app) : ~T
	========================================= T-Weak-FreeVar-app
	bind(~x, ~S, ~C) |- app(e1app, e2app) : ~T
}


