module stlcP.SubstLemma

import stlcP.Syntax
import stlcP.Context
import stlcP.Types
import stlcP.Gensym
import stlcP.AlphaEquivalence
import stlcP.Subst
import stlcP.SubstLemmaAux

goal
~e2 == var(~y)
~C |- ~e : ~T
bind(~x, ~T, ~C) |- ~e2 : ~T2
============================== T-subst-var
~C |- subst(~x, ~e, ~e2) : ~T2

local {
	consts
		e1 : Exp
		e2 : Exp
	
	axioms
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e1 : ~T2
	============================= T-subst-pair-IH1
	~C |- subst(~x, ~e, e1) : ~T2
	
	axioms
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e2 : ~T2
	============================= T-subst-pair-IH2
	~C |- subst(~x, ~e, e2) : ~T2
	
	// lemma
	// ~C |- ~e : ~T
	// bind(~x, ~T, ~C) |- pair(e1, e2) : ~T2
	// ============================== T-subst-pair-use-INV
	// exists ~T1, ~T3
	//   ~T2 == pairType(~T1, ~T3)
	//   bind(~x, ~T, ~C) |- e1 : ~T1
	//   bind(~x, ~T, ~C) |- e2 : ~T3
	  
	lemma
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- pair(e1, e2) : ~T2
	============================== T-subst-pair-use-IH
	exists ~T1, ~T3
	  ~T2 == pairType(~T1, ~T3)
	  ~C |- subst(~x, ~e, e1) : ~T1
	  ~C |- subst(~x, ~e, e2) : ~T3
	  
	goal
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- pair(e1, e2) : ~T2
	============================== T-subst-pair
	~C |- subst(~x, ~e, pair(e1, e2)) : ~T2
	
	// goal
	// ~e3 == pair(e1, e2)
	// ~C |- ~e : ~T
	// bind(~x, ~T, ~C) |- ~e3 : ~T2
	// ============================== T-subst-pair
	// ~C |- subst(~x, ~e, ~e3) : ~T2
}

local {
	consts
		e1 : Exp
	
	axioms
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e1 : ~T2
	============================= T-subst-first-IH
	~C |- subst(~x, ~e, e1) : ~T2

	goal
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- first(e1) : ~T2
	============================== T-subst-first
	~C |- subst(~x, ~e, first(e1)) : ~T2
	
	// goal
	// ~e2 == first(e1)
	// ~C |- ~e : ~T
	// bind(~x, ~T, ~C) |- ~e2 : ~T2
	// ============================== T-subst-first
	// ~C |- subst(~x, ~e, ~e2) : ~T2
}

local {
	consts
		e1 : Exp
	
	axioms
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e1 : ~T2
	============================= T-subst-second-IH
	~C |- subst(~x, ~e, e1) : ~T2

	goal
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- second(e1) : ~T2
	============================== T-subst-second
	~C |- subst(~x, ~e, second(e1)) : ~T2

	// goal
	// ~e2 == second(e1)
	// ~C |- ~e : ~T
	// bind(~x, ~T, ~C) |- ~e2 : ~T2
	// ============================== T-subst-second
	// ~C |- subst(~x, ~e, ~e2) : ~T2
}

local {
	consts
		e1 : Exp
		e2 : Exp
	
	axioms
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e1 : ~T2
	============================== T-subst-IH-app1
	~C |- subst(~x, ~e, e1) : ~T2
	
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e2 : ~T2
	============================== T-subst-IH-app2
	~C |- subst(~x, ~e, e2) : ~T2
	
	lemma
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- app(e1, e2) : ~T2
	============================== T-subst-app-use-INV
	exists ~S
	  bind(~x, ~T, ~C) |- e1 : arrow(~S, ~T2)
	  bind(~x, ~T, ~C) |- e2 : ~S
	  
	lemma
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- app(e1, e2) : ~T2
	============================== T-subst-app-use-IH
	exists ~S
	  ~C |- subst(~x, ~e, e1) : arrow(~S, ~T2)
	  ~C |- subst(~x, ~e, e2) : ~S
	
	goal
	~e3 == app(e1, e2)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- ~e3 : ~T2
	====================================== T-subst-app
	~C |- subst(~x, ~e, ~e3) : ~T2
}

goal
~e2 == abs(~y, ~S, ~e1)
~x == ~y
~C |- ~e : ~T
bind(~x, ~T, ~C) |- ~e2 : ~T2
=========================================== T-subst-abs-1
~C |- subst(~x, ~e, ~e2) : ~T2


local {
	const eabs : Exp
	
	//Lemma must be used locally only here! Proof is in SubstLemmaAux.stl
	
	axiom
	!isFreeVar(~x, ~e)
	~C |- ~e : ~T
	=========================== T-Weak-FreeVar
	bind(~x, ~S, ~C) |- ~e : ~T
	
	axiom
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- eabs : ~T2
	============================== T-subst-IH-abs
	~C |- subst(~x, ~e, eabs) : ~T2
	
	lemma
	~C |- abs(~x, ~T1, ~e) : ~T
	=========================== T-inv-abs
	exists ~T2
	  ~T == arrow(~T1, ~T2)
	  bind(~x, ~T1, ~C) |- ~e : ~T2
	
	lemma
	~e2 == abs(~y, ~S, eabs)
	~x != ~y
	!isFreeVar(~y, ~e)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- ~e2: ~T2
	========================================= T-subst-abs-2-use-IH
	exists ~T3
	  ~T2 == arrow(~S, ~T3)
	  bind(~y, ~S, ~C) |- subst(~x, ~e, eabs) : ~T3
		
	goal
	~e2 == abs(~y, ~S, eabs)
	~x != ~y
	!isFreeVar(~y, ~e)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- ~e2: ~T2
	================================================= T-subst-abs-2
	~C |- subst(~x, ~e, ~e2) : ~T2
}


local {
	const eabs : Exp
	hide-all
	include { isFreeVar0, isFreeVar1, isFreeVar2, isFreeVar3, isFreeVar4, isFreeVar5,
	          subst0, subst1, subst2, subst3, subst4, subst5, subst6, subst7, subst8,
	          gensym-is-fresh }
	axiom
	~e2 == abs(~y, ~S, ~e1)
	~x != ~y
	!isFreeVar(~y, ~e)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- ~e2 : ~T2
	================================================= T-subst-abs-2
	~C |- subst(~x, ~e, ~e2) : ~T2
	
	//necessary axioms on alpha equivalence
	axioms
	============================ alpha-equiv-refl
	alphaEquivalent(~e, ~e)


	alphaEquivalent(~e1, ~e2)
	============================ alpha-equiv-sym
	alphaEquivalent(~e2, ~e1)

 
	alphaEquivalent(~e1, ~e2)
	alphaEquivalent(~e2, ~e3)
	============================ alpha-equiv-trans
	alphaEquivalent(~e1, ~e3)
	
	!isFreeVar(~y, ~e)
	====================================================================== alpha-equiv-subst-abs
	alphaEquivalent(abs(~x, ~S, ~e), abs(~y, ~S, subst(~x, var(~y), ~e)))


	~C |- ~e : ~T
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-typing
	~C |- ~e1 : ~T
	
	//auxiliary lemma which is needed in this case, but can also be proven
	lemma
	~fresh == gensym(app(app(~e, ~e1), var(~x)))
	============================================= fresh-unequal-var-3
	~x != ~fresh

	//another auxiliary lemma which is needed in this case, but can also be proven
	lemma
	~fresh == gensym(app(app(~e, ~e1), var(~x)))
	============================================= fresh-free-2
	!isFreeVar(~fresh, ~e1)
		
	axiom //not needed
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- eabs : ~T2
	============================== T-subst-IH-abs
	~C |- subst(~x, ~e, eabs) : ~T2
	
	lemma
	!isFreeVar(~y, eabs)
	gensym(app(app(~e, eabs), var(~x))) == ~y
	======================================== T-apply-alpha-equiv
	alphaEquivalent(abs(~z, ~S, eabs), abs(~y, ~S, subst(~z, var(~y), eabs)))

	goal
	~x != ~y
	isFreeVar(~y, ~e)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- abs(~y, ~S, eabs) : ~T2
	================================================= T-subst-abs-3
	~C |- subst(~x, ~e, abs(~y, ~S, eabs)) : ~T2
}

// substitution lemma becomes an axiom after the proof
axiom
~C |- ~e : ~T
bind(~x, ~T, ~C) |- ~e2 : ~T2
============================== T-subst
~C |- subst(~x, ~e, ~e2) : ~T2


