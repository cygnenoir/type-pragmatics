module stlcP.Types

import stlcP.Syntax
import stlcP.Context
import stlcP.Subst
import stlcP.AlphaEquivalence

constructors
	arrow : Typ Typ -> Typ
	pairType : Typ Typ -> Typ

axioms

lookup(~x, ~C) == someType(~T)
============================== T-var
~C |- var(~x) : ~T

bind(~x, ~S, ~C) |- ~e : ~T
===================================== T-abs
~C |- abs(~x, ~S, ~e) : arrow(~S, ~T)

~C |- ~e1 : arrow(~S, ~T)
~C |- ~e2 : ~S
========================= T-app
~C |- app(~e1, ~e2) : ~T

~C |- ~e1 : ~T1
~C |- ~e2 : ~T2
========================================= T-pair
~C |- pair(~e1, ~e2) : pairType(~T1, ~T2)

~C |- ~e : pairType(~T1, ~T2)
============================= T-first
~C |- first(~e) : ~T1

~C |- ~e : pairType(~T1, ~T2)
============================= T-second
~C |- second(~e) : ~T2

~C |- ~e : ~T
=============================== T-inv
OR
=> exists ~x
     ~e == var(~x)
     lookup(~x, ~C) == someType(~T)
=> exists ~x, ~e2, ~T1, ~T2
     ~e == abs(~x, ~T1, ~e2)
     ~T == arrow(~T1, ~T2)
     bind(~x, ~T1, ~C) |- ~e2 : ~T2
=> exists ~e1, ~e2, ~S
     ~e == app(~e1, ~e2)
     ~C |- ~e1 : arrow(~S, ~T)
     ~C |- ~e2 : ~S
=> exists ~e1, ~e2, ~T1, ~T2
    ~e == pair(~e1, ~e2)
    ~T == pairType(~T1, ~T2)
    ~C |- ~e1 : ~T1
    ~C |- ~e2 : ~T2
=> exists ~e1, ~T2
    ~e == first(~e1)
    ~C |- ~e1 : pairType(~T, ~T2)
=> exists ~e1, ~T1
    ~e == second(~e1)
    ~C |- ~e1 : pairType(~T1, ~T)



goal
~e == var(~y)
lookup(~x, ~C) == noType
~C |- ~e : ~T
================================ T-Weak-var
bind(~x, ~S, ~C) |- ~e : ~T

local {
	consts
		e1 : Exp
		e2 : Exp
		
	axioms
	lookup(~x, ~C) == noType
	~C |- e1 : ~T
	=========================== T-Weak-pair-IH1
	bind(~x, ~S, ~C) |- e1 : ~T
	
	lookup(~x, ~C) == noType
	~C |- e2 : ~T
	=========================== T-Weak-pair-IH2
	bind(~x, ~S, ~C) |- e2 : ~T
	
	
	goal
	~e == pair(e1, e2)
	lookup(~x, ~C) == noType
	~C |- ~e : ~T
	=========================== T-Weak-pair
	bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	consts
		e1 : Exp
		
	axiom
	lookup(~x, ~C) == noType
	~C |- e1 : ~T
	=========================== T-Weak-first-IH
	bind(~x, ~S, ~C) |- e1 : ~T	
	
	goal
	~e == first(e1)
	lookup(~x, ~C) == noType
	~C |- ~e : ~T
	=========================== T-Weak-first
	bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	consts
		e1 : Exp
		
	axiom
	lookup(~x, ~C) == noType
	~C |- e1 : ~T
	=========================== T-Weak-second-IH
	bind(~x, ~S, ~C) |- e1 : ~T	
	
	goal
	~e == second(e1)
	lookup(~x, ~C) == noType
	~C |- ~e : ~T
	=========================== T-Weak-second
	bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	const eabs : Exp

	axiom
	lookup(~x, ~C) == noType
	~C |- eabs : ~T
	============================== T-Weak-abs-IH
	bind(~x, ~S, ~C) |- eabs : ~T
	
	goal
	~x != ~y
	lookup(~x, ~C) == noType
	~C |- abs(~y, ~S1, eabs) : ~T
	=========================================== T-Weak-abs-1
	bind(~x, ~S, ~C) |- abs(~y, ~S1, eabs) : ~T
	
	// goal
	// ~e == abs(~y, ~S1, eabs)
	// ~x != ~y
	// lookup(~x, ~C) == noType
	// ~C |- ~e : ~T
	// =========================================== T-Weak-abs-1
	// bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	const eabs : Exp
	
	axiom
	~e == abs(~y, ~S1, ~e1)
	~x != ~y
	lookup(~x, ~C) == noType
	~C |- ~e : ~T
	=========================================== T-Weak-abs-1
	bind(~x, ~S, ~C) |- ~e : ~T
	
	
	//necessary axioms on alpha equivalence
	axioms
	============================ alpha-equiv-refl
	alphaEquivalent(~e, ~e)


	alphaEquivalent(~e1, ~e2)
	============================ alpha-equiv-sym
	alphaEquivalent(~e2, ~e1)

 
	alphaEquivalent(~e1, ~e2)
	alphaEquivalent(~e2, ~e3)
	============================ alpha-equiv-trans
	alphaEquivalent(~e1, ~e3)

 	!isFreeVar(~y, ~e)
	====================================================================== alpha-equiv-subst-abs
	alphaEquivalent(abs(~x, ~S, ~e), abs(~y, ~S, subst(~x, var(~y), ~e)))


	~C |- ~e : ~T
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-typing
	~C |- ~e1 : ~T

	//NOT needed!
	axiom
	lookup(~x, ~C) == noType
	~C |- eabs : ~T
	============================== T-Weak-abs-IH
	bind(~x, ~S, ~C) |- eabs : ~T

	goal
	~e == abs(~y, ~S1, eabs)
	~x == ~y
	lookup(~x, ~C) == noType
	~C |- ~e : ~T
	=========================================== T-Weak-abs-2
	bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	consts
		e1app : Exp
		e2app : Exp
		
	axioms
	lookup(~x, ~C) == noType
	~C |- e1app : ~T
	=========================== T-Weak-app-IH1
	bind(~x, ~S, ~C) |- e1app : ~T
	
	lookup(~x, ~C) == noType
	~C |- e2app : ~T
	=========================== T-Weak-app-IH2
	bind(~x, ~S, ~C) |- e2app : ~T
	
	
	goal
	~e == app(e1app, e2app)
	lookup(~x, ~C) == noType
	~C |- ~e : ~T
	========================================== T-Weak-app
	bind(~x, ~S, ~C) |- ~e : ~T
}


axiom
lookup(~x, ~C) == noType
~C |- ~e : ~T
=========================== T-Weak
bind(~x, ~S, ~C) |- ~e : ~T



//Proof by structural induction, Strenghthening

// goal
// ~e == var(~y)
// !isFreeVar(~x, ~e)
// bind(~x, ~S, ~C) |- ~e : ~T
// ================================= T-Strong-var
// ~C |- ~e : ~T

goal
!isFreeVar(~x, var(~y))
bind(~x, ~S, ~C) |- var(~y) : ~T
================================= T-Strong-var
~C |- var(~y) : ~T

local {
	consts
		e1 : Exp
		e2 : Exp

	axioms 
	!isFreeVar(~x, e1)
	bind(~x, ~S, ~C) |- e1 : ~T
	=========================== T-Strong-pair-IH1
	~C |- e1 : ~T
	
	!isFreeVar(~x, e2)
	bind(~x, ~S, ~C) |- e2 : ~T
	=========================== T-Strong-pair-IH2
	~C |- e2 : ~T
	
	lemma
	~e == pair(e1, e2)
	!isFreeVar(~x, ~e)
	bind(~x, ~S, ~C) |- ~e : ~T
	===================================== T-Strong-pair-use-INV
	exists ~T1, ~T2
	  ~T == pairType(~T1, ~T2)
	  bind(~x, ~S, ~C) |- e1 : ~T1
	  bind(~x, ~S, ~C) |- e2 : ~T2
	
	lemma
	~e == pair(e1, e2)
	!isFreeVar(~x, ~e)
	bind(~x, ~S, ~C) |- ~e : ~T
	===================================== T-Strong-pair-use-IH
	exists ~T1, ~T2
	    ~T == pairType(~T1, ~T2)
	    ~C |- e1 : ~T1
	    ~C |- e2 : ~T2
	
	goal
	~e == pair(e1, e2)
	!isFreeVar(~x, ~e)
	bind(~x, ~S, ~C) |- ~e : ~T
	=========================== T-Strong-pair
	~C |- ~e : ~T
}

local {
	consts
		e1 : Exp

	axioms
	!isFreeVar(~x, e1)
	bind(~x, ~S, ~C) |- e1 : ~T
	=========================== T-Strong-first-IH
	~C |- e1 : ~T
	
	// goal
	// ~e == first(e1)
	// !isFreeVar(~x, ~e)
	// bind(~x, ~S, ~C) |- ~e : ~T
	// =========================== T-Strong-first
	// ~C |- ~e : ~T
	
	goal
	!isFreeVar(~x, first(e1))
	bind(~x, ~S, ~C) |- first(e1) : ~T
	=========================== T-Strong-first
	~C |- first(e1) : ~T
}

local {
	consts
		e1 : Exp

	axioms
	!isFreeVar(~x, e1)
	bind(~x, ~S, ~C) |- e1 : ~T
	=========================== T-Strong-second-IH
	~C |- e1 : ~T
	
	// goal
	// ~e == second(e1)
	// !isFreeVar(~x, ~e)
	// bind(~x, ~S, ~C) |- ~e : ~T
	// =========================== T-Strong-second
	// ~C |- ~e : ~T
	
	goal
	!isFreeVar(~x, second(e1))
	bind(~x, ~S, ~C) |- second(e1) : ~T
	=========================== T-Strong-second
	~C |- second(e1) : ~T
}

local {
	const eabs : Exp
	
	axiom
	!isFreeVar(~x, eabs)
	bind(~x, ~S, ~C) |- eabs : ~T
	=========================== T-Strong-abs-IH
	~C |- eabs : ~T	    
	
	lemma
	!isFreeVar(~x, abs(~y, ~S1, eabs))
	bind(~x, ~S, ~C) |- abs(~y, ~S1, eabs) : ~T
	=========================================== T-Strong-abs-use-INV
	exists ~T1
	  ~T == arrow(~S1, ~T1)
	  bind(~y, ~S1, bind(~x, ~S, ~C)) |- eabs : ~T1

    lemma
	!isFreeVar(~x, abs(~y, ~S1, eabs))
	bind(~x, ~S, ~C) |- abs(~y, ~S1, eabs) : ~T
	=========================================== T-Strong-abs-use-IH
	exists ~T1
	  ~T == arrow(~S1, ~T1)
	  bind(~y, ~S1, ~C) |- eabs : ~T1
	
	goal
	!isFreeVar(~x, abs(~y, ~S1, eabs))
	bind(~x, ~S, ~C) |- abs(~y, ~S1, eabs) : ~T
	=========================================== T-Strong-abs
	~C |- abs(~y, ~S1, eabs) : ~T
}

local {
	consts
		e1app : Exp
		e2app : Exp

	axioms 
	!isFreeVar(~x, e1app)
	bind(~x, ~S, ~C) |- e1app : ~T
	=========================== T-Strong-app-IH1
	~C |- e1app : ~T
	
	!isFreeVar(~x, e2app)
	bind(~x, ~S, ~C) |- e2app : ~T
	=========================== T-Strong-app-IH2
	~C |- e2app : ~T
	
	// lemma
	// ~e == app(e1app, e2app)
	// !isFreeVar(~x, ~e)
	// bind(~x, ~S, ~C) |- ~e : ~T
	// =========================== T-Strong-app-use-INV
	// exists ~S1
	//   bind(~x, ~S, ~C) |- e1app : arrow(~S1, ~T)
	//   bind(~x, ~S, ~C) |- e2app : ~S1

    lemma
	~e == app(e1app, e2app)
	!isFreeVar(~x, ~e)
	bind(~x, ~S, ~C) |- ~e : ~T
	=========================== T-Strong-app-use-IH
	exists ~S1
	  ~C |- e1app : arrow(~S1, ~T)
	  ~C |- e2app : ~S1
	
	goal
	~e == app(e1app, e2app)
	!isFreeVar(~x, ~e)
	bind(~x, ~S, ~C) |- ~e : ~T
	=========================================== T-Strong-app
	~C |- ~e : ~T
}

axiom
!isFreeVar(~x, ~e)
bind(~x, ~S, ~C) |- ~e : ~T
=========================== T-Strong
~C |- ~e : ~T
