module stlcR.Syntax

sorts
  Var Exp Typ

constructors
  var : Var -> Exp
  abs : Var Typ Exp -> Exp
  app : Exp Exp -> Exp
  fix : Exp -> Exp

function
isValue : Exp -> Bool
isValue(abs(x, S, e)) = true
isValue(var(x)) = false
isValue(fix(e)) = false
isValue(app(e1, e2)) = false

function
isFreeVar : Var Exp -> Bool
isFreeVar(v, var(x))       = x == v
isFreeVar(v, abs(x, T, e)) = ((x != v) && isFreeVar(v, e)) 
isFreeVar(v, app(e1, e2))  = isFreeVar(v, e1) || isFreeVar(v, e2)
isFreeVar(v, fix(e))       = isFreeVar(v, e)

// axiom
// isFreeVar(~v, ~e)
// ================= isFreeVar-inv
// OR
// => exists ~x
//      ~e = var(~x)
//      ~x = ~v
// => exists ~x, ~T, ~e1
//      ~e = abs(~x, ~T, ~e1)
//      ~x != ~v
//      isFreeVar(~v, ~e1)
// => exists ~e1, ~e2
//      ~e = app(~e1, ~e2)
//      isFreeVar(~v, ~e1)
// => exists ~e1, ~e2
//      ~e = app(~e1, ~e2)
//      isFreeVar(~v, ~e2)
