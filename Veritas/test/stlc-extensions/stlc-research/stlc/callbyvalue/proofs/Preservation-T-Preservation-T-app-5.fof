
fof('EQ-var', axiom, (![VVar0,VVar1] : (((vvar(VVar0)=vvar(VVar1)) => (VVar0=VVar1)) & ((VVar0=VVar1) => (vvar(VVar0)=vvar(VVar1)))))).
fof('EQ-abs', axiom, (![VVar0,VTyp0,VExp0,VVar1,VTyp1,VExp1] : (((vabs(VVar0,VTyp0,VExp0)=vabs(VVar1,VTyp1,VExp1)) => ((VVar0=VVar1) & ((VTyp0=VTyp1) & (VExp0=VExp1)))) & (((VVar0=VVar1) & ((VTyp0=VTyp1) & (VExp0=VExp1))) => (vabs(VVar0,VTyp0,VExp0)=vabs(VVar1,VTyp1,VExp1)))))).
fof('EQ-app', axiom, (![VExp0,VExp1,VExp2,VExp3] : (((vapp(VExp0,VExp1)=vapp(VExp2,VExp3)) => ((VExp0=VExp2) & (VExp1=VExp3))) & (((VExp0=VExp2) & (VExp1=VExp3)) => (vapp(VExp0,VExp1)=vapp(VExp2,VExp3)))))).
fof('EQ-succ', axiom, (![VExp0,VExp1] : (((vsucc(VExp0)=vsucc(VExp1)) => (VExp0=VExp1)) & ((VExp0=VExp1) => (vsucc(VExp0)=vsucc(VExp1)))))).
fof('EQ-pred', axiom, (![VExp0,VExp1] : (((vpred(VExp0)=vpred(VExp1)) => (VExp0=VExp1)) & ((VExp0=VExp1) => (vpred(VExp0)=vpred(VExp1)))))).
fof('EQ-isZero', axiom, (![VExp0,VExp1] : (((visZero(VExp0)=visZero(VExp1)) => (VExp0=VExp1)) & ((VExp0=VExp1) => (visZero(VExp0)=visZero(VExp1)))))).
fof('EQ-True', axiom, (((vTrue=vTrue) => $true) & ($true => (vTrue=vTrue)))).
fof('EQ-False', axiom, (((vFalse=vFalse) => $true) & ($true => (vFalse=vFalse)))).
fof('EQ-Zero', axiom, (((vZero=vZero) => $true) & ($true => (vZero=vZero)))).
fof('DIFF-var-abs', axiom, (![VVar0,VVar1,VTyp0,VExp0] : (vvar(VVar0)!=vabs(VVar1,VTyp0,VExp0)))).
fof('DIFF-var-app', axiom, (![VVar0,VExp0,VExp1] : (vvar(VVar0)!=vapp(VExp0,VExp1)))).
fof('DIFF-abs-app', axiom, (![VVar0,VTyp0,VExp0,VExp1,VExp2] : (vabs(VVar0,VTyp0,VExp0)!=vapp(VExp1,VExp2)))).
fof('DIFF-var-succ', axiom, (![VVar0,VExp0] : (vvar(VVar0)!=vsucc(VExp0)))).
fof('DIFF-abs-succ', axiom, (![VVar0,VTyp0,VExp0,VExp1] : (vabs(VVar0,VTyp0,VExp0)!=vsucc(VExp1)))).
fof('DIFF-app-succ', axiom, (![VExp0,VExp1,VExp2] : (vapp(VExp0,VExp1)!=vsucc(VExp2)))).
fof('DIFF-var-pred', axiom, (![VVar0,VExp0] : (vvar(VVar0)!=vpred(VExp0)))).
fof('DIFF-abs-pred', axiom, (![VVar0,VTyp0,VExp0,VExp1] : (vabs(VVar0,VTyp0,VExp0)!=vpred(VExp1)))).
fof('DIFF-app-pred', axiom, (![VExp0,VExp1,VExp2] : (vapp(VExp0,VExp1)!=vpred(VExp2)))).
fof('DIFF-succ-pred', axiom, (![VExp0,VExp1] : (vsucc(VExp0)!=vpred(VExp1)))).
fof('DIFF-var-isZero', axiom, (![VVar0,VExp0] : (vvar(VVar0)!=visZero(VExp0)))).
fof('DIFF-abs-isZero', axiom, (![VVar0,VTyp0,VExp0,VExp1] : (vabs(VVar0,VTyp0,VExp0)!=visZero(VExp1)))).
fof('DIFF-app-isZero', axiom, (![VExp0,VExp1,VExp2] : (vapp(VExp0,VExp1)!=visZero(VExp2)))).
fof('DIFF-succ-isZero', axiom, (![VExp0,VExp1] : (vsucc(VExp0)!=visZero(VExp1)))).
fof('DIFF-pred-isZero', axiom, (![VExp0,VExp1] : (vpred(VExp0)!=visZero(VExp1)))).
fof('DIFF-var-True', axiom, (![VVar0] : (vvar(VVar0)!=vTrue))).
fof('DIFF-abs-True', axiom, (![VVar0,VTyp0,VExp0] : (vabs(VVar0,VTyp0,VExp0)!=vTrue))).
fof('DIFF-app-True', axiom, (![VExp0,VExp1] : (vapp(VExp0,VExp1)!=vTrue))).
fof('DIFF-succ-True', axiom, (![VExp0] : (vsucc(VExp0)!=vTrue))).
fof('DIFF-pred-True', axiom, (![VExp0] : (vpred(VExp0)!=vTrue))).
fof('DIFF-isZero-True', axiom, (![VExp0] : (visZero(VExp0)!=vTrue))).
fof('DIFF-var-False', axiom, (![VVar0] : (vvar(VVar0)!=vFalse))).
fof('DIFF-abs-False', axiom, (![VVar0,VTyp0,VExp0] : (vabs(VVar0,VTyp0,VExp0)!=vFalse))).
fof('DIFF-app-False', axiom, (![VExp0,VExp1] : (vapp(VExp0,VExp1)!=vFalse))).
fof('DIFF-succ-False', axiom, (![VExp0] : (vsucc(VExp0)!=vFalse))).
fof('DIFF-pred-False', axiom, (![VExp0] : (vpred(VExp0)!=vFalse))).
fof('DIFF-isZero-False', axiom, (![VExp0] : (visZero(VExp0)!=vFalse))).
fof('DIFF-True-False', axiom, (vTrue!=vFalse)).
fof('DIFF-var-Zero', axiom, (![VVar0] : (vvar(VVar0)!=vZero))).
fof('DIFF-abs-Zero', axiom, (![VVar0,VTyp0,VExp0] : (vabs(VVar0,VTyp0,VExp0)!=vZero))).
fof('DIFF-app-Zero', axiom, (![VExp0,VExp1] : (vapp(VExp0,VExp1)!=vZero))).
fof('DIFF-succ-Zero', axiom, (![VExp0] : (vsucc(VExp0)!=vZero))).
fof('DIFF-pred-Zero', axiom, (![VExp0] : (vpred(VExp0)!=vZero))).
fof('DIFF-isZero-Zero', axiom, (![VExp0] : (visZero(VExp0)!=vZero))).
fof('DIFF-True-Zero', axiom, (vTrue!=vZero)).
fof('DIFF-False-Zero', axiom, (vFalse!=vZero)).
fof('isNum0', axiom, (![VExp0] : ((VExp0=vZero) => visNum(VExp0)))).
fof('isNum1', axiom, (![VExp0,Ve] : ((VExp0=vsucc(Ve)) => ((visNum(Ve) => visNum(VExp0)) & (visNum(VExp0) => visNum(Ve)))))).
fof('isNum2', axiom, (![Ve,VExp0] : (((VExp0=Ve) & ((![VVe0] : (Ve!=vsucc(VVe0))) & (Ve!=vZero))) => (~visNum(VExp0))))).
fof('isValue0', axiom, (![VExp0] : ((VExp0=vTrue) => visValue(VExp0)))).
fof('isValue1', axiom, (![VExp0] : ((VExp0=vFalse) => visValue(VExp0)))).
fof('isValue2', axiom, (![VExp0] : ((VExp0=vZero) => visValue(VExp0)))).
fof('isValue3', axiom, (![VExp0,Ve] : ((VExp0=vsucc(Ve)) => ((visNum(Ve) => visValue(VExp0)) & (visValue(VExp0) => visNum(Ve)))))).
fof('isValue4', axiom, (![Ve,VExp0] : ((VExp0=vpred(Ve)) => (~visValue(VExp0))))).
fof('isValue5', axiom, (![Ve,VExp0] : ((VExp0=visZero(Ve)) => (~visValue(VExp0))))).
fof('isValue6', axiom, (![Vx,VS,Ve,VExp0] : ((VExp0=vabs(Vx,VS,Ve)) => visValue(VExp0)))).
fof('isValue7', axiom, (![Vx,VExp0] : ((VExp0=vvar(Vx)) => (~visValue(VExp0))))).
fof('isValue8', axiom, (![Ve1,Ve2,VExp0] : ((VExp0=vapp(Ve1,Ve2)) => (~visValue(VExp0))))).
fof('isFreeVar0', axiom, (![Vv,VVar0,VExp0] : (((VVar0=Vv) & (VExp0=vTrue)) => (~visFreeVar(VVar0,VExp0))))).
fof('isFreeVar1', axiom, (![Vv,VVar0,VExp0] : (((VVar0=Vv) & (VExp0=vFalse)) => (~visFreeVar(VVar0,VExp0))))).
fof('isFreeVar2', axiom, (![Vv,VVar0,VExp0] : (((VVar0=Vv) & (VExp0=vZero)) => (~visFreeVar(VVar0,VExp0))))).
fof('isFreeVar3', axiom, (![VVar0,VExp0,Vv,Ve] : (((VVar0=Vv) & (VExp0=vsucc(Ve))) => ((visFreeVar(Vv,Ve) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => visFreeVar(Vv,Ve)))))).
fof('isFreeVar4', axiom, (![VVar0,VExp0,Vv,Ve] : (((VVar0=Vv) & (VExp0=vpred(Ve))) => ((visFreeVar(Vv,Ve) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => visFreeVar(Vv,Ve)))))).
fof('isFreeVar5', axiom, (![VVar0,VExp0,Vv,Ve] : (((VVar0=Vv) & (VExp0=visZero(Ve))) => ((visFreeVar(Vv,Ve) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => visFreeVar(Vv,Ve)))))).
fof('isFreeVar6', axiom, (![VVar0,VExp0,Vx,Vv] : (((VVar0=Vv) & (VExp0=vvar(Vx))) => (((Vx=Vv) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => (Vx=Vv)))))).
fof('isFreeVar7', axiom, (![VT,VVar0,VExp0,Vx,Vv,Ve] : (((VVar0=Vv) & (VExp0=vabs(Vx,VT,Ve))) => ((((Vx!=Vv) & visFreeVar(Vv,Ve)) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => ((Vx!=Vv) & visFreeVar(Vv,Ve))))))).
fof('isFreeVar8', axiom, (![VVar0,VExp0,Ve1,Vv,Ve2] : (((VVar0=Vv) & (VExp0=vapp(Ve1,Ve2))) => (((visFreeVar(Vv,Ve1) | visFreeVar(Vv,Ve2)) => visFreeVar(VVar0,VExp0)) & (visFreeVar(VVar0,VExp0) => (visFreeVar(Vv,Ve1) | visFreeVar(Vv,Ve2))))))).
fof('EQ-empty', axiom, (((vempty=vempty) => $true) & ($true => (vempty=vempty)))).
fof('EQ-bind', axiom, (![VVar0,VTyp0,VCtx0,VVar1,VTyp1,VCtx1] : (((vbind(VVar0,VTyp0,VCtx0)=vbind(VVar1,VTyp1,VCtx1)) => ((VVar0=VVar1) & ((VTyp0=VTyp1) & (VCtx0=VCtx1)))) & (((VVar0=VVar1) & ((VTyp0=VTyp1) & (VCtx0=VCtx1))) => (vbind(VVar0,VTyp0,VCtx0)=vbind(VVar1,VTyp1,VCtx1)))))).
fof('EQ-noType', axiom, (((vnoType=vnoType) => $true) & ($true => (vnoType=vnoType)))).
fof('EQ-someType', axiom, (![VTyp0,VTyp1] : (((vsomeType(VTyp0)=vsomeType(VTyp1)) => (VTyp0=VTyp1)) & ((VTyp0=VTyp1) => (vsomeType(VTyp0)=vsomeType(VTyp1)))))).
fof('DIFF-empty-bind', axiom, (![VVar0,VTyp0,VCtx0] : (vempty!=vbind(VVar0,VTyp0,VCtx0)))).
fof('DIFF-noType-someType', axiom, (![VTyp0] : (vnoType!=vsomeType(VTyp0)))).
fof('isSomeType0', axiom, (![VOptTyp0] : ((VOptTyp0=vnoType) => (~visSomeType(VOptTyp0))))).
fof('isSomeType1', axiom, (![Ve,VOptTyp0] : ((VOptTyp0=vsomeType(Ve)) => visSomeType(VOptTyp0)))).
fof('getSomeType0', axiom, (![VOptTyp0,RESULT,Ve] : ((VOptTyp0=vsomeType(Ve)) => ((RESULT=vgetSomeType(VOptTyp0)) => (RESULT=Ve))))).
fof('lookup0', axiom, (![Vx,VVar0,VCtx0,RESULT] : (((VVar0=Vx) & (VCtx0=vempty)) => ((RESULT=vlookup(VVar0,VCtx0)) => (RESULT=vnoType))))).
fof('lookup1', axiom, (![VC,Vx,Vy,VVar0,VCtx0,RESULT,VTy] : (((VVar0=Vx) & (VCtx0=vbind(Vy,VTy,VC))) => ((Vx=Vy) => ((RESULT=vlookup(VVar0,VCtx0)) => (RESULT=vsomeType(VTy))))))).
fof('lookup2', axiom, (![VTy,Vy,VVar0,VCtx0,RESULT,Vx,VC] : (((VVar0=Vx) & (VCtx0=vbind(Vy,VTy,VC))) => ((~(Vx=Vy)) => ((RESULT=vlookup(VVar0,VCtx0)) => (RESULT=vlookup(Vx,VC))))))).
fof('lookup-INV', axiom, (![VVar0,VCtx0,RESULT] : ((vlookup(VVar0,VCtx0)=RESULT) => ((?[Vx] : ((VVar0=Vx) & ((VCtx0=vempty) & (RESULT=vnoType)))) | ((?[VC,Vx,Vy,VTy] : ((VVar0=Vx) & ((VCtx0=vbind(Vy,VTy,VC)) & ((Vx=Vy) & (RESULT=vsomeType(VTy)))))) | (?[VTy,Vy,Vx,VC] : ((VVar0=Vx) & ((VCtx0=vbind(Vy,VTy,VC)) & ((~(Vx=Vy)) & (RESULT=vlookup(Vx,VC))))))))))).
fof('T-Context-Duplicate', axiom, (![Vy,VTy,Vx,VTx,VC,Ve,VT] : (((Vx=Vy) & vtcheck(vbind(Vx,VTx,vbind(Vy,VTy,VC)),Ve,VT)) => vtcheck(vbind(Vx,VTx,VC),Ve,VT)))).
fof('T-Context-Swap', axiom, (![Vy,VTy,Vx,VTx,VC,Ve,VT] : (((Vx!=Vy) & vtcheck(vbind(Vx,VTx,vbind(Vy,VTy,VC)),Ve,VT)) => vtcheck(vbind(Vy,VTy,vbind(Vx,VTx,VC)),Ve,VT)))).
fof('gensym-is-fresh', axiom, (![Vv,Ve] : ((vgensym(Ve)=Vv) => (~visFreeVar(Vv,Ve))))).
fof('EQ-arrow', axiom, (![VTyp0,VTyp1,VTyp2,VTyp3] : (((varrow(VTyp0,VTyp1)=varrow(VTyp2,VTyp3)) => ((VTyp0=VTyp2) & (VTyp1=VTyp3))) & (((VTyp0=VTyp2) & (VTyp1=VTyp3)) => (varrow(VTyp0,VTyp1)=varrow(VTyp2,VTyp3)))))).
fof('EQ-Boolean', axiom, (((vBoolean=vBoolean) => $true) & ($true => (vBoolean=vBoolean)))).
fof('EQ-Num', axiom, (((vNum=vNum) => $true) & ($true => (vNum=vNum)))).
fof('DIFF-arrow-Boolean', axiom, (![VTyp0,VTyp1] : (varrow(VTyp0,VTyp1)!=vBoolean))).
fof('DIFF-arrow-Num', axiom, (![VTyp0,VTyp1] : (varrow(VTyp0,VTyp1)!=vNum))).
fof('DIFF-Boolean-Num', axiom, (vBoolean!=vNum)).
fof('T-true', axiom, (![VC] : vtcheck(VC,vTrue,vBoolean))).
fof('T-false', axiom, (![VC] : vtcheck(VC,vFalse,vBoolean))).
fof('T-Zero', axiom, (![VC] : vtcheck(VC,vZero,vNum))).
fof('T-var', axiom, (![VC,Vx,VT] : ((vlookup(Vx,VC)=vsomeType(VT)) => vtcheck(VC,vvar(Vx),VT)))).
fof('T-succ', axiom, (![VC,Ve] : (vtcheck(VC,Ve,vNum) => vtcheck(VC,vsucc(Ve),vNum)))).
fof('T-pred', axiom, (![VC,Ve] : (vtcheck(VC,Ve,vNum) => vtcheck(VC,vpred(Ve),vNum)))).
fof('T-isZero', axiom, (![VC,Ve] : (vtcheck(VC,Ve,vNum) => vtcheck(VC,visZero(Ve),vBoolean)))).
fof('T-abs', axiom, (![VC,Vx,Ve,VS,VT] : (vtcheck(vbind(Vx,VS,VC),Ve,VT) => vtcheck(VC,vabs(Vx,VS,Ve),varrow(VS,VT))))).
fof('T-app', axiom, (![VS,VC,Ve1,Ve2,VT] : ((vtcheck(VC,Ve1,varrow(VS,VT)) & vtcheck(VC,Ve2,VS)) => vtcheck(VC,vapp(Ve1,Ve2),VT)))).
fof('T-inv', axiom, (![VC,Ve,VT] : (vtcheck(VC,Ve,VT) => ((?[Vx] : ((Ve=vvar(Vx)) & (vlookup(Vx,VC)=vsomeType(VT)))) | ((?[Vx,Ve2,VT1,VT2] : ((Ve=vabs(Vx,VT1,Ve2)) & ((VT=varrow(VT1,VT2)) & vtcheck(vbind(Vx,VT1,VC),Ve2,VT2)))) | ((?[Ve1,Ve2,VS] : ((Ve=vapp(Ve1,Ve2)) & (vtcheck(VC,Ve1,varrow(VS,VT)) & vtcheck(VC,Ve2,VS)))) | ((?[Ve1] : ((Ve=vsucc(Ve1)) & ((VT=vNum) & vtcheck(VC,Ve1,vNum)))) | ((?[Ve1] : ((Ve=vpred(Ve1)) & ((VT=vNum) & vtcheck(VC,Ve1,vNum)))) | ((?[Ve1] : ((Ve=visZero(Ve1)) & ((VT=vBoolean) & vtcheck(VC,Ve1,vNum)))) | (((Ve=vTrue) & (VT=vBoolean)) | (((Ve=vFalse) & (VT=vBoolean)) | ((Ve=vZero) & (VT=vNum))))))))))))).
fof('T-inv-var', axiom, (![Vx,VC,VT] : (vtcheck(VC,vvar(Vx),VT) => (vlookup(Vx,VC)=vsomeType(VT))))).
fof('T-inv-abs', axiom, (![VT,Vx,VT1,VC,Ve] : (vtcheck(VC,vabs(Vx,VT1,Ve),VT) => (?[VT2] : ((VT=varrow(VT1,VT2)) & vtcheck(vbind(Vx,VT1,VC),Ve,VT2)))))).
fof('T-inv-app', axiom, (![Ve1,VT,VC,Ve2] : (vtcheck(VC,vapp(Ve1,Ve2),VT) => (?[VS] : (vtcheck(VC,Ve1,varrow(VS,VT)) & vtcheck(VC,Ve2,VS)))))).
fof('T-inv-succ', axiom, (![VT,VC,Ve] : (vtcheck(VC,vsucc(Ve),VT) => ((VT=vNum) & vtcheck(VC,Ve,vNum))))).
fof('T-inv-pred', axiom, (![VT,VC,Ve] : (vtcheck(VC,vpred(Ve),VT) => ((VT=vNum) & vtcheck(VC,Ve,vNum))))).
fof('T-inv-isZero', axiom, (![VT,VC,Ve] : (vtcheck(VC,visZero(Ve),VT) => ((VT=vBoolean) & vtcheck(VC,Ve,vNum))))).
fof('T-inv-True', axiom, (![VC,VT] : (vtcheck(VC,vTrue,VT) => (VT=vBoolean)))).
fof('T-inv-False', axiom, (![VC,VT] : (vtcheck(VC,vFalse,VT) => (VT=vBoolean)))).
fof('T-inv-Zero', axiom, (![VC,VT] : (vtcheck(VC,vZero,VT) => (VT=vNum)))).
fof('T-Weak', axiom, (![Vx,VS,VC,Ve,VT] : (((vlookup(Vx,VC)=vnoType) & vtcheck(VC,Ve,VT)) => vtcheck(vbind(Vx,VS,VC),Ve,VT)))).
fof('T-Strong', axiom, (![Vx,VS,VC,Ve,VT] : (((~visFreeVar(Vx,Ve)) & vtcheck(vbind(Vx,VS,VC),Ve,VT)) => vtcheck(VC,Ve,VT)))).
fof('T-subst', axiom, (![VT,VC,Vx,Ve,Ve2,VT2] : ((vtcheck(VC,Ve,VT) & vtcheck(vbind(Vx,VT,VC),Ve2,VT2)) => vtcheck(VC,vsubst(Vx,Ve,Ve2),VT2)))).
fof('EQ-noExp', axiom, (((vnoExp=vnoExp) => $true) & ($true => (vnoExp=vnoExp)))).
fof('EQ-someExp', axiom, (![VExp0,VExp1] : (((vsomeExp(VExp0)=vsomeExp(VExp1)) => (VExp0=VExp1)) & ((VExp0=VExp1) => (vsomeExp(VExp0)=vsomeExp(VExp1)))))).
fof('DIFF-noExp-someExp', axiom, (![VExp0] : (vnoExp!=vsomeExp(VExp0)))).
fof('isSomeExp0', axiom, (![VOptExp0] : ((VOptExp0=vnoExp) => (~visSomeExp(VOptExp0))))).
fof('isSomeExp1', axiom, (![Ve,VOptExp0] : ((VOptExp0=vsomeExp(Ve)) => visSomeExp(VOptExp0)))).
fof('getSomeExp0', axiom, (![VOptExp0,RESULT,Ve] : ((VOptExp0=vsomeExp(Ve)) => ((RESULT=vgetSomeExp(VOptExp0)) => (RESULT=Ve))))).
fof('reduce0', axiom, (![VExp0,RESULT] : ((VExp0=vTrue) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp))))).
fof('reduce1', axiom, (![VExp0,RESULT] : ((VExp0=vFalse) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp))))).
fof('reduce2', axiom, (![VExp0,RESULT] : ((VExp0=vZero) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp))))).
fof('reduce3', axiom, (![Ve,VExp0,RESULT] : ((VExp0=vsucc(Ve)) => (visNum(Ve) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce4', axiom, (![Ve,VExp0,RESULT,Vered] : ((VExp0=vsucc(Ve)) => (((~visNum(Ve)) & ((Vered=vreduce(Ve)) & visSomeExp(Vered))) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vsucc(vgetSomeExp(Vered))))))))).
fof('reduce5', axiom, (![Ve,Vered,VExp0,RESULT] : ((VExp0=vsucc(Ve)) => (((~visNum(Ve)) & ((Vered=vreduce(Ve)) & (~visSomeExp(Vered)))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce6', axiom, (![VExp0,RESULT,Ve] : ((VExp0=vpred(vsucc(Ve))) => (visNum(Ve) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(Ve))))))).
fof('reduce7', axiom, (![Ve,VExp0,RESULT,Vered] : ((VExp0=vpred(vsucc(Ve))) => (((~visNum(Ve)) & ((Vered=vreduce(Ve)) & visSomeExp(Vered))) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vpred(vsucc(vgetSomeExp(Vered)))))))))).
fof('reduce8', axiom, (![Ve,Vered,VExp0,RESULT] : ((VExp0=vpred(vsucc(Ve))) => (((~visNum(Ve)) & ((Vered=vreduce(Ve)) & (~visSomeExp(Vered)))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce9', axiom, (![VExp0,RESULT] : ((VExp0=vpred(vZero)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vZero)))))).
fof('reduce10', axiom, (![Ve,VExp0,RESULT,Vered] : (((VExp0=vpred(Ve)) & ((Ve!=vZero) & (![VVe0] : (Ve!=vsucc(VVe0))))) => (((Vered=vreduce(Ve)) & visSomeExp(Vered)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vpred(vgetSomeExp(Vered))))))))).
fof('reduce11', axiom, (![Ve,Vered,VExp0,RESULT] : (((VExp0=vpred(Ve)) & ((Ve!=vZero) & (![VVe0] : (Ve!=vsucc(VVe0))))) => (((Vered=vreduce(Ve)) & (~visSomeExp(Vered))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce12', axiom, (![VExp0,RESULT] : ((VExp0=visZero(vZero)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vTrue)))))).
fof('reduce13', axiom, (![Ve,VExp0,RESULT] : (((VExp0=visZero(Ve)) & (Ve!=vZero)) => (visValue(Ve) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vFalse))))))).
fof('reduce14', axiom, (![Ve,VExp0,RESULT,Vered] : (((VExp0=visZero(Ve)) & (Ve!=vZero)) => (((~visValue(Ve)) & ((Vered=vreduce(Ve)) & visSomeExp(Vered))) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(visZero(vgetSomeExp(Vered))))))))).
fof('reduce15', axiom, (![Ve,Vered,VExp0,RESULT] : (((VExp0=visZero(Ve)) & (Ve!=vZero)) => (((~visValue(Ve)) & ((Vered=vreduce(Ve)) & (~visSomeExp(Vered)))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce16', axiom, (![Vx,VExp0,RESULT] : ((VExp0=vvar(Vx)) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp))))).
fof('reduce17', axiom, (![Vx,VS,Ve,VExp0,RESULT] : ((VExp0=vabs(Vx,VS,Ve)) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp))))).
fof('reduce18', axiom, (![Ve2,VExp0,RESULT,Vx,VS,Ve1,Ve2red] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) => (((Ve2red=vreduce(Ve2)) & visSomeExp(Ve2red)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vapp(vabs(Vx,VS,Ve1),vgetSomeExp(Ve2red))))))))).
fof('reduce19', axiom, (![VS,Ve2red,VExp0,RESULT,Vx,Ve2,Ve1] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) => (((Ve2red=vreduce(Ve2)) & ((~visSomeExp(Ve2red)) & visValue(Ve2))) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vsubst(Vx,Ve2,Ve1)))))))).
fof('reduce20', axiom, (![Vx,VS,Ve1,Ve2red,Ve2,VExp0,RESULT] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) => (((Ve2red=vreduce(Ve2)) & ((~visSomeExp(Ve2red)) & (~visValue(Ve2)))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce21', axiom, (![Ve1,VExp0,RESULT,Ve1red,Ve2] : (((VExp0=vapp(Ve1,Ve2)) & (![VVx0,VVS0,VVe10] : (Ve1!=vabs(VVx0,VVS0,VVe10)))) => (((Ve1red=vreduce(Ve1)) & visSomeExp(Ve1red)) => ((RESULT=vreduce(VExp0)) => (RESULT=vsomeExp(vapp(vgetSomeExp(Ve1red),Ve2)))))))).
fof('reduce22', axiom, (![Ve2,Ve1,Ve1red,VExp0,RESULT] : (((VExp0=vapp(Ve1,Ve2)) & (![VVx0,VVS0,VVe10] : (Ve1!=vabs(VVx0,VVS0,VVe10)))) => (((Ve1red=vreduce(Ve1)) & (~visSomeExp(Ve1red))) => ((RESULT=vreduce(VExp0)) => (RESULT=vnoExp)))))).
fof('reduce-INV', axiom, (![VExp0,RESULT] : ((vreduce(VExp0)=RESULT) => (((VExp0=vTrue) & (RESULT=vnoExp)) | (((VExp0=vFalse) & (RESULT=vnoExp)) | (((VExp0=vZero) & (RESULT=vnoExp)) | ((?[Ve] : ((VExp0=vsucc(Ve)) & (visNum(Ve) & (RESULT=vnoExp)))) | ((?[Ve,Vered] : ((VExp0=vsucc(Ve)) & ((~visNum(Ve)) & ((Vered=vreduce(Ve)) & (visSomeExp(Vered) & (RESULT=vsomeExp(vsucc(vgetSomeExp(Vered))))))))) | ((?[Ve,Vered] : ((VExp0=vsucc(Ve)) & ((~visNum(Ve)) & ((Vered=vreduce(Ve)) & ((~visSomeExp(Vered)) & (RESULT=vnoExp)))))) | ((?[Ve] : ((VExp0=vpred(vsucc(Ve))) & (visNum(Ve) & (RESULT=vsomeExp(Ve))))) | ((?[Ve,Vered] : ((VExp0=vpred(vsucc(Ve))) & ((~visNum(Ve)) & ((Vered=vreduce(Ve)) & (visSomeExp(Vered) & (RESULT=vsomeExp(vpred(vsucc(vgetSomeExp(Vered)))))))))) | ((?[Ve,Vered] : ((VExp0=vpred(vsucc(Ve))) & ((~visNum(Ve)) & ((Vered=vreduce(Ve)) & ((~visSomeExp(Vered)) & (RESULT=vnoExp)))))) | (((VExp0=vpred(vZero)) & (RESULT=vsomeExp(vZero))) | ((?[Ve,Vered] : ((VExp0=vpred(Ve)) & ((Ve!=vZero) & ((![VVe0] : (Ve!=vsucc(VVe0))) & ((Vered=vreduce(Ve)) & (visSomeExp(Vered) & (RESULT=vsomeExp(vpred(vgetSomeExp(Vered)))))))))) | ((?[Ve,Vered] : ((VExp0=vpred(Ve)) & ((Ve!=vZero) & ((![VVe0] : (Ve!=vsucc(VVe0))) & ((Vered=vreduce(Ve)) & ((~visSomeExp(Vered)) & (RESULT=vnoExp))))))) | (((VExp0=visZero(vZero)) & (RESULT=vsomeExp(vTrue))) | ((?[Ve] : ((VExp0=visZero(Ve)) & ((Ve!=vZero) & (visValue(Ve) & (RESULT=vsomeExp(vFalse)))))) | ((?[Ve,Vered] : ((VExp0=visZero(Ve)) & ((Ve!=vZero) & ((~visValue(Ve)) & ((Vered=vreduce(Ve)) & (visSomeExp(Vered) & (RESULT=vsomeExp(visZero(vgetSomeExp(Vered)))))))))) | ((?[Ve,Vered] : ((VExp0=visZero(Ve)) & ((Ve!=vZero) & ((~visValue(Ve)) & ((Vered=vreduce(Ve)) & ((~visSomeExp(Vered)) & (RESULT=vnoExp))))))) | ((?[Vx] : ((VExp0=vvar(Vx)) & (RESULT=vnoExp))) | ((?[Vx,VS,Ve] : ((VExp0=vabs(Vx,VS,Ve)) & (RESULT=vnoExp))) | ((?[Ve2,Vx,VS,Ve1,Ve2red] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) & ((Ve2red=vreduce(Ve2)) & (visSomeExp(Ve2red) & (RESULT=vsomeExp(vapp(vabs(Vx,VS,Ve1),vgetSomeExp(Ve2red)))))))) | ((?[VS,Ve2red,Vx,Ve2,Ve1] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) & ((Ve2red=vreduce(Ve2)) & ((~visSomeExp(Ve2red)) & (visValue(Ve2) & (RESULT=vsomeExp(vsubst(Vx,Ve2,Ve1)))))))) | ((?[Vx,VS,Ve1,Ve2red,Ve2] : ((VExp0=vapp(vabs(Vx,VS,Ve1),Ve2)) & ((Ve2red=vreduce(Ve2)) & ((~visSomeExp(Ve2red)) & ((~visValue(Ve2)) & (RESULT=vnoExp)))))) | ((?[Ve1,Ve1red,Ve2] : ((VExp0=vapp(Ve1,Ve2)) & ((![VVx0,VVS0,VVe10] : (Ve1!=vabs(VVx0,VVS0,VVe10))) & ((Ve1red=vreduce(Ve1)) & (visSomeExp(Ve1red) & (RESULT=vsomeExp(vapp(vgetSomeExp(Ve1red),Ve2)))))))) | (?[Ve2,Ve1,Ve1red] : ((VExp0=vapp(Ve1,Ve2)) & ((![VVx0,VVS0,VVe10] : (Ve1!=vabs(VVx0,VVS0,VVe10))) & ((Ve1red=vreduce(Ve1)) & ((~visSomeExp(Ve1red)) & (RESULT=vnoExp))))))))))))))))))))))))))))))).
fof('reduce-CODOM', axiom, (![Ve,Vres] : ((vreduce(Ve)=Vres) => ((Vres=vnoExp) | (?[Ve2] : (Vres=vsomeExp(Ve2))))))).
fof('EQ-e1', axiom, (((ve1=ve1) => $true) & ($true => (ve1=ve1)))).
fof('EQ-e2', axiom, (((ve2=ve2) => $true) & ($true => (ve2=ve2)))).
fof('T-Preservation-T-app-IH1', axiom, (![VC,Veout,VT] : (((vreduce(ve1)=vsomeExp(Veout)) & vtcheck(VC,ve1,VT)) => vtcheck(VC,Veout,VT)))).
fof('T-Preservation-T-app-IH2', axiom, (![VC,Veout,VT] : (((vreduce(ve2)=vsomeExp(Veout)) & vtcheck(VC,ve2,VT)) => vtcheck(VC,Veout,VT)))).
fof('T-Preservation-T-app-results-1', axiom, (![VC,Vx,VS,Ve,Ve2red,VT] : (((ve1=vabs(Vx,VS,Ve)) & (vtcheck(VC,vapp(ve1,ve2),VT) & (vreduce(ve2)=vsomeExp(Ve2red)))) => vtcheck(VC,vapp(vabs(Vx,VS,Ve),Ve2red),VT)))).
fof('T-Preservation-T-app-results-2', axiom, (![VS,VC,Vx,Ve,VT] : (((ve1=vabs(Vx,VS,Ve)) & vtcheck(VC,vapp(ve1,ve2),VT)) => vtcheck(VC,vsubst(Vx,ve2,Ve),VT)))).
fof('T-Preservation-T-app-results-4', axiom, (![VC,Ve1red,VT] : ((vtcheck(VC,vapp(ve1,ve2),VT) & (vreduce(ve1)=vsomeExp(Ve1red))) => vtcheck(VC,vapp(Ve1red,ve2),VT)))).
fof('T-Preservation-T-app-1', axiom, (![Vx,VS,Ve,VC,Veout,VT] : (((ve1=vabs(Vx,VS,Ve)) & (visSomeExp(vreduce(ve2)) & ((vreduce(vapp(ve1,ve2))=vsomeExp(Veout)) & vtcheck(VC,vapp(ve1,ve2),VT)))) => vtcheck(VC,Veout,VT)))).
fof('T-Preservation-T-app-2', axiom, (![Vx,VS,Ve,VC,Veout,VT] : (((ve1=vabs(Vx,VS,Ve)) & ((~visSomeExp(vreduce(ve2))) & (visValue(ve2) & ((vreduce(vapp(ve1,ve2))=vsomeExp(Veout)) & vtcheck(VC,vapp(ve1,ve2),VT))))) => vtcheck(VC,Veout,VT)))).
fof('T-Preservation-T-app-3', axiom, (![Vx,VS,Ve,VC,Veout,VT] : (((ve1=vabs(Vx,VS,Ve)) & ((~visSomeExp(vreduce(ve2))) & ((~visValue(ve2)) & ((vreduce(vapp(ve1,ve2))=vsomeExp(Veout)) & vtcheck(VC,vapp(ve1,ve2),VT))))) => vtcheck(VC,Veout,VT)))).
fof('T-Preservation-T-app-4', axiom, (![Vx,VS,Ve,VC,Veout,VT] : (((ve1!=vabs(Vx,VS,Ve)) & (visSomeExp(vreduce(ve1)) & ((vreduce(vapp(ve1,ve2))=vsomeExp(Veout)) & vtcheck(VC,vapp(ve1,ve2),VT)))) => vtcheck(VC,Veout,VT)))).
fof('T-Preservation-T-app-5', conjecture, (![Vx,VS,Ve,VC,Veout,VT] : (((ve1!=vabs(Vx,VS,Ve)) & ((~visSomeExp(vreduce(ve1))) & ((vreduce(vapp(ve1,ve2))=vsomeExp(Veout)) & vtcheck(VC,vapp(ve1,ve2),VT)))) => vtcheck(VC,Veout,VT)))).