module stlcS2.SubstLemmaAux

import stlcS2.Syntax
import stlcS2.Context
import stlcS2.Subst { names }
import stlcS2.AlphaEquivalence
import stlcS2.Types


//Auxiliary lemmas for on contexts

//Proof by structural induction 

local {
	//hide { T-inv, T-inv-app, T-inv-inl, T-inv-inl-type, T-inv-inr, T-inv-inr-type, T-inv-abs, T-inv-case }

	// goal
	// !isFreeVar(~x, var(~y))
	// ~C |- var(~y) : ~T
	// ================================ T-Weak-FreeVar-var
	// bind(~x, ~S, ~C) |- var(~y) : ~T
	
	goal
	~e == var(~y)
	!isFreeVar(~x, ~e)
	~C |- ~e : ~T
	================================ T-Weak-FreeVar-var
	bind(~x, ~S, ~C) |- ~e : ~T
	
}

local {
	//hide { T-inv, T-inv-app, T-inv-inl, T-inv-inl-type, T-inv-inr, T-inv-inr-type, T-inv-var, T-inv-case }
	
	const eabs : Exp

	axiom
	!isFreeVar(~x, eabs)
	~C |- eabs : ~T
	============================== T-Weak-FreeVar-abs-IH
	bind(~x, ~S, ~C) |- eabs : ~T
	
	goal
	~x != ~y
	!isFreeVar(~x, abs(~y, ~S1, eabs))
	~C |- abs(~y, ~S1, eabs) : ~T
	============================= T-Weak-FreeVar-abs-1
	bind(~x, ~S, ~C) |- abs(~y, ~S1, eabs) : ~T
}

local {
	//hide { T-inv, T-inv-app, T-inv-abs, T-inv-inr, T-inv-inr-type, T-inv-var, T-inv-case }
	
	const e1 : Exp

	axiom
	!isFreeVar(~x, e1)
	~C |- e1 : ~T
	============================== T-Weak-FreeVar-inl-IH
	bind(~x, ~S, ~C) |- e1 : ~T
	
	goal
	~x != ~y
	!isFreeVar(~x, inl(e1, ~T2))
	~C |- inl(e1, ~T2) : ~T
	============================= T-Weak-FreeVar-inl-1
	bind(~x, ~S, ~C) |- inl(e1, ~T2) : ~T
}

local {
	//hide { T-inv, T-inv-app, T-inv-abs, T-inv-inl, T-inv-inl-type, T-inv-var, T-inv-case }
	
	const e1 : Exp

	axiom
	!isFreeVar(~x, e1)
	~C |- e1 : ~T
	============================== T-Weak-FreeVar-inr-IH
	bind(~x, ~S, ~C) |- e1 : ~T
	
	goal
	~x != ~y
	!isFreeVar(~x, inr(e1, ~T2))
	~C |- inr(e1, ~T2) : ~T
	============================= T-Weak-FreeVar-inr-1
	bind(~x, ~S, ~C) |- inr(e1, ~T2) : ~T
}


local {
	hide { T-inv, T-inv-app, T-inv-inl, T-inv-inl-type, T-inv-inr, T-inv-inr-type, T-inv-var, T-inv-case }
	
	const eabs : Exp
	
	axiom
	~x != ~y
	!isFreeVar(~x, abs(~y, ~S1, ~e1))
	~C |- abs(~y, ~S1, ~e1) : ~T
	============================= T-Weak-FreeVar-abs-1
	bind(~x, ~S, ~C) |- abs(~y, ~S1, ~e1) : ~T
	
	
	//necessary axioms on alpha equivalence
	axioms
	============================ alpha-equiv-refl
	alphaEquivalent(~e, ~e)


	alphaEquivalent(~e1, ~e2)
	============================ alpha-equiv-sym
	alphaEquivalent(~e2, ~e1)

 
	alphaEquivalent(~e1, ~e2)
	alphaEquivalent(~e2, ~e3)
	============================ alpha-equiv-trans
	alphaEquivalent(~e1, ~e3)

	!isFreeVar(~y, ~e)
	====================================================================== alpha-equiv-subst-abs
	alphaEquivalent(abs(~x, ~S, ~e), abs(~y, ~S, subst(~x, var(~y), ~e)))


	~C |- ~e : ~T
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-typing
	~C |- ~e1 : ~T
	
	!isFreeVar(~x, ~e)
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-FreeVar
	!isFreeVar(~x, ~e1)

	//NOT needed!
	axiom
	!isFreeVar(~x, eabs)
	~C |- eabs : ~T
	============================== T-Weak-FreeVar-abs-IH
	bind(~x, ~S, ~C) |- eabs : ~T

	goal
	~x == ~y
	!isFreeVar(~x, abs(~y, ~S1, eabs))
	~C |- abs(~y, ~S1, eabs) : ~T
	======================================== T-Weak-FreeVar-abs-2
	bind(~x, ~S, ~C) |- abs(~y, ~S1, eabs) : ~T
	
	// goal
	// ~e == abs(~y, ~S1, eabs)
	// ~x == ~y
	// !isFreeVar(~x, ~e)
	// ~C |- ~e : ~T
	// ======================================== T-Weak-FreeVar-abs-2
	// bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	//hide { T-inv, T-inv-var, T-inv-inl, T-inv-inl-type, T-inv-inr, T-inv-inr-type, T-inv-abs, T-inv-case }
	
	consts
		e1app : Exp
		e2app : Exp
		
	axioms
	!isFreeVar(~x, e1app)
	~C |- e1app : ~T
	=============================== T-Weak-FreeVar-app-IH1
	bind(~x, ~S, ~C) |- e1app : ~T
	
	!isFreeVar(~x, e2app)
	~C |- e2app : ~T
	=============================== T-Weak-FreeVar-app-IH2
	bind(~x, ~S, ~C) |- e2app : ~T
	
	
	goal
	!isFreeVar(~x, app(e1app, e2app))
	~C |- app(e1app, e2app) : ~T
	========================================= T-Weak-FreeVar-app
	bind(~x, ~S, ~C) |- app(e1app, e2app) : ~T
}

local {
	//hide { T-inv, T-inv-app, T-inv-inl, T-inv-inl-type, T-inv-inr, T-inv-inr-type, T-inv-abs, T-inv-var }
	
	consts
	    e1 : Exp
	    t1 : Exp
	    t2 : Exp
	    
	axiom
	!isFreeVar(~x, e1)
	~C |- e1 : ~T
	=========================== T-Weak-FreeVar-case-IH1
	bind(~x, ~S, ~C) |- e1 : ~T
	
	axiom
	!isFreeVar(~x, t1)
	~C |- t1 : ~T
	=========================== T-Weak-FreeVar-case-IH2
	bind(~x, ~S, ~C) |- t1 : ~T
	
	axiom
	!isFreeVar(~x, t2)
	~C |- t2 : ~T
	=========================== T-Weak-FreeVar-case-IH3
	bind(~x, ~S, ~C) |- t2 : ~T
    
	goal
	~x != ~x1
	~x != ~x2
	!isFreeVar(~x, case(e1, ~x1, t1, ~x2, t2))
	~C |- case(e1, ~x1, t1, ~x2, t2) : ~T
	================================ T-Weak-FreeVar-case-1
	bind(~x, ~S, ~C) |- case(e1, ~x1, t1, ~x2, t2) : ~T
}

local {
	//hide { T-inv, T-inv-app, T-inv-inl, T-inv-inl-type, T-inv-inr, T-inv-inr-type, T-inv-abs, T-inv-var }
	
	consts
	    e1 : Exp
	    t1 : Exp
	    t2 : Exp
	
    axiom
	~x != ~x1
	~x != ~x2
	!isFreeVar(~x, case(~e11, ~x1, ~t11, ~x2, ~t21))
	~C |- case(~e11, ~x1, ~t11, ~x2, ~t21) : ~T
	================================ T-Weak-FreeVar-case-1
	bind(~x, ~S, ~C) |- case(~e11, ~x1, ~t11, ~x2, ~t21) : ~T
	
	axiom
	!isFreeVar(~x, e1)
	~C |- e1 : ~T
	=========================== T-Weak-FreeVar-case-IH1
	bind(~x, ~S, ~C) |- e1 : ~T
	
	axiom
	!isFreeVar(~x, t1)
	~C |- t1 : ~T
	=========================== T-Weak-FreeVar-case-IH2
	bind(~x, ~S, ~C) |- t1 : ~T
	
	axiom
	!isFreeVar(~x, t2)
	~C |- t2 : ~T
	=========================== T-Weak-FreeVar-case-IH3
	bind(~x, ~S, ~C) |- t2 : ~T
    
    // necessary axioms on alpha equivalence
	axioms
	============================ alpha-equiv-refl
	alphaEquivalent(~e, ~e)


	alphaEquivalent(~e1, ~e2)
	============================ alpha-equiv-sym
	alphaEquivalent(~e2, ~e1)

 
	alphaEquivalent(~e1, ~e2)
	alphaEquivalent(~e2, ~e3)
	============================ alpha-equiv-trans
	alphaEquivalent(~e1, ~e3)
	
	~C |- ~e : ~T
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-typing
	~C |- ~e1 : ~T
	
	!isFreeVar(~y, ~t1)
	====================================================================== alpha-equiv-subst-case-1
	alphaEquivalent(case(~e, ~x1, ~t1, ~x2, ~t2), case(~e, ~y, subst(~x1, var(~y), ~t1), ~x2, ~t2))

	!isFreeVar(~y, ~t2)
	====================================================================== alpha-equiv-subst-case-2
	alphaEquivalent(case(~e, ~x1, ~t1, ~x2, ~t2), case(~e, ~x1, ~t1, ~y, subst(~x2, var(~y), ~t2)))
	
	!isFreeVar(~x, ~e)
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-FreeVar
	!isFreeVar(~x, ~e1)
	
	lemma
	!isFreeVar(~y, ~t1)
	!isFreeVar(~y, ~t2)
	=================== alpha-equiv-subst-case-3
	alphaEquivalent(case(~e, ~x1, ~t1, ~x2, ~t2), case(~e, ~y, subst(~x1, var(~y), ~t1), ~y, subst(~x2, var(~y), ~t2)))
   
	// goal
	// ~x == ~x1
	// ~x != ~x2
	// !isFreeVar(~x, case(e1, ~x1, t1, ~x2, t2))
	// ~C |- case(e1, ~x1, t1, ~x2, t2) : ~T
	// ================================ T-Weak-FreeVar-case-2
	// bind(~x, ~S, ~C) |- case(e1, ~x1, t1, ~x2, t2) : ~T
	
	goal
	~e == case(e1, ~x1, t1, ~x2, t2)
	~x == ~x1
	~x != ~x2
	!isFreeVar(~x, ~e)
	~C |- ~e : ~T
	================================ T-Weak-FreeVar-case-2
	bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	//hide { T-inv, T-inv-app, T-inv-inl, T-inv-inl-type, T-inv-inr, T-inv-inr-type, T-inv-abs, T-inv-var }
	
	consts
	    e1 : Exp
	    t1 : Exp
	    t2 : Exp
	
    axiom
	~x != ~x1
	~x != ~x2
	!isFreeVar(~x, case(~e11, ~x1, ~t11, ~x2, ~t21))
	~C |- case(~e11, ~x1, ~t11, ~x2, ~t21) : ~T
	================================ T-Weak-FreeVar-case-1
	bind(~x, ~S, ~C) |- case(~e11, ~x1, ~t11, ~x2, ~t21) : ~T
	
	axiom
	!isFreeVar(~x, e1)
	~C |- e1 : ~T
	=========================== T-Weak-FreeVar-case-IH1
	bind(~x, ~S, ~C) |- e1 : ~T
	
	axiom
	!isFreeVar(~x, t1)
	~C |- t1 : ~T
	=========================== T-Weak-FreeVar-case-IH2
	bind(~x, ~S, ~C) |- t1 : ~T
	
	axiom
	!isFreeVar(~x, t2)
	~C |- t2 : ~T
	=========================== T-Weak-FreeVar-case-IH3
	bind(~x, ~S, ~C) |- t2 : ~T
    
    // necessary axioms on alpha equivalence
	axioms
	============================ alpha-equiv-refl
	alphaEquivalent(~e, ~e)


	alphaEquivalent(~e1, ~e2)
	============================ alpha-equiv-sym
	alphaEquivalent(~e2, ~e1)

 
	alphaEquivalent(~e1, ~e2)
	alphaEquivalent(~e2, ~e3)
	============================ alpha-equiv-trans
	alphaEquivalent(~e1, ~e3)
	
	~C |- ~e : ~T
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-typing
	~C |- ~e1 : ~T
	
	!isFreeVar(~y, ~t1)
	====================================================================== alpha-equiv-subst-case-1
	alphaEquivalent(case(~e, ~x1, ~t1, ~x2, ~t2), case(~e, ~y, subst(~x1, var(~y), ~t1), ~x2, ~t2))

	!isFreeVar(~y, ~t2)
	====================================================================== alpha-equiv-subst-case-2
	alphaEquivalent(case(~e, ~x1, ~t1, ~x2, ~t2), case(~e, ~x1, ~t1, ~y, subst(~x2, var(~y), ~t2)))
	
	!isFreeVar(~x, ~e)
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-FreeVar
	!isFreeVar(~x, ~e1)
	
	lemma
	!isFreeVar(~y, ~t1)
	!isFreeVar(~y, ~t2)
	=================== alpha-equiv-subst-case-3
	alphaEquivalent(case(~e, ~x1, ~t1, ~x2, ~t2), case(~e, ~y, subst(~x1, var(~y), ~t1), ~y, subst(~x2, var(~y), ~t2)))
    
	// goal
	// ~x != ~x1
	// ~x == ~x2
	// !isFreeVar(~x, case(e1, ~x1, t1, ~x2, t2))
	// ~C |- case(e1, ~x1, t1, ~x2, t2) : ~T
	// ================================ T-Weak-FreeVar-case-3
	// bind(~x, ~S, ~C) |- case(e1, ~x1, t1, ~x2, t2) : ~T
	
	goal
	~e == case(e1, ~x1, t1, ~x2, t2)
	~x != ~x1
	~x == ~x2
	!isFreeVar(~x, ~e)
	~C |- ~e : ~T
	================================ T-Weak-FreeVar-case-3
	bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	//hide { T-inv, T-inv-app, T-inv-inl, T-inv-inl-type, T-inv-inr, T-inv-inr-type, T-inv-abs, T-inv-var }
	
	consts
	    e1 : Exp
	    t1 : Exp
	    t2 : Exp
	
    axiom
	~x != ~x1
	~x != ~x2
	!isFreeVar(~x, case(~e11, ~x1, ~t11, ~x2, ~t21))
	~C |- case(~e11, ~x1, ~t11, ~x2, ~t21) : ~T
	================================ T-Weak-FreeVar-case-1
	bind(~x, ~S, ~C) |- case(~e11, ~x1, ~t11, ~x2, ~t21) : ~T
	
	axiom
	!isFreeVar(~x, e1)
	~C |- e1 : ~T
	=========================== T-Weak-FreeVar-case-IH1
	bind(~x, ~S, ~C) |- e1 : ~T
	
	axiom
	!isFreeVar(~x, t1)
	~C |- t1 : ~T
	=========================== T-Weak-FreeVar-case-IH2
	bind(~x, ~S, ~C) |- t1 : ~T
	
	axiom
	!isFreeVar(~x, t2)
	~C |- t2 : ~T
	=========================== T-Weak-FreeVar-case-IH3
	bind(~x, ~S, ~C) |- t2 : ~T
    
    // necessary axioms on alpha equivalence
	axioms
	============================ alpha-equiv-refl
	alphaEquivalent(~e, ~e)


	alphaEquivalent(~e1, ~e2)
	============================ alpha-equiv-sym
	alphaEquivalent(~e2, ~e1)

 
	alphaEquivalent(~e1, ~e2)
	alphaEquivalent(~e2, ~e3)
	============================ alpha-equiv-trans
	alphaEquivalent(~e1, ~e3)
	
	~C |- ~e : ~T
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-typing
	~C |- ~e1 : ~T
	
	!isFreeVar(~y, ~t1)
	====================================================================== alpha-equiv-subst-case-1
	alphaEquivalent(case(~e, ~x1, ~t1, ~x2, ~t2), case(~e, ~y, subst(~x1, var(~y), ~t1), ~x2, ~t2))

	!isFreeVar(~y, ~t2)
	====================================================================== alpha-equiv-subst-case-2
	alphaEquivalent(case(~e, ~x1, ~t1, ~x2, ~t2), case(~e, ~x1, ~t1, ~y, subst(~x2, var(~y), ~t2)))
	
	!isFreeVar(~x, ~e)
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-FreeVar
	!isFreeVar(~x, ~e1)
	
	lemma
	!isFreeVar(~y, ~t1)
	!isFreeVar(~y, ~t2)
	=================== alpha-equiv-subst-case-3
	alphaEquivalent(case(~e, ~x1, ~t1, ~x2, ~t2), case(~e, ~y, subst(~x1, var(~y), ~t1), ~y, subst(~x2, var(~y), ~t2)))
   
	// goal
	// ~x == ~x1
	// ~x == ~x2
	// !isFreeVar(~x, case(e1, ~x1, t1, ~x2, t2))
	// ~C |- case(e1, ~x1, t1, ~x2, t2) : ~T
	// ================================ T-Weak-FreeVar-case-4
	// bind(~x, ~S, ~C) |- case(e1, ~x1, t1, ~x2, t2) : ~T
	
	goal
	~e == case(e1, ~x1, t1, ~x2, t2)
	~x == ~x1
	~x == ~x2
	!isFreeVar(~x, ~e)
	~C |- ~e : ~T
	================================ T-Weak-FreeVar-case-4
	bind(~x, ~S, ~C) |- ~e : ~T
}