module encodingcompstudy.Semantics-test

import encodingcompstudy.Tables
import encodingcompstudy.TableAux
import encodingcompstudy.Syntax
import encodingcompstudy.TStore
import encodingcompstudy.Semantics

local {
	different consts 
		x1 : Val
		x2 : Val
		y1 : Val
		y2 : Val
		z1 : Val
		z2 : Val
		
	different consts
		TN : Name
		A1 : Name
		A2 : Name
		A3 : Name

	goal
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~t == table(~al, ~rt)
	~ts == bindStore(TN, ~t, emptyStore)
	~q == SelectAllFrom(Ref(TN))
	========================================================== test-Selectallfrom
	reduce(conf(~q, ~ts)) == someConf(conf(tvalue(~t), ~ts))
}

local {
	different consts 
		x1 : Val
		x2 : Val
		y1 : Val
		y2 : Val
		z1 : Val
		z2 : Val
		
	different consts
		A1 : Name
		A2 : Name
		A3 : Name

	goal
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), tempty)
	~t == table(~al, ~rt)
	~tresult == tcons(rcons(x1, rempty), tempty)
	=================================================================================== test-projection0
	project(acons(A1, aempty), ~t) == someRawTable(~tresult)
}

local {
	different consts 
		x1 : Val
		x2 : Val
		y1 : Val
		y2 : Val
		z1 : Val
		z2 : Val
		
	different consts
		A1 : Name
		A2 : Name
		A3 : Name

	goal
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~t == table(~al, ~rt)
	~tresult == tcons(rcons(x1, rempty), tcons(rcons(x2, rempty), tempty))
	=================================================================================== test-projection1
	project(acons(A1, aempty), ~t) == someRawTable(~tresult)
}

local {
	different consts 
		x1 : Val
		x2 : Val
		y1 : Val
		y2 : Val
		z1 : Val
		z2 : Val
		
	different consts
		A1 : Name
		A2 : Name
		A3 : Name

	goal
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), tempty)
	~t == table(~al, ~rt)
	~tresult == tcons(rcons(y2, rempty), tempty)
	=================================================================================== test-projection2
	project(acons(A2, aempty), ~t) == someRawTable(~tresult)
}



local {
	different consts 
		x1 : Val
		x2 : Val
		y1 : Val
		y2 : Val
		z1 : Val
		z2 : Val
		
	different consts
		TN : Name
		A1 : Name
		A2 : Name
		A3 : Name	

	axiom
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~t == table(~al, ~rt)
	~tresult == tcons(rcons(x1, rempty), tcons(rcons(x2, rempty), tempty))
	=================================================================================== test-projection1
	project(acons(A1, aempty), ~t) == someRawTable(~tresult)

	goal
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~t == table(~al, ~rt)
	~ts == bindStore(TN, ~t, emptyStore)
	~q == SelectSomeFrom(acons(A1, aempty), Ref(TN))
	~tresult == table(acons(A1, aempty), tcons(rcons(x1, rempty), tcons(rcons(x2, rempty), tempty)))
	================================================================================================== test-Selectsomefrom
	reduce(conf(~q, ~ts)) == someConf(conf(tvalue(~tresult), ~ts))
}


local {
	different consts 
		x1 : Val
		x2 : Val
		y1 : Val
		y2 : Val
		z1 : Val
		z2 : Val
		
	different consts
		A1 : Name
		A2 : Name
		A3 : Name

	goal
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~t == table(~al, ~rt)
	~tresult == tcons(rcons(y2, rempty), tcons(rcons(y1, rempty), tempty))
	=================================================================================== test-projection2-1
	project(acons(A2, aempty), ~t) == someRawTable(~tresult)
}

local {
	different consts
		x1 : Val
		x2 : Val
		y1 : Val
		y2 : Val
		z1 : Val
		z2 : Val
		
	different consts
		TN : Name
		A1 : Name
		A2 : Name
		A3 : Name

	goal
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt ==	tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
			tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~t == table(~al, ~rt)
	~tresult == tcons(rcons(y2, rcons(x1, rempty)), tcons(rcons(y1, rcons(x2, rempty)), tempty))
	============================================================================================= test-projection3
	project(acons(A2, acons(A1, aempty)), ~t) == someRawTable(~tresult)
}

local {
	different consts 
		x1 : Val
		x2 : Val
		y1 : Val
		y2 : Val
		z1 : Val
		z2 : Val
		
	different consts
		TN : Name
		A1 : Name
		A2 : Name
		A3 : Name
		
	axiom
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~t == table(~al, ~rt)
	~tresult == tcons(rcons(y2, rcons(x1, rempty)), tcons(rcons(y1, rcons(x2, rempty)), tempty))
	============================================================================================= test-projection3
	project(acons(A2, acons(A1, aempty)), ~t) == someRawTable(~tresult)

	goal
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~t == table(~al, ~rt)
	~ts == bindStore(TN, ~t, emptyStore)
	~q == SelectSomeFrom(acons(A2, acons(A1, aempty)), Ref(TN))
	~tresult == table(acons(A2, acons(A1, aempty)), 
		tcons(rcons(y2, rcons(x1, rempty)), tcons(rcons(y1, rcons(x2, rempty)), tempty)))
	======================================================================================= test-Selectsomefrom-2
	reduce(conf(~q, ~ts)) == someConf(conf(tvalue(~tresult), ~ts))
}


local {
	different consts 
		x1 : Val
		x2 : Val
		y1 : Val
		y2 : Val
		z1 : Val
		z2 : Val
		
	different consts
		TN : Name
		A1 : Name
		A2 : Name
		A3 : Name


	lemma
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~r == rcons(x1, rcons(y2, rcons(z2, rempty)))
	=============================================================================== aux-singleRow-1
	filterSingleRow(~al, VEquals(A1, x1), ~r) == isTrue
	
	lemma
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~r == rcons(x2, rcons(y1, rcons(z1, rempty)))
	=============================================================================== aux-singleRow-2
	filterSingleRow(~al, VEquals(A1, x1), ~r) == isFalse
	

	goal
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~t == table(~al, ~rt)
	~tresult == table(~al, tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), tempty))
	=================================================================================== test-selection1
	select(~t, VEquals(A1, x1)) == someTable(~tresult)
}


local {
	different consts 
		x1 : Val
		x2 : Val
		y1 : Val
		y2 : Val
		z1 : Val
		z2 : Val
		
	different consts
		TN : Name
		A1 : Name
		A2 : Name
		A3 : Name
	
	lemma
	~rt1 == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~rt2 == tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), tempty))
	~rtresult == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), tempty))))
	===================================================== aux-rawUnion
	rawUnion(~rt1, ~rt2) == ~rtresult
	
	goal
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt1 == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~rt2 == tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), tempty))
	~rtresult == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), tempty))))
	~t1 == table(~al, ~rt1)
	~t2 == table(~al, ~rt2)
	~ts == bindStore(TN, ~t, emptyStore)
	~q == Union(tvalue(~t1), tvalue(~t2))
	~t == table(~al, ~rtresult)
	============================================================================== test-union1
	reduce(conf(~q, ~ts)) == someConf(conf(tvalue(~t), ~ts))
}


local {
	different consts 
		x1 : Val
		x2 : Val
		y1 : Val
		y2 : Val
		z1 : Val
		z2 : Val
		
	different consts
		TN : Name
		A1 : Name
		A2 : Name
		A3 : Name

	
	axiom
	~rt1 == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~rt2 == tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), tempty))
	===================================================== aux-rawIntersection
	rawIntersection(~rt1, ~rt2) == tempty
	
	goal
	~al == acons(A1, acons(A2, acons(A3, aempty)))
	~rt1 == tcons(rcons(x1, rcons(y2, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z1, rempty))), tempty))
	~rt2 == tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), 
		tcons(rcons(x2, rcons(y1, rcons(z2, rempty))), tempty))
	~t1 == table(~al, ~rt1)
	~t2 == table(~al, ~rt2)
	~ts == bindStore(TN, ~t, emptyStore)
	~q == Intersection(tvalue(~t1), tvalue(~t2))
	~t == table(~al, tempty)
	============================================================================== test-intersection1
	reduce(conf(~q, ~ts)) == someConf(conf(tvalue(~t), ~ts))
}


