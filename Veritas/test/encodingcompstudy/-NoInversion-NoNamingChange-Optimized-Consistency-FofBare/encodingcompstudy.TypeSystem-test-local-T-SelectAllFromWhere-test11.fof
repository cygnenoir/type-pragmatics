fof('EQ-ctype', axiom, ![VAName0, VAName1, VFType0, VFType1] : ((VAName0 = VAName1 & VFType0 = VFType1) <=> vctype(VAName0, VFType0) = vctype(VAName1, VFType1))).
fof('EQ-aempty', axiom, $true).
fof('EQ-acons', axiom, ![VAName0, VAName1, VAList0, VAList1] : ((VAName0 = VAName1 & VAList0 = VAList1) <=> vacons(VAName0, VAList0) = vacons(VAName1, VAList1))).
fof('DIFF-acons-aempty', axiom, ![VAName0, VAList0] : vacons(VAName0, VAList0) != vaempty).
fof('EQ-ttempty', axiom, $true).
fof('EQ-ttcons', axiom, ![VCType0, VCType1, VTType0, VTType1] : ((VCType0 = VCType1 & VTType0 = VTType1) <=> vttcons(VCType0, VTType0) = vttcons(VCType1, VTType1))).
fof('DIFF-ttcons-ttempty', axiom, ![VCType0, VTType0] : vttcons(VCType0, VTType0) != vttempty).
fof('EQ-rtempty', axiom, $true).
fof('EQ-rtcons', axiom, ![VFType0, VFType1, VRawType0, VRawType1] : ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> vrtcons(VFType0, VRawType0) = vrtcons(VFType1, VRawType1))).
fof('DIFF-rtcons-rtempty', axiom, ![VFType0, VRawType0] : vrtcons(VFType0, VRawType0) != vrtempty).
fof('EQ-rempty', axiom, $true).
fof('EQ-rcons', axiom, ![VFVal0, VFVal1, VRow0, VRow1] : ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> vrcons(VFVal0, VRow0) = vrcons(VFVal1, VRow1))).
fof('DIFF-rcons-rempty', axiom, ![VFVal0, VRow0] : vrcons(VFVal0, VRow0) != vrempty).
fof('EQ-tempty', axiom, $true).
fof('EQ-tcons', axiom, ![VRow0, VRow1, VRawTable0, VRawTable1] : ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> vtcons(VRow0, VRawTable0) = vtcons(VRow1, VRawTable1))).
fof('DIFF-tcons-tempty', axiom, ![VRow0, VRawTable0] : vtcons(VRow0, VRawTable0) != vtempty).
fof('EQ-table', axiom, ![VAList0, VAList1, VRawTable0, VRawTable1] : ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> vtable(VAList0, VRawTable0) = vtable(VAList1, VRawTable1))).
fof('getRaw0', axiom, ![Val, Vrt] : vgetRaw(vtable(Val, Vrt)) = Vrt).
fof('getAL0', axiom, ![Val, Vrt] : vgetAL(vtable(Val, Vrt)) = Val).
fof('matchingAList0', axiom, vmatchingAList(vttempty, vaempty)).
fof('matchingAList1', axiom, ![Va1, Va2, Val, Vf, Vtt] : (vmatchingAList(vttcons(vctype(Va1, Vf), Vtt), vacons(Va2, Val)) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val)))).
fof('matchingAList2', axiom, ![Vtt, Val] : (((Vtt != vttempty | Val != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0))) => (~vmatchingAList(Vtt, Val)))).
fof('welltypedtable0', axiom, ![Vtt, Val, Vt] : (vwelltypedtable(Vtt, vtable(Val, Vt)) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))).
fof('rawType0', axiom, vrawType(vttempty) = vrtempty).
fof('rawType1', axiom, ![Va, Vft, Vtt] : vrawType(vttcons(vctype(Va, Vft), Vtt)) = vrtcons(Vft, vrawType(Vtt))).
fof('welltypedRawtable0', axiom, ![Vrt] : vwelltypedRawtable(Vrt, vtempty)).
fof('welltypedRawtable1', axiom, ![Vrt, Vr, Vt] : (vwelltypedRawtable(Vrt, vtcons(Vr, Vt)) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))).
fof('welltypedRow0', axiom, vwelltypedRow(vrtempty, vrempty)).
fof('welltypedRow1', axiom, ![Vft, Vrt, Vv, Vr] : (vwelltypedRow(vrtcons(Vft, Vrt), vrcons(Vv, Vr)) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))).
fof('welltypedRow2', axiom, ![Vrt, Vr] : (((Vrt != vrtempty | Vr != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(Vrt, Vr)))).
fof('EQ-noTable', axiom, $true).
fof('EQ-someTable', axiom, ![VTable0, VTable1] : (VTable0 = VTable1 <=> vsomeTable(VTable0) = vsomeTable(VTable1))).
fof('DIFF-someTable-noTable', axiom, ![VTable0] : vsomeTable(VTable0) != vnoTable).
fof('isSomeTable0', axiom, (~visSomeTable(vnoTable))).
fof('isSomeTable1', axiom, ![Vt] : visSomeTable(vsomeTable(Vt))).
fof('getSomeTable0', axiom, ![Vt] : vgetSomeTable(vsomeTable(Vt)) = Vt).
fof('EQ-emptyStore', axiom, $true).
fof('EQ-bindStore', axiom, ![VTable1, VTStore1, VTName0, VTStore0, VTName1, VTable0] : ((VTName0 = VTName1 & (VTable0 = VTable1 & VTStore0 = VTStore1)) <=> vbindStore(VTName0, VTable0, VTStore0) = vbindStore(VTName1, VTable1, VTStore1))).
fof('DIFF-bindStore-emptyStore', axiom, ![VTName0, VTable0, VTStore0] : vbindStore(VTName0, VTable0, VTStore0) != vemptyStore).
fof('lookupStore0', axiom, ![Vn] : vlookupStore(Vn, vemptyStore) = vnoTable).
fof('lookupStore1', axiom, ![Vn, Vm, Vt, VTS] : (Vn = Vm => vlookupStore(Vn, vbindStore(Vm, Vt, VTS)) = vsomeTable(Vt))).
fof('lookupStore2', axiom, ![Vn, Vm, Vt, VTS] : (Vn != Vm => vlookupStore(Vn, vbindStore(Vm, Vt, VTS)) = vlookupStore(Vn, VTS))).
fof('EQ-VEquals', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVEquals(VAName0, VFVal0) = vVEquals(VAName1, VFVal1))).
fof('EQ-VGreater', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVGreater(VAName0, VFVal0) = vVGreater(VAName1, VFVal1))).
fof('DIFF-VGreater-VEquals', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : vVGreater(VAName0, VFVal0) != vVEquals(VAName1, VFVal1)).
fof('EQ-VSmaller', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVSmaller(VAName0, VFVal0) = vVSmaller(VAName1, VFVal1))).
fof('DIFF-VSmaller-VGreater', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : vVSmaller(VAName0, VFVal0) != vVGreater(VAName1, VFVal1)).
fof('DIFF-VSmaller-VEquals', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : vVSmaller(VAName0, VFVal0) != vVEquals(VAName1, VFVal1)).
fof('EQ-Ref', axiom, ![VTName0, VTName1] : (VTName0 = VTName1 <=> vRef(VTName0) = vRef(VTName1))).
fof('EQ-Tvalue', axiom, ![VTable0, VTable1] : (VTable0 = VTable1 <=> vTvalue(VTable0) = vTvalue(VTable1))).
fof('EQ-SelectAllFrom', axiom, ![VTRef0, VTRef1] : (VTRef0 = VTRef1 <=> vSelectAllFrom(VTRef0) = vSelectAllFrom(VTRef1))).
fof('DIFF-SelectAllFrom-Tvalue', axiom, ![VTRef0, VTable0] : vSelectAllFrom(VTRef0) != vTvalue(VTable0)).
fof('EQ-SelectSomeFrom', axiom, ![VAList0, VAList1, VTRef0, VTRef1] : ((VAList0 = VAList1 & VTRef0 = VTRef1) <=> vSelectSomeFrom(VAList0, VTRef0) = vSelectSomeFrom(VAList1, VTRef1))).
fof('DIFF-SelectSomeFrom-SelectAllFrom', axiom, ![VAList0, VTRef0, VTRef1] : vSelectSomeFrom(VAList0, VTRef0) != vSelectAllFrom(VTRef1)).
fof('DIFF-SelectSomeFrom-Tvalue', axiom, ![VAList0, VTRef0, VTable0] : vSelectSomeFrom(VAList0, VTRef0) != vTvalue(VTable0)).
fof('EQ-SelectAllFromWhere', axiom, ![VTRef0, VTRef1, VPred0, VPred1] : ((VTRef0 = VTRef1 & VPred0 = VPred1) <=> vSelectAllFromWhere(VTRef0, VPred0) = vSelectAllFromWhere(VTRef1, VPred1))).
fof('DIFF-SelectAllFromWhere-SelectSomeFrom', axiom, ![VTRef0, VPred0, VAList0, VTRef1] : vSelectAllFromWhere(VTRef0, VPred0) != vSelectSomeFrom(VAList0, VTRef1)).
fof('DIFF-SelectAllFromWhere-SelectAllFrom', axiom, ![VTRef0, VPred0, VTRef1] : vSelectAllFromWhere(VTRef0, VPred0) != vSelectAllFrom(VTRef1)).
fof('DIFF-SelectAllFromWhere-Tvalue', axiom, ![VTRef0, VPred0, VTable0] : vSelectAllFromWhere(VTRef0, VPred0) != vTvalue(VTable0)).
fof('EQ-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VPred1, VAList1, VTRef1, VTRef0] : ((VAList0 = VAList1 & (VTRef0 = VTRef1 & VPred0 = VPred1)) <=> vSelectSomeFromWhere(VAList0, VTRef0, VPred0) = vSelectSomeFromWhere(VAList1, VTRef1, VPred1))).
fof('DIFF-SelectSomeFromWhere-SelectAllFromWhere', axiom, ![VAList0, VPred0, VPred1, VTRef1, VTRef0] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vSelectAllFromWhere(VTRef1, VPred1)).
fof('DIFF-SelectSomeFromWhere-SelectSomeFrom', axiom, ![VAList0, VPred0, VAList1, VTRef1, VTRef0] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vSelectSomeFrom(VAList1, VTRef1)).
fof('DIFF-SelectSomeFromWhere-SelectAllFrom', axiom, ![VAList0, VTRef0, VPred0, VTRef1] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vSelectAllFrom(VTRef1)).
fof('DIFF-SelectSomeFromWhere-Tvalue', axiom, ![VAList0, VTRef0, VPred0, VTable0] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vTvalue(VTable0)).
fof('EQ-Union', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vUnion(VQuery0, VQuery1) = vUnion(VQuery2, VQuery3))).
fof('DIFF-Union-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : vUnion(VQuery0, VQuery1) != vSelectSomeFromWhere(VAList0, VTRef0, VPred0)).
fof('DIFF-Union-SelectAllFromWhere', axiom, ![VQuery0, VQuery1, VTRef0, VPred0] : vUnion(VQuery0, VQuery1) != vSelectAllFromWhere(VTRef0, VPred0)).
fof('DIFF-Union-SelectSomeFrom', axiom, ![VQuery0, VQuery1, VAList0, VTRef0] : vUnion(VQuery0, VQuery1) != vSelectSomeFrom(VAList0, VTRef0)).
fof('DIFF-Union-SelectAllFrom', axiom, ![VQuery0, VQuery1, VTRef0] : vUnion(VQuery0, VQuery1) != vSelectAllFrom(VTRef0)).
fof('DIFF-Union-Tvalue', axiom, ![VQuery0, VQuery1, VTable0] : vUnion(VQuery0, VQuery1) != vTvalue(VTable0)).
fof('EQ-Intersection', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vIntersection(VQuery0, VQuery1) = vIntersection(VQuery2, VQuery3))).
fof('DIFF-Intersection-Union', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : vIntersection(VQuery0, VQuery1) != vUnion(VQuery2, VQuery3)).
fof('DIFF-Intersection-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : vIntersection(VQuery0, VQuery1) != vSelectSomeFromWhere(VAList0, VTRef0, VPred0)).
fof('DIFF-Intersection-SelectAllFromWhere', axiom, ![VQuery0, VQuery1, VTRef0, VPred0] : vIntersection(VQuery0, VQuery1) != vSelectAllFromWhere(VTRef0, VPred0)).
fof('DIFF-Intersection-SelectSomeFrom', axiom, ![VQuery0, VQuery1, VAList0, VTRef0] : vIntersection(VQuery0, VQuery1) != vSelectSomeFrom(VAList0, VTRef0)).
fof('DIFF-Intersection-SelectAllFrom', axiom, ![VQuery0, VQuery1, VTRef0] : vIntersection(VQuery0, VQuery1) != vSelectAllFrom(VTRef0)).
fof('DIFF-Intersection-Tvalue', axiom, ![VQuery0, VQuery1, VTable0] : vIntersection(VQuery0, VQuery1) != vTvalue(VTable0)).
fof('EQ-Difference', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vDifference(VQuery0, VQuery1) = vDifference(VQuery2, VQuery3))).
fof('DIFF-Difference-Intersection', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : vDifference(VQuery0, VQuery1) != vIntersection(VQuery2, VQuery3)).
fof('DIFF-Difference-Union', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : vDifference(VQuery0, VQuery1) != vUnion(VQuery2, VQuery3)).
fof('DIFF-Difference-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : vDifference(VQuery0, VQuery1) != vSelectSomeFromWhere(VAList0, VTRef0, VPred0)).
fof('DIFF-Difference-SelectAllFromWhere', axiom, ![VQuery0, VQuery1, VTRef0, VPred0] : vDifference(VQuery0, VQuery1) != vSelectAllFromWhere(VTRef0, VPred0)).
fof('DIFF-Difference-SelectSomeFrom', axiom, ![VQuery0, VQuery1, VAList0, VTRef0] : vDifference(VQuery0, VQuery1) != vSelectSomeFrom(VAList0, VTRef0)).
fof('DIFF-Difference-SelectAllFrom', axiom, ![VQuery0, VQuery1, VTRef0] : vDifference(VQuery0, VQuery1) != vSelectAllFrom(VTRef0)).
fof('DIFF-Difference-Tvalue', axiom, ![VQuery0, VQuery1, VTable0] : vDifference(VQuery0, VQuery1) != vTvalue(VTable0)).
fof('isValue0', axiom, ![Vt] : visValue(vTvalue(Vt))).
fof('isValue1', axiom, ![Vn] : (~visValue(vSelectAllFrom(Vn)))).
fof('isValue2', axiom, ![Val, Vtr] : (~visValue(vSelectSomeFrom(Val, Vtr)))).
fof('isValue3', axiom, ![Vtr, Vp] : (~visValue(vSelectAllFromWhere(Vtr, Vp)))).
fof('isValue4', axiom, ![Val, Vtr, Vp] : (~visValue(vSelectSomeFromWhere(Val, Vtr, Vp)))).
fof('isValue5', axiom, ![Vq1, Vq2] : (~visValue(vUnion(Vq1, Vq2)))).
fof('isValue6', axiom, ![Vsql1, Vsql2] : (~visValue(vIntersection(Vsql1, Vsql2)))).
fof('isValue7', axiom, ![Vsql1, Vsql2] : (~visValue(vDifference(Vsql1, Vsql2)))).
fof('EQ-noTType', axiom, $true).
fof('EQ-someTType', axiom, ![VTType0, VTType1] : (VTType0 = VTType1 <=> vsomeTType(VTType0) = vsomeTType(VTType1))).
fof('DIFF-someTType-noTType', axiom, ![VTType0] : vsomeTType(VTType0) != vnoTType).
fof('isSomeTType0', axiom, (~visSomeTType(vnoTType))).
fof('isSomeTType1', axiom, ![Vt] : visSomeTType(vsomeTType(Vt))).
fof('getSomeTType0', axiom, ![Vt] : vgetSomeTType(vsomeTType(Vt)) = Vt).
fof('EQ-emptyContext', axiom, $true).
fof('EQ-bindContext', axiom, ![VTTContext0, VTTContext1, VTName0, VTType0, VTType1, VTName1] : ((VTName0 = VTName1 & (VTType0 = VTType1 & VTTContext0 = VTTContext1)) <=> vbindContext(VTName0, VTType0, VTTContext0) = vbindContext(VTName1, VTType1, VTTContext1))).
fof('DIFF-bindContext-emptyContext', axiom, ![VTName0, VTType0, VTTContext0] : vbindContext(VTName0, VTType0, VTTContext0) != vemptyContext).
fof('lookupContext0', axiom, ![Vtn] : vlookupContext(Vtn, vemptyContext) = vnoTType).
fof('lookupContext1', axiom, ![Vtn, Vtm, Vtt, VTTC] : (Vtn = Vtm => vlookupContext(Vtn, vbindContext(Vtm, Vtt, VTTC)) = vsomeTType(Vtt))).
fof('lookupContext2', axiom, ![Vtn, Vtm, Vtt, VTTC] : (Vtn != Vtm => vlookupContext(Vtn, vbindContext(Vtm, Vtt, VTTC)) = vlookupContext(Vtn, VTTC))).
fof('EQ-noFType', axiom, $true).
fof('EQ-someFType', axiom, ![VFType0, VFType1] : (VFType0 = VFType1 <=> vsomeFType(VFType0) = vsomeFType(VFType1))).
fof('DIFF-someFType-noFType', axiom, ![VFType0] : vsomeFType(VFType0) != vnoFType).
fof('isSomeFType0', axiom, (~visSomeFType(vnoFType))).
fof('isSomeFType1', axiom, ![Va] : visSomeFType(vsomeFType(Va))).
fof('getSomeFType0', axiom, ![Va] : vgetSomeFType(vsomeFType(Va)) = Va).
fof('findColType0', axiom, ![Van] : vfindColType(Van, vttempty) = vnoFType).
fof('findColType1', axiom, ![Van, Va, Vft, Vttr] : (Van = Va => vfindColType(Van, vttcons(vctype(Va, Vft), Vttr)) = vsomeFType(Vft))).
fof('findColType2', axiom, ![Van, Va, Vft, Vttr] : (Van != Va => vfindColType(Van, vttcons(vctype(Va, Vft), Vttr)) = vfindColType(Van, Vttr))).
fof('projectType0', axiom, ![Vtt] : vprojectType(vaempty, Vtt) = vsomeTType(vttempty)).
fof('projectType1', axiom, ![Va, Vft, Vtt, Valr, Vtprest] : ((Vft = vfindColType(Va, Vtt) & Vtprest = vprojectType(Valr, Vtt) & (visSomeFType(Vft) & visSomeTType(Vtprest))) => vprojectType(vacons(Va, Valr), Vtt) = vsomeTType(vttcons(vctype(Va, vgetSomeFType(Vft)), vgetSomeTType(Vtprest))))).
fof('projectType2', axiom, ![Va, Vft, Vtt, Valr, Vtprest] : ((Vft = vfindColType(Va, Vtt) & Vtprest = vprojectType(Valr, Vtt) & (~(visSomeFType(Vft) & visSomeTType(Vtprest)))) => vprojectType(vacons(Va, Valr), Vtt) = vnoTType)).
fof('ctypeIn0', axiom, ![Va, Vft] : (~vctypeIn(Va, Vft, vttempty))).
fof('ctypeIn1', axiom, ![Va, Vft2, Vttr, Vft, Va2] : (vctypeIn(Va, Vft, vttcons(vctype(Va2, Vft2), Vttr)) <=> ((Va = Va2 & Vft = Vft2) | vctypeIn(Va, Vft, Vttr)))).
fof('checkPValidity0', axiom, ![Va, Vfv, Vtt] : (vcheckPValidity(vVEquals(Va, Vfv), Vtt) <=> vctypeIn(Va, vfieldType(Vfv), Vtt))).
fof('checkPValidity1', axiom, ![Va, Vfv, Vtt] : (vcheckPValidity(vVGreater(Va, Vfv), Vtt) <=> vctypeIn(Va, vfieldType(Vfv), Vtt))).
fof('checkPValidity2', axiom, ![Va, Vfv, Vtt] : (vcheckPValidity(vVSmaller(Va, Vfv), Vtt) <=> vctypeIn(Va, vfieldType(Vfv), Vtt))).
fof('T-TTContext-Duplicate', axiom, ![Vx, VTx, Vy, Ve, VC, VTy, VT] : ((Vx = Vy & vtcheck(vbindContext(Vx, VTx, vbindContext(Vy, VTy, VC)), Ve, VT)) => vtcheck(vbindContext(Vx, VTx, VC), Ve, VT))).
fof('T-TTContext-Swap', axiom, ![Vx, VTx, Vy, Ve, VC, VTy, VT] : ((Vx != Vy & vtcheck(vbindContext(Vx, VTx, vbindContext(Vy, VTy, VC)), Ve, VT)) => vtcheck(vbindContext(Vy, VTy, vbindContext(Vx, VTx, VC)), Ve, VT))).
fof('T-Tvalue', axiom, ![VTT, Val, Vrt, VTTC] : (vwelltypedtable(VTT, vtable(Val, Vrt)) => vtcheck(VTTC, vTvalue(vtable(Val, Vrt)), VTT))).
fof('T-SelectAllFrom', axiom, ![Vtn, VTTC, VTT] : (vlookupContext(Vtn, VTTC) = vsomeTType(VTT) => vtcheck(VTTC, vSelectAllFrom(vRef(Vtn)), VTT))).
fof('T-SelectSomeFrom', axiom, ![VTT, Vtn, Val, VTT1, VTTC] : ((vlookupContext(Vtn, VTTC) = vsomeTType(VTT1) & vprojectType(Val, VTT1) = vsomeTType(VTT)) => vtcheck(VTTC, vSelectSomeFrom(Val, vRef(Vtn)), VTT))).
fof('T-SelectAllFromWhere', axiom, ![Vtn, VTTC, VTT, Vp] : ((vlookupContext(Vtn, VTTC) = vsomeTType(VTT) & vcheckPValidity(Vp, VTT)) => vtcheck(VTTC, vSelectAllFromWhere(vRef(Vtn), Vp), VTT))).
fof('T-SelectSomeFromWhere', axiom, ![Vp, VTT, Vtn, Val, VTT1, VTTC] : ((vlookupContext(Vtn, VTTC) = vsomeTType(VTT1) & vcheckPValidity(Vp, VTT1) & vprojectType(Val, VTT1) = vsomeTType(VTT)) => vtcheck(VTTC, vSelectSomeFromWhere(Val, vRef(Vtn), Vp), VTT))).
fof('T-Union', axiom, ![VTTC, Vq1, VTT, Vq2] : ((vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, vUnion(Vq1, Vq2), VTT))).
fof('T-Intersection', axiom, ![VTTC, Vq1, VTT, Vq2] : ((vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, vIntersection(Vq1, Vq2), VTT))).
fof('T-Difference', axiom, ![VTTC, Vq1, VTT, Vq2] : ((vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, vDifference(Vq1, Vq2), VTT))).
fof('EQ-z1', axiom, $true).
fof('EQ-TN', axiom, $true).
fof('EQ-T1', axiom, $true).
fof('EQ-T2', axiom, $true).
fof('DIFF-T2-T1', axiom, vT2 != vT1).
fof('EQ-T3', axiom, $true).
fof('DIFF-T3-T2', axiom, vT3 != vT2).
fof('DIFF-T3-T1', axiom, vT3 != vT1).
fof('EQ-A1', axiom, $true).
fof('EQ-A2', axiom, $true).
fof('DIFF-A2-A1', axiom, vA2 != vA1).
fof('EQ-A3', axiom, $true).
fof('DIFF-A3-A2', axiom, vA3 != vA2).
fof('DIFF-A3-A1', axiom, vA3 != vA1).
fof('false-goal', conjecture, ($true => $false)).
