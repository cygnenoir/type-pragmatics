fof('EQ-conf', axiom, ![VQuery0, VQuery1, VTStore0, VTStore1] : ((VQuery0 = VQuery1 & VTStore0 = VTStore1) <=> vconf(VQuery0, VTStore0) = vconf(VQuery1, VTStore1))).
fof('EQ-noConf', axiom, $true).
fof('EQ-someConf', axiom, ![VConf0, VConf1] : (VConf0 = VConf1 <=> vsomeConf(VConf0) = vsomeConf(VConf1))).
fof('EQ-error', axiom, $true).
fof('EQ-isTrue', axiom, $true).
fof('EQ-isFalse', axiom, $true).
fof('EQ-ctype', axiom, ![VAName0, VAName1, VFType0, VFType1] : ((VAName0 = VAName1 & VFType0 = VFType1) <=> vctype(VAName0, VFType0) = vctype(VAName1, VFType1))).
fof('EQ-aempty', axiom, $true).
fof('EQ-acons', axiom, ![VAName0, VAName1, VAList0, VAList1] : ((VAName0 = VAName1 & VAList0 = VAList1) <=> vacons(VAName0, VAList0) = vacons(VAName1, VAList1))).
fof('EQ-ttempty', axiom, $true).
fof('EQ-ttcons', axiom, ![VCType0, VCType1, VTType0, VTType1] : ((VCType0 = VCType1 & VTType0 = VTType1) <=> vttcons(VCType0, VTType0) = vttcons(VCType1, VTType1))).
fof('EQ-rtempty', axiom, $true).
fof('EQ-rtcons', axiom, ![VFType0, VFType1, VRawType0, VRawType1] : ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> vrtcons(VFType0, VRawType0) = vrtcons(VFType1, VRawType1))).
fof('EQ-rempty', axiom, $true).
fof('EQ-rcons', axiom, ![VFVal0, VFVal1, VRow0, VRow1] : ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> vrcons(VFVal0, VRow0) = vrcons(VFVal1, VRow1))).
fof('EQ-tempty', axiom, $true).
fof('EQ-tcons', axiom, ![VRow0, VRow1, VRawTable0, VRawTable1] : ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> vtcons(VRow0, VRawTable0) = vtcons(VRow1, VRawTable1))).
fof('EQ-table', axiom, ![VAList0, VAList1, VRawTable0, VRawTable1] : ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> vtable(VAList0, VRawTable0) = vtable(VAList1, VRawTable1))).
fof('EQ-noRawTable', axiom, $true).
fof('EQ-someRawTable', axiom, ![VRawTable0, VRawTable1] : (VRawTable0 = VRawTable1 <=> vsomeRawTable(VRawTable0) = vsomeRawTable(VRawTable1))).
fof('EQ-VEquals', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVEquals(VAName0, VFVal0) = vVEquals(VAName1, VFVal1))).
fof('EQ-VGreater', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVGreater(VAName0, VFVal0) = vVGreater(VAName1, VFVal1))).
fof('EQ-VSmaller', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVSmaller(VAName0, VFVal0) = vVSmaller(VAName1, VFVal1))).
fof('EQ-Ref', axiom, ![VTName0, VTName1] : (VTName0 = VTName1 <=> vRef(VTName0) = vRef(VTName1))).
fof('EQ-Tvalue', axiom, ![VTable0, VTable1] : (VTable0 = VTable1 <=> vTvalue(VTable0) = vTvalue(VTable1))).
fof('EQ-SelectAllFrom', axiom, ![VTRef0, VTRef1] : (VTRef0 = VTRef1 <=> vSelectAllFrom(VTRef0) = vSelectAllFrom(VTRef1))).
fof('EQ-SelectSomeFrom', axiom, ![VAList0, VAList1, VTRef0, VTRef1] : ((VAList0 = VAList1 & VTRef0 = VTRef1) <=> vSelectSomeFrom(VAList0, VTRef0) = vSelectSomeFrom(VAList1, VTRef1))).
fof('EQ-SelectAllFromWhere', axiom, ![VTRef0, VTRef1, VPred0, VPred1] : ((VTRef0 = VTRef1 & VPred0 = VPred1) <=> vSelectAllFromWhere(VTRef0, VPred0) = vSelectAllFromWhere(VTRef1, VPred1))).
fof('EQ-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VPred1, VAList1, VTRef1, VTRef0] : ((VAList0 = VAList1 & (VTRef0 = VTRef1 & VPred0 = VPred1)) <=> vSelectSomeFromWhere(VAList0, VTRef0, VPred0) = vSelectSomeFromWhere(VAList1, VTRef1, VPred1))).
fof('EQ-Union', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vUnion(VQuery0, VQuery1) = vUnion(VQuery2, VQuery3))).
fof('EQ-Intersection', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vIntersection(VQuery0, VQuery1) = vIntersection(VQuery2, VQuery3))).
fof('EQ-Difference', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vDifference(VQuery0, VQuery1) = vDifference(VQuery2, VQuery3))).
fof('EQ-noTable', axiom, $true).
fof('EQ-someTable', axiom, ![VTable0, VTable1] : (VTable0 = VTable1 <=> vsomeTable(VTable0) = vsomeTable(VTable1))).
fof('EQ-emptyStore', axiom, $true).
fof('EQ-bindStore', axiom, ![VTable1, VTStore1, VTName0, VTStore0, VTName1, VTable0] : ((VTName0 = VTName1 & (VTable0 = VTable1 & VTStore0 = VTStore1)) <=> vbindStore(VTName0, VTable0, VTStore0) = vbindStore(VTName1, VTable1, VTStore1))).
fof('DIFF-noConf-someConf', axiom, ![VConf0] : vnoConf != vsomeConf(VConf0)).
fof('DIFF-error-isTrue', axiom, verror != visTrue).
fof('DIFF-error-isFalse', axiom, verror != visFalse).
fof('DIFF-isTrue-isFalse', axiom, visTrue != visFalse).
fof('DIFF-aempty-acons', axiom, ![VAName0, VAList0] : vaempty != vacons(VAName0, VAList0)).
fof('DIFF-ttempty-ttcons', axiom, ![VCType0, VTType0] : vttempty != vttcons(VCType0, VTType0)).
fof('DIFF-rtempty-rtcons', axiom, ![VFType0, VRawType0] : vrtempty != vrtcons(VFType0, VRawType0)).
fof('DIFF-rempty-rcons', axiom, ![VFVal0, VRow0] : vrempty != vrcons(VFVal0, VRow0)).
fof('DIFF-tempty-tcons', axiom, ![VRow0, VRawTable0] : vtempty != vtcons(VRow0, VRawTable0)).
fof('DIFF-noRawTable-someRawTable', axiom, ![VRawTable0] : vnoRawTable != vsomeRawTable(VRawTable0)).
fof('DIFF-VEquals-VGreater', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : vVEquals(VAName0, VFVal0) != vVGreater(VAName1, VFVal1)).
fof('DIFF-VEquals-VSmaller', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : vVEquals(VAName0, VFVal0) != vVSmaller(VAName1, VFVal1)).
fof('DIFF-VGreater-VSmaller', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : vVGreater(VAName0, VFVal0) != vVSmaller(VAName1, VFVal1)).
fof('DIFF-Tvalue-SelectAllFrom', axiom, ![VTable0, VTRef0] : vTvalue(VTable0) != vSelectAllFrom(VTRef0)).
fof('DIFF-Tvalue-SelectSomeFrom', axiom, ![VTable0, VAList0, VTRef0] : vTvalue(VTable0) != vSelectSomeFrom(VAList0, VTRef0)).
fof('DIFF-Tvalue-SelectAllFromWhere', axiom, ![VTable0, VTRef0, VPred0] : vTvalue(VTable0) != vSelectAllFromWhere(VTRef0, VPred0)).
fof('DIFF-Tvalue-SelectSomeFromWhere', axiom, ![VTable0, VAList0, VTRef0, VPred0] : vTvalue(VTable0) != vSelectSomeFromWhere(VAList0, VTRef0, VPred0)).
fof('DIFF-Tvalue-Union', axiom, ![VTable0, VQuery0, VQuery1] : vTvalue(VTable0) != vUnion(VQuery0, VQuery1)).
fof('DIFF-Tvalue-Intersection', axiom, ![VTable0, VQuery0, VQuery1] : vTvalue(VTable0) != vIntersection(VQuery0, VQuery1)).
fof('DIFF-Tvalue-Difference', axiom, ![VTable0, VQuery0, VQuery1] : vTvalue(VTable0) != vDifference(VQuery0, VQuery1)).
fof('DIFF-SelectAllFrom-SelectSomeFrom', axiom, ![VTRef0, VAList0, VTRef1] : vSelectAllFrom(VTRef0) != vSelectSomeFrom(VAList0, VTRef1)).
fof('DIFF-SelectAllFrom-SelectAllFromWhere', axiom, ![VTRef0, VTRef1, VPred0] : vSelectAllFrom(VTRef0) != vSelectAllFromWhere(VTRef1, VPred0)).
fof('DIFF-SelectAllFrom-SelectSomeFromWhere', axiom, ![VTRef0, VAList0, VTRef1, VPred0] : vSelectAllFrom(VTRef0) != vSelectSomeFromWhere(VAList0, VTRef1, VPred0)).
fof('DIFF-SelectAllFrom-Union', axiom, ![VTRef0, VQuery0, VQuery1] : vSelectAllFrom(VTRef0) != vUnion(VQuery0, VQuery1)).
fof('DIFF-SelectAllFrom-Intersection', axiom, ![VTRef0, VQuery0, VQuery1] : vSelectAllFrom(VTRef0) != vIntersection(VQuery0, VQuery1)).
fof('DIFF-SelectAllFrom-Difference', axiom, ![VTRef0, VQuery0, VQuery1] : vSelectAllFrom(VTRef0) != vDifference(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFrom-SelectAllFromWhere', axiom, ![VAList0, VTRef0, VTRef1, VPred0] : vSelectSomeFrom(VAList0, VTRef0) != vSelectAllFromWhere(VTRef1, VPred0)).
fof('DIFF-SelectSomeFrom-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VAList1, VTRef1, VTRef0] : vSelectSomeFrom(VAList0, VTRef0) != vSelectSomeFromWhere(VAList1, VTRef1, VPred0)).
fof('DIFF-SelectSomeFrom-Union', axiom, ![VAList0, VTRef0, VQuery0, VQuery1] : vSelectSomeFrom(VAList0, VTRef0) != vUnion(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFrom-Intersection', axiom, ![VAList0, VTRef0, VQuery0, VQuery1] : vSelectSomeFrom(VAList0, VTRef0) != vIntersection(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFrom-Difference', axiom, ![VAList0, VTRef0, VQuery0, VQuery1] : vSelectSomeFrom(VAList0, VTRef0) != vDifference(VQuery0, VQuery1)).
fof('DIFF-SelectAllFromWhere-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VPred1, VTRef1, VTRef0] : vSelectAllFromWhere(VTRef0, VPred0) != vSelectSomeFromWhere(VAList0, VTRef1, VPred1)).
fof('DIFF-SelectAllFromWhere-Union', axiom, ![VTRef0, VPred0, VQuery0, VQuery1] : vSelectAllFromWhere(VTRef0, VPred0) != vUnion(VQuery0, VQuery1)).
fof('DIFF-SelectAllFromWhere-Intersection', axiom, ![VTRef0, VPred0, VQuery0, VQuery1] : vSelectAllFromWhere(VTRef0, VPred0) != vIntersection(VQuery0, VQuery1)).
fof('DIFF-SelectAllFromWhere-Difference', axiom, ![VTRef0, VPred0, VQuery0, VQuery1] : vSelectAllFromWhere(VTRef0, VPred0) != vDifference(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFromWhere-Union', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vUnion(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFromWhere-Intersection', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vIntersection(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFromWhere-Difference', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vDifference(VQuery0, VQuery1)).
fof('DIFF-Union-Intersection', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : vUnion(VQuery0, VQuery1) != vIntersection(VQuery2, VQuery3)).
fof('DIFF-Union-Difference', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : vUnion(VQuery0, VQuery1) != vDifference(VQuery2, VQuery3)).
fof('DIFF-Intersection-Difference', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : vIntersection(VQuery0, VQuery1) != vDifference(VQuery2, VQuery3)).
fof('DIFF-noTable-someTable', axiom, ![VTable0] : vnoTable != vsomeTable(VTable0)).
fof('DIFF-emptyStore-bindStore', axiom, ![VTName0, VTable0, VTStore0] : vemptyStore != vbindStore(VTName0, VTable0, VTStore0)).
fof('getQuery2', axiom, ![Vq, Vts] : vgetQuery(vconf(Vq, Vts)) = Vq).
fof('getQuery-INV', axiom, ![VConf0, VRESULT] : (vgetQuery(VConf0) = VRESULT => ?[Vq, Vts] : (VConf0 = vconf(Vq, Vts) & VRESULT = Vq))).
fof('isSomeConf4', axiom, (~visSomeConf(vnoConf))).
fof('isSomeConf5', axiom, ![Vt] : visSomeConf(vsomeConf(Vt))).
fof('isSomeConf-true-INV', axiom, ![VOptConf0] : (visSomeConf(VOptConf0) => ?[Vt] : VOptConf0 = vsomeConf(Vt))).
fof('isSomeConf-false-INV', axiom, ![VOptConf0] : ((~visSomeConf(VOptConf0)) => VOptConf0 = vnoConf)).
fof('getSomeConf2', axiom, ![Vc] : vgetSomeConf(vsomeConf(Vc)) = Vc).
fof('getSomeConf-INV', axiom, ![VOptConf0, VRESULT] : (vgetSomeConf(VOptConf0) = VRESULT => ?[Vc] : (VOptConf0 = vsomeConf(Vc) & VRESULT = Vc))).
fof('findCol6', axiom, ![Va, Vaempty, Vrt, VnoRawTable] : vfindCol(Va, vtable(Vaempty, Vrt)) = VnoRawTable).
fof('findCol7', axiom, ![Va, Va2, Val, Vrt] : (Va = Va2 => vfindCol(Va, vtable(vacons(Va2, Val), Vrt)) = vsomeRawTable(vprojectFirstRaw(Vrt)))).
fof('findCol8', axiom, ![Va, Va2, Val, Vrt] : (Va != Va2 => vfindCol(Va, vtable(vacons(Va2, Val), Vrt)) = vfindCol(Va, vtable(Val, vdropFirstColRaw(Vrt))))).
fof('findCol-INV', axiom, ![VAName0, VTable0, VRESULT] : (vfindCol(VAName0, VTable0) = VRESULT => (?[Va, Vaempty, Vrt, VnoRawTable] : (VAName0 = Va & VTable0 = vtable(Vaempty, Vrt) & VRESULT = VnoRawTable) | ?[Va, Va2, Val, Vrt] : (Va = Va2 & VAName0 = Va & VTable0 = vtable(vacons(Va2, Val), Vrt) & VRESULT = vsomeRawTable(vprojectFirstRaw(Vrt))) | ?[Va, Va2, Val, Vrt] : (Va != Va2 & VAName0 = Va & VTable0 = vtable(vacons(Va2, Val), Vrt) & VRESULT = vfindCol(Va, vtable(Val, vdropFirstColRaw(Vrt))))))).
fof('projectEmptyCol4', axiom, ![Vtempty] : vprojectEmptyCol(Vtempty) = Vtempty).
fof('projectEmptyCol5', axiom, ![Vr, Vt, Vrempty] : vprojectEmptyCol(vtcons(Vr, Vt)) = vtcons(Vrempty, vprojectEmptyCol(Vt))).
fof('projectEmptyCol-INV', axiom, ![VRawTable0, VRESULT] : (vprojectEmptyCol(VRawTable0) = VRESULT => (?[Vtempty] : (VRawTable0 = Vtempty & VRESULT = Vtempty) | ?[Vr, Vt, Vrempty] : (VRawTable0 = vtcons(Vr, Vt) & VRESULT = vtcons(Vrempty, vprojectEmptyCol(Vt)))))).
fof('project6', axiom, ![Vaempty, Val, Vrt] : vproject(Vaempty, vtable(Val, Vrt)) = vsomeRawTable(vprojectEmptyCol(Vrt))).
fof('project7', axiom, ![Vt, Va, Vrest, Vcol, Valr] : ((Vcol = vfindCol(Va, Vt) & Vrest = vproject(Valr, Vt) & (visSomeRawTable(Vcol) & visSomeRawTable(Vrest)) & ![Val0, Vrt0] : Vt != vtable(Val0, Vrt0)) => vproject(vacons(Va, Valr), Vt) = vattachColToFrontRaw(vgetSomeRawTable(Vcol), vgetSomeRawTable(Vrest)))).
fof('project8', axiom, ![Vt, VnoRawTable, Va, Vrest, Vcol, Valr] : ((Vcol = vfindCol(Va, Vt) & Vrest = vproject(Valr, Vt) & (~(visSomeRawTable(Vcol) & visSomeRawTable(Vrest))) & ![Val0, Vrt0] : Vt != vtable(Val0, Vrt0)) => vproject(vacons(Va, Valr), Vt) = VnoRawTable)).
fof('project-INV', axiom, ![VAList0, VTable0, VRESULT] : (vproject(VAList0, VTable0) = VRESULT => (?[Vaempty, Val, Vrt] : (VAList0 = Vaempty & VTable0 = vtable(Val, Vrt) & VRESULT = vsomeRawTable(vprojectEmptyCol(Vrt))) | ?[Vt, Va, Vrest, Vcol, Valr] : (Vcol = vfindCol(Va, Vt) & Vrest = vproject(Valr, Vt) & (visSomeRawTable(Vcol) & visSomeRawTable(Vrest)) & ![Val0, Vrt0] : Vt != vtable(Val0, Vrt0) & VAList0 = vacons(Va, Valr) & VTable0 = Vt & VRESULT = vattachColToFrontRaw(vgetSomeRawTable(Vcol), vgetSomeRawTable(Vrest))) | ?[Vt, VnoRawTable, Va, Vrest, Vcol, Valr] : (Vcol = vfindCol(Va, Vt) & Vrest = vproject(Valr, Vt) & (~(visSomeRawTable(Vcol) & visSomeRawTable(Vrest))) & ![Val0, Vrt0] : Vt != vtable(Val0, Vrt0) & VAList0 = vacons(Va, Valr) & VTable0 = Vt & VRESULT = VnoRawTable)))).
fof('singleRowSelect36', axiom, ![Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : ((Va1 = Va2 & Vf = Vfv) => vsingleRowSelect(vacons(Va1, Vaempty), vVEquals(Va2, Vfv), vrcons(Vf, Vrempty)) = visTrue)).
fof('singleRowSelect37', axiom, ![Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : ((Va1 = Va2 & Vf != Vfv) => vsingleRowSelect(vacons(Va1, Vaempty), vVEquals(Va2, Vfv), vrcons(Vf, Vrempty)) = visFalse)).
fof('singleRowSelect38', axiom, ![Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, Vaempty), vVEquals(Va2, Vfv), vrcons(Vf, Vrempty)) = verror)).
fof('singleRowSelect39', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & Vf = Vfv) => vsingleRowSelect(vacons(Va1, Var), vVEquals(Va2, Vfv), vrcons(Vf, Vr)) = visTrue)).
fof('singleRowSelect40', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & Vf != Vfv) => vsingleRowSelect(vacons(Va1, Var), vVEquals(Va2, Vfv), vrcons(Vf, Vr)) = visFalse)).
fof('singleRowSelect41', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, Var), vVEquals(Va2, Vfv), vrcons(Vf, Vr)) = vsingleRowSelect(Var, vVEquals(Va2, Vfv), Vr))).
fof('singleRowSelect42', axiom, ![Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : ((Va1 = Va2 & vge(Vf, Vfv)) => vsingleRowSelect(vacons(Va1, Vaempty), vVGreater(Va2, Vfv), vrcons(Vf, Vrempty)) = visTrue)).
fof('singleRowSelect43', axiom, ![Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : ((Va1 = Va2 & (~vge(Vf, Vfv))) => vsingleRowSelect(vacons(Va1, Vaempty), vVGreater(Va2, Vfv), vrcons(Vf, Vrempty)) = visFalse)).
fof('singleRowSelect44', axiom, ![Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, Vaempty), vVGreater(Va2, Vfv), vrcons(Vf, Vrempty)) = verror)).
fof('singleRowSelect45', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & vge(Vf, Vfv)) => vsingleRowSelect(vacons(Va1, Var), vVGreater(Va2, Vfv), vrcons(Vf, Vr)) = visTrue)).
fof('singleRowSelect46', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & (~vge(Vf, Vfv))) => vsingleRowSelect(vacons(Va1, Var), vVGreater(Va2, Vfv), vrcons(Vf, Vr)) = visFalse)).
fof('singleRowSelect47', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, Var), vVGreater(Va2, Vfv), vrcons(Vf, Vr)) = vsingleRowSelect(Var, vVGreater(Va2, Vfv), Vr))).
fof('singleRowSelect48', axiom, ![Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : ((Va1 = Va2 & vle(Vf, Vfv)) => vsingleRowSelect(vacons(Va1, Vaempty), vVSmaller(Va2, Vfv), vrcons(Vf, Vrempty)) = visTrue)).
fof('singleRowSelect49', axiom, ![Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : ((Va1 = Va2 & (~vle(Vf, Vfv))) => vsingleRowSelect(vacons(Va1, Vaempty), vVSmaller(Va2, Vfv), vrcons(Vf, Vrempty)) = visFalse)).
fof('singleRowSelect50', axiom, ![Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, Vaempty), vVSmaller(Va2, Vfv), vrcons(Vf, Vrempty)) = verror)).
fof('singleRowSelect51', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & vle(Vf, Vfv)) => vsingleRowSelect(vacons(Va1, Var), vVSmaller(Va2, Vfv), vrcons(Vf, Vr)) = visTrue)).
fof('singleRowSelect52', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & (~vle(Vf, Vfv))) => vsingleRowSelect(vacons(Va1, Var), vVSmaller(Va2, Vfv), vrcons(Vf, Vr)) = visFalse)).
fof('singleRowSelect53', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, Var), vVSmaller(Va2, Vfv), vrcons(Vf, Vr)) = vsingleRowSelect(Var, vVSmaller(Va2, Vfv), Vr))).
fof('singleRowSelect-INV', axiom, ![VAList0, VPred0, VRow0, VRESULT] : (vsingleRowSelect(VAList0, VPred0, VRow0) = VRESULT => (?[Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 = Va2 & Vf = Vfv & VAList0 = vacons(Va1, Vaempty) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, Vrempty) & VRESULT = visTrue) | ?[Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 = Va2 & Vf != Vfv & VAList0 = vacons(Va1, Vaempty) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, Vrempty) & VRESULT = visFalse) | ?[Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 != Va2 & VAList0 = vacons(Va1, Vaempty) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, Vrempty) & VRESULT = verror) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & Vf = Vfv & VAList0 = vacons(Va1, Var) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visTrue) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & Vf != Vfv & VAList0 = vacons(Va1, Var) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visFalse) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 != Va2 & VAList0 = vacons(Va1, Var) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = vsingleRowSelect(Var, vVEquals(Va2, Vfv), Vr)) | ?[Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 = Va2 & vge(Vf, Vfv) & VAList0 = vacons(Va1, Vaempty) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vrempty) & VRESULT = visTrue) | ?[Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 = Va2 & (~vge(Vf, Vfv)) & VAList0 = vacons(Va1, Vaempty) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vrempty) & VRESULT = visFalse) | ?[Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 != Va2 & VAList0 = vacons(Va1, Vaempty) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vrempty) & VRESULT = verror) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & vge(Vf, Vfv) & VAList0 = vacons(Va1, Var) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visTrue) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & (~vge(Vf, Vfv)) & VAList0 = vacons(Va1, Var) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visFalse) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 != Va2 & VAList0 = vacons(Va1, Var) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = vsingleRowSelect(Var, vVGreater(Va2, Vfv), Vr)) | ?[Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 = Va2 & vle(Vf, Vfv) & VAList0 = vacons(Va1, Vaempty) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vrempty) & VRESULT = visTrue) | ?[Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 = Va2 & (~vle(Vf, Vfv)) & VAList0 = vacons(Va1, Vaempty) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vrempty) & VRESULT = visFalse) | ?[Va1, Va2, Vaempty, Vfv, Vf, Vrempty] : (Va1 != Va2 & VAList0 = vacons(Va1, Vaempty) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vrempty) & VRESULT = verror) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & vle(Vf, Vfv) & VAList0 = vacons(Va1, Var) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visTrue) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & (~vle(Vf, Vfv)) & VAList0 = vacons(Va1, Var) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visFalse) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 != Va2 & VAList0 = vacons(Va1, Var) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = vsingleRowSelect(Var, vVSmaller(Va2, Vfv), Vr))))).
fof('select8', axiom, ![Val, Vtempty, Vpred] : vselect(vtable(Val, Vtempty), Vpred) = vsomeTable(vtable(Val, Vtempty))).
fof('select9', axiom, ![Vrt, Vpred, Vr, Vrb, Vrts, Val] : ((Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb = visTrue) => vselect(vtable(Val, vtcons(Vr, Vrt)), Vpred) = vsomeTable(vtable(Val, vtcons(Vr, vgetRaw(Vrts)))))).
fof('select10', axiom, ![Vrt, Vpred, Vr, Vrb, Vrts, Val] : ((Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb != visTrue & Vrb = visFalse) => vselect(vtable(Val, vtcons(Vr, Vrt)), Vpred) = vsomeTable(Vrts))).
fof('select11', axiom, ![VnoTable, Vrt, Vpred, Vr, Vrb, Vrts, Val] : ((Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb != visTrue & Vrb != visFalse) => vselect(vtable(Val, vtcons(Vr, Vrt)), Vpred) = VnoTable)).
fof('select-INV', axiom, ![VTable0, VPred0, VRESULT] : (vselect(VTable0, VPred0) = VRESULT => (?[Val, Vtempty, Vpred] : (VTable0 = vtable(Val, Vtempty) & VPred0 = Vpred & VRESULT = vsomeTable(vtable(Val, Vtempty))) | ?[Vrt, Vpred, Vr, Vrb, Vrts, Val] : (Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb = visTrue & VTable0 = vtable(Val, vtcons(Vr, Vrt)) & VPred0 = Vpred & VRESULT = vsomeTable(vtable(Val, vtcons(Vr, vgetRaw(Vrts))))) | ?[Vrt, Vpred, Vr, Vrb, Vrts, Val] : (Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb != visTrue & Vrb = visFalse & VTable0 = vtable(Val, vtcons(Vr, Vrt)) & VPred0 = Vpred & VRESULT = vsomeTable(Vrts)) | ?[VnoTable, Vrt, Vpred, Vr, Vrb, Vrts, Val] : (Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb != visTrue & Vrb != visFalse & VTable0 = vtable(Val, vtcons(Vr, Vrt)) & VPred0 = Vpred & VRESULT = VnoTable)))).
fof('union4', axiom, ![Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 => vunion(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vsomeTable(vtable(Val1, vrawUnion(Vrt1, Vrt2))))).
fof('union5', axiom, ![VnoTable, Vrt1, Val1, Val2, Vrt2] : (Val1 != Val2 => vunion(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = VnoTable)).
fof('union-INV', axiom, ![VTable0, VTable1, VRESULT] : (vunion(VTable0, VTable1) = VRESULT => (?[Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vsomeTable(vtable(Val1, vrawUnion(Vrt1, Vrt2)))) | ?[VnoTable, Vrt1, Val1, Val2, Vrt2] : (Val1 != Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = VnoTable)))).
fof('intersect4', axiom, ![Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 => vintersect(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vsomeTable(vtable(Val1, vrawIntersection(Vrt1, Vrt2))))).
fof('intersect5', axiom, ![VnoTable, Vrt1, Val1, Val2, Vrt2] : (Val1 != Val2 => vintersect(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = VnoTable)).
fof('intersect-INV', axiom, ![VTable0, VTable1, VRESULT] : (vintersect(VTable0, VTable1) = VRESULT => (?[Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vsomeTable(vtable(Val1, vrawIntersection(Vrt1, Vrt2)))) | ?[VnoTable, Vrt1, Val1, Val2, Vrt2] : (Val1 != Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = VnoTable)))).
fof('difference4', axiom, ![Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 => vdifference(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vsomeTable(vtable(Val1, vrawDifference(Vrt1, Vrt2))))).
fof('difference5', axiom, ![VnoTable, Vrt1, Val1, Val2, Vrt2] : (Val1 != Val2 => vdifference(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = VnoTable)).
fof('difference-INV', axiom, ![VTable0, VTable1, VRESULT] : (vdifference(VTable0, VTable1) = VRESULT => (?[Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vsomeTable(vtable(Val1, vrawDifference(Vrt1, Vrt2)))) | ?[VnoTable, Vrt1, Val1, Val2, Vrt2] : (Val1 != Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = VnoTable)))).
fof('reduce62', axiom, ![Vt, Vts] : vreduce(vconf(vTvalue(Vt), Vts)) = vnoConf).
fof('reduce63', axiom, ![Vltn, Vtn, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn)) => vreduce(vconf(vSelectAllFrom(vRef(Vtn)), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(Vltn)), Vts)))).
fof('reduce64', axiom, ![Vltn, Vtn, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn))) => vreduce(vconf(vSelectAllFrom(vRef(Vtn)), Vts)) = vnoConf)).
fof('reduce65', axiom, ![Vltn, Vpt, Vtn, Val, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vpt = vproject(Val, vgetSomeTable(Vltn)) & visSomeRawTable(Vpt)) => vreduce(vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts)) = vsomeConf(vconf(vTvalue(vtable(Val, vgetSomeRawTable(Vpt))), Vts)))).
fof('reduce66', axiom, ![Vltn, Vpt, Vtn, Val, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vpt = vproject(Val, vgetSomeTable(Vltn)) & (~visSomeRawTable(Vpt))) => vreduce(vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts)) = vnoConf)).
fof('reduce67', axiom, ![Vltn, Vtn, Vts, Val] : ((Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn))) => vreduce(vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts)) = vnoConf)).
fof('reduce68', axiom, ![Vp, Vltn, Vtn, Vst, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst)) => vreduce(vconf(vSelectAllFromWhere(Vtn, Vp), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(Vst)), Vts)))).
fof('reduce69', axiom, ![Vp, Vltn, Vtn, Vst, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & (~visSomeTable(Vst))) => vreduce(vconf(vSelectAllFromWhere(Vtn, Vp), Vts)) = vnoConf)).
fof('reduce70', axiom, ![Vltn, Vtn, Vts, Vp] : ((Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn))) => vreduce(vconf(vSelectAllFromWhere(Vtn, Vp), Vts)) = vnoConf)).
fof('reduce71', axiom, ![Vp, Vltn, Vpt, Vtn, Vst, Vts, Vtt] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst) & Vpt = vproject(Vtt, vgetSomeTable(Vst)) & visSomeRawTable(Vpt)) => vreduce(vconf(vSelectSomeFromWhere(Vtt, Vtn, Vp), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeRawTable(Vpt)), Vts)))).
fof('reduce72', axiom, ![Vp, Vltn, Vpt, Vtn, Vst, Vts, Vtt] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst) & Vpt = vproject(Vtt, vgetSomeTable(Vst)) & (~visSomeRawTable(Vpt))) => vreduce(vconf(vSelectSomeFromWhere(Vtt, Vtn, Vp), Vts)) = vnoConf)).
fof('reduce73', axiom, ![Vp, Vltn, Vtn, Vst, Vts, Vtt] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & (~visSomeTable(Vst))) => vreduce(vconf(vSelectSomeFromWhere(Vtt, Vtn, Vp), Vts)) = vnoConf)).
fof('reduce74', axiom, ![Vp, Vltn, Vtn, Vts, Vtt] : ((Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn))) => vreduce(vconf(vSelectSomeFromWhere(Vtt, Vtn, Vp), Vts)) = vnoConf)).
fof('reduce75', axiom, ![Vtunion, Vt1, Vt2, Vts] : ((Vtunion = vunion(Vt1, Vt2) & visSomeTable(Vtunion)) => vreduce(vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(Vtunion)), Vts)))).
fof('reduce76', axiom, ![Vtunion, Vt1, Vt2, Vts] : ((Vtunion = vunion(Vt1, Vt2) & (~visSomeTable(Vtunion))) => vreduce(vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vnoConf)).
fof('reduce77', axiom, ![Vq2reduce, Vq2, Vts, Vt] : ((Vq2reduce = vreduce(vconf(Vq2, Vts)) & visSomeTable(Vq2reduce) & ![Vt20] : Vq2 != vTvalue(Vt20)) => vreduce(vconf(vUnion(vTvalue(Vt), Vq2), Vts)) = vsomeConf(vconf(vUnion(vTvalue(Vt), vgetQuery(vgetSomeTable(Vq2reduce))), Vts)))).
fof('reduce78', axiom, ![Vq2reduce, Vq2, Vts, Vt] : ((Vq2reduce = vreduce(vconf(Vq2, Vts)) & (~visSomeTable(Vq2reduce)) & ![Vt20] : Vq2 != vTvalue(Vt20)) => vreduce(vconf(vUnion(vTvalue(Vt), Vq2), Vts)) = vnoConf)).
fof('reduce79', axiom, ![Vq1reduce, Vq1, Vts, Vq2] : ((Vq1reduce = vreduce(vconf(Vq1, Vts)) & visSomeConf(Vq1reduce) & (![Vt10] : Vq1 != vTvalue(Vt10) | ![Vt20] : Vq2 != vTvalue(Vt20)) & ![Vt0] : Vq1 != vTvalue(Vt0)) => vreduce(vconf(vUnion(Vq1, Vq2), Vts)) = vsomeConf(vconf(vUnion(vgetQuery(vgetSomeTable(Vq1reduce)), Vq2), Vts)))).
fof('reduce80', axiom, ![Vq1reduce, Vq1, Vts, Vq2] : ((Vq1reduce = vreduce(vconf(Vq1, Vts)) & (~visSomeConf(Vq1reduce)) & (![Vt10] : Vq1 != vTvalue(Vt10) | ![Vt20] : Vq2 != vTvalue(Vt20)) & ![Vt0] : Vq1 != vTvalue(Vt0)) => vreduce(vconf(vUnion(Vq1, Vq2), Vts)) = vnoConf)).
fof('reduce81', axiom, ![Vtintersection, Vt1, Vt2, Vts] : ((Vtintersection = vintersect(Vt1, Vt2) & visSomeTable(Vtintersection)) => vreduce(vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(Vtintersection)), Vts)))).
fof('reduce82', axiom, ![Vtintersection, Vt1, Vt2, Vts] : ((Vtintersection = vintersect(Vt1, Vt2) & (~visSomeTable(Vtintersection))) => vreduce(vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vnoConf)).
fof('reduce83', axiom, ![Vsql2reduce, Vsql2, Vts, Vt] : ((Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & visSomeTable(Vsql2reduce) & ![Vt20] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vIntersection(vTvalue(Vt), Vsql2), Vts)) = vsomeConf(vconf(vIntersection(vTvalue(Vt), vgetQuery(vgetSomeTable(Vsql2reduce))), Vts)))).
fof('reduce84', axiom, ![Vsql2reduce, Vsql2, Vts, Vt] : ((Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & (~visSomeTable(Vsql2reduce)) & ![Vt20] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vIntersection(vTvalue(Vt), Vsql2), Vts)) = vnoConf)).
fof('reduce85', axiom, ![Vsql1reduce, Vsql1, Vts, Vsql2] : ((Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & visSomeTable(Vsql1reduce) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vIntersection(Vsql1, Vsql2), Vts)) = vsomeConf(vconf(vIntersection(vgetQuery(vgetSomeTable(Vsql1reduce)), Vsql2), Vts)))).
fof('reduce86', axiom, ![Vsql1reduce, Vsql1, Vts, Vsql2] : ((Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & (~visSomeTable(Vsql1reduce)) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vIntersection(Vsql1, Vsql2), Vts)) = vnoConf)).
fof('reduce87', axiom, ![Vtdifference, Vt1, Vt2, Vts] : ((Vtdifference = vdifference(Vt1, Vt2) & visSomeTable(Vtdifference)) => vreduce(vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vsomeTable(vconf(vTvalue(vgetSomeTable(Vtdifference)), Vts)))).
fof('reduce88', axiom, ![Vtdifference, Vt1, Vt2, Vts] : ((Vtdifference = vdifference(Vt1, Vt2) & (~visSomeTable(Vtdifference))) => vreduce(vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vnoConf)).
fof('reduce89', axiom, ![Vsql2reduce, Vsql2, Vts, Vt] : ((Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & visSomeTable(Vsql2reduce) & ![Vt20] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vDifference(vTvalue(Vt), Vsql2), Vts)) = vsomeConf(vconf(vDifference(vTvalue(Vt), vgetQuery(vgetSomeTable(Vsql2reduce))), Vts)))).
fof('reduce90', axiom, ![Vsql2reduce, Vsql2, Vts, Vt] : ((Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & (~visSomeTable(Vsql2reduce)) & ![Vt20] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vDifference(vTvalue(Vt), Vsql2), Vts)) = vnoConf)).
fof('reduce91', axiom, ![Vsql1reduce, Vsql1, Vts, Vsql2] : ((Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & visSomeTable(Vsql1reduce) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vDifference(Vsql1, Vsql2), Vts)) = vsomeConf(vconf(vDifference(vgetQuery(vgetSomeTable(Vsql1reduce)), Vsql2), Vts)))).
fof('reduce92', axiom, ![Vsql1reduce, Vsql1, Vts, Vsql2] : ((Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & (~visSomeTable(Vsql1reduce)) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vDifference(Vsql1, Vsql2), Vts)) = vnoConf)).
fof('reduce-INV', axiom, ![VConf0, VRESULT] : (vreduce(VConf0) = VRESULT => (?[Vt, Vts] : (VConf0 = vconf(vTvalue(Vt), Vts) & VRESULT = vnoConf) | ?[Vltn, Vtn, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & VConf0 = vconf(vSelectAllFrom(vRef(Vtn)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(Vltn)), Vts))) | ?[Vltn, Vtn, Vts] : (Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn)) & VConf0 = vconf(vSelectAllFrom(vRef(Vtn)), Vts) & VRESULT = vnoConf) | ?[Vltn, Vpt, Vtn, Val, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vpt = vproject(Val, vgetSomeTable(Vltn)) & visSomeRawTable(Vpt) & VConf0 = vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vtable(Val, vgetSomeRawTable(Vpt))), Vts))) | ?[Vltn, Vpt, Vtn, Val, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vpt = vproject(Val, vgetSomeTable(Vltn)) & (~visSomeRawTable(Vpt)) & VConf0 = vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts) & VRESULT = vnoConf) | ?[Vltn, Vtn, Vts, Val] : (Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn)) & VConf0 = vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts) & VRESULT = vnoConf) | ?[Vp, Vltn, Vtn, Vst, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst) & VConf0 = vconf(vSelectAllFromWhere(Vtn, Vp), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(Vst)), Vts))) | ?[Vp, Vltn, Vtn, Vst, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & (~visSomeTable(Vst)) & VConf0 = vconf(vSelectAllFromWhere(Vtn, Vp), Vts) & VRESULT = vnoConf) | ?[Vltn, Vtn, Vts, Vp] : (Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn)) & VConf0 = vconf(vSelectAllFromWhere(Vtn, Vp), Vts) & VRESULT = vnoConf) | ?[Vp, Vltn, Vpt, Vtn, Vst, Vts, Vtt] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst) & Vpt = vproject(Vtt, vgetSomeTable(Vst)) & visSomeRawTable(Vpt) & VConf0 = vconf(vSelectSomeFromWhere(Vtt, Vtn, Vp), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeRawTable(Vpt)), Vts))) | ?[Vp, Vltn, Vpt, Vtn, Vst, Vts, Vtt] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst) & Vpt = vproject(Vtt, vgetSomeTable(Vst)) & (~visSomeRawTable(Vpt)) & VConf0 = vconf(vSelectSomeFromWhere(Vtt, Vtn, Vp), Vts) & VRESULT = vnoConf) | ?[Vp, Vltn, Vtn, Vst, Vts, Vtt] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & (~visSomeTable(Vst)) & VConf0 = vconf(vSelectSomeFromWhere(Vtt, Vtn, Vp), Vts) & VRESULT = vnoConf) | ?[Vp, Vltn, Vtn, Vts, Vtt] : (Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn)) & VConf0 = vconf(vSelectSomeFromWhere(Vtt, Vtn, Vp), Vts) & VRESULT = vnoConf) | ?[Vtunion, Vt1, Vt2, Vts] : (Vtunion = vunion(Vt1, Vt2) & visSomeTable(Vtunion) & VConf0 = vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(Vtunion)), Vts))) | ?[Vtunion, Vt1, Vt2, Vts] : (Vtunion = vunion(Vt1, Vt2) & (~visSomeTable(Vtunion)) & VConf0 = vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vnoConf) | ?[Vq2reduce, Vq2, Vts, Vt] : (Vq2reduce = vreduce(vconf(Vq2, Vts)) & visSomeTable(Vq2reduce) & ![Vt20] : Vq2 != vTvalue(Vt20) & VConf0 = vconf(vUnion(vTvalue(Vt), Vq2), Vts) & VRESULT = vsomeConf(vconf(vUnion(vTvalue(Vt), vgetQuery(vgetSomeTable(Vq2reduce))), Vts))) | ?[Vq2reduce, Vq2, Vts, Vt] : (Vq2reduce = vreduce(vconf(Vq2, Vts)) & (~visSomeTable(Vq2reduce)) & ![Vt20] : Vq2 != vTvalue(Vt20) & VConf0 = vconf(vUnion(vTvalue(Vt), Vq2), Vts) & VRESULT = vnoConf) | ?[Vq1reduce, Vq1, Vts, Vq2] : (Vq1reduce = vreduce(vconf(Vq1, Vts)) & visSomeConf(Vq1reduce) & (![Vt10] : Vq1 != vTvalue(Vt10) | ![Vt20] : Vq2 != vTvalue(Vt20)) & ![Vt0] : Vq1 != vTvalue(Vt0) & VConf0 = vconf(vUnion(Vq1, Vq2), Vts) & VRESULT = vsomeConf(vconf(vUnion(vgetQuery(vgetSomeTable(Vq1reduce)), Vq2), Vts))) | ?[Vq1reduce, Vq1, Vts, Vq2] : (Vq1reduce = vreduce(vconf(Vq1, Vts)) & (~visSomeConf(Vq1reduce)) & (![Vt10] : Vq1 != vTvalue(Vt10) | ![Vt20] : Vq2 != vTvalue(Vt20)) & ![Vt0] : Vq1 != vTvalue(Vt0) & VConf0 = vconf(vUnion(Vq1, Vq2), Vts) & VRESULT = vnoConf) | ?[Vtintersection, Vt1, Vt2, Vts] : (Vtintersection = vintersect(Vt1, Vt2) & visSomeTable(Vtintersection) & VConf0 = vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(Vtintersection)), Vts))) | ?[Vtintersection, Vt1, Vt2, Vts] : (Vtintersection = vintersect(Vt1, Vt2) & (~visSomeTable(Vtintersection)) & VConf0 = vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vnoConf) | ?[Vsql2reduce, Vsql2, Vts, Vt] : (Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & visSomeTable(Vsql2reduce) & ![Vt20] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vIntersection(vTvalue(Vt), Vsql2), Vts) & VRESULT = vsomeConf(vconf(vIntersection(vTvalue(Vt), vgetQuery(vgetSomeTable(Vsql2reduce))), Vts))) | ?[Vsql2reduce, Vsql2, Vts, Vt] : (Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & (~visSomeTable(Vsql2reduce)) & ![Vt20] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vIntersection(vTvalue(Vt), Vsql2), Vts) & VRESULT = vnoConf) | ?[Vsql1reduce, Vsql1, Vts, Vsql2] : (Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & visSomeTable(Vsql1reduce) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vIntersection(Vsql1, Vsql2), Vts) & VRESULT = vsomeConf(vconf(vIntersection(vgetQuery(vgetSomeTable(Vsql1reduce)), Vsql2), Vts))) | ?[Vsql1reduce, Vsql1, Vts, Vsql2] : (Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & (~visSomeTable(Vsql1reduce)) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vIntersection(Vsql1, Vsql2), Vts) & VRESULT = vnoConf) | ?[Vtdifference, Vt1, Vt2, Vts] : (Vtdifference = vdifference(Vt1, Vt2) & visSomeTable(Vtdifference) & VConf0 = vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vsomeTable(vconf(vTvalue(vgetSomeTable(Vtdifference)), Vts))) | ?[Vtdifference, Vt1, Vt2, Vts] : (Vtdifference = vdifference(Vt1, Vt2) & (~visSomeTable(Vtdifference)) & VConf0 = vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vnoConf) | ?[Vsql2reduce, Vsql2, Vts, Vt] : (Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & visSomeTable(Vsql2reduce) & ![Vt20] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vDifference(vTvalue(Vt), Vsql2), Vts) & VRESULT = vsomeConf(vconf(vDifference(vTvalue(Vt), vgetQuery(vgetSomeTable(Vsql2reduce))), Vts))) | ?[Vsql2reduce, Vsql2, Vts, Vt] : (Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & (~visSomeTable(Vsql2reduce)) & ![Vt20] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vDifference(vTvalue(Vt), Vsql2), Vts) & VRESULT = vnoConf) | ?[Vsql1reduce, Vsql1, Vts, Vsql2] : (Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & visSomeTable(Vsql1reduce) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vDifference(Vsql1, Vsql2), Vts) & VRESULT = vsomeConf(vconf(vDifference(vgetQuery(vgetSomeTable(Vsql1reduce)), Vsql2), Vts))) | ?[Vsql1reduce, Vsql1, Vts, Vsql2] : (Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & (~visSomeTable(Vsql1reduce)) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vDifference(Vsql1, Vsql2), Vts) & VRESULT = vnoConf)))).
fof('getRaw2', axiom, ![Val, Vrt] : vgetRaw(vtable(Val, Vrt)) = Vrt).
fof('getRaw-INV', axiom, ![VTable0, VRESULT] : (vgetRaw(VTable0) = VRESULT => ?[Val, Vrt] : (VTable0 = vtable(Val, Vrt) & VRESULT = Vrt))).
fof('getAL2', axiom, ![Val, Vrt] : vgetAL(vtable(Val, Vrt)) = Val).
fof('getAL-INV', axiom, ![VTable0, VRESULT] : (vgetAL(VTable0) = VRESULT => ?[Val, Vrt] : (VTable0 = vtable(Val, Vrt) & VRESULT = Val))).
fof('matchingAList6', axiom, vmatchingAList(vttempty, vaempty)).
fof('matchingAList7', axiom, ![Va1, Va2, Val, Vf, Vtt] : (vmatchingAList(vttcons(vctype(Va1, Vf), Vtt), vacons(Va2, Val)) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val)))).
fof('matchingAList8', axiom, ![Vtt, Val] : (((Vtt != vttempty | Val != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0))) => (~vmatchingAList(Vtt, Val)))).
fof('matchingAList-true-INV', axiom, ![VTType0, VAList0] : (vmatchingAList(VTType0, VAList0) => ((VTType0 = vttempty & VAList0 = vaempty) | ?[Va1, Va2, Val, Vf, Vtt] : (VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val) & (Va1 = Va2 & vmatchingAList(Vtt, Val)))))).
fof('matchingAList-false-INV', axiom, ![VTType0, VAList0] : ((~vmatchingAList(VTType0, VAList0)) => (?[Va1, Va2, Val, Vf, Vtt] : (VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val) & (~(Va1 = Va2 & vmatchingAList(Vtt, Val)))) | ?[Vtt, Val] : ((Vtt != vttempty | Val != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0)) & VTType0 = Vtt & VAList0 = Val)))).
fof('welltypedtable2', axiom, ![Vtt, Val, Vt] : (vwelltypedtable(Vtt, vtable(Val, Vt)) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))).
fof('welltypedtable-true-INV', axiom, ![VTType0, VTable0] : (vwelltypedtable(VTType0, VTable0) => ?[Vtt, Val, Vt] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt))))).
fof('welltypedtable-false-INV', axiom, ![VTType0, VTable0] : ((~vwelltypedtable(VTType0, VTable0)) => ?[Vtt, Val, Vt] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (~(vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))))).
fof('rawType4', axiom, vrawType(vttempty) = vrtempty).
fof('rawType5', axiom, ![Va, Vft, Vtt] : vrawType(vttcons(vctype(Va, Vft), Vtt)) = vrtcons(Vft, vrawType(Vtt))).
fof('rawType-INV', axiom, ![VTType0, VRESULT] : (vrawType(VTType0) = VRESULT => ((VTType0 = vttempty & VRESULT = vrtempty) | ?[Va, Vft, Vtt] : (VTType0 = vttcons(vctype(Va, Vft), Vtt) & VRESULT = vrtcons(Vft, vrawType(Vtt)))))).
fof('welltypedRawtable4', axiom, ![Vrt] : vwelltypedRawtable(Vrt, vtempty)).
fof('welltypedRawtable5', axiom, ![Vrt, Vr, Vt] : (vwelltypedRawtable(Vrt, vtcons(Vr, Vt)) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))).
fof('welltypedRawtable-true-INV', axiom, ![VRawType0, VRawTable0] : (vwelltypedRawtable(VRawType0, VRawTable0) => (?[Vrt] : (VRawType0 = Vrt & VRawTable0 = vtempty) | ?[Vrt, Vr, Vt] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))))).
fof('welltypedRawtable-false-INV', axiom, ![VRawType0, VRawTable0] : ((~vwelltypedRawtable(VRawType0, VRawTable0)) => ?[Vrt, Vr, Vt] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (~(vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))))).
fof('welltypedRow6', axiom, vwelltypedRow(vrtempty, vrempty)).
fof('welltypedRow7', axiom, ![Vft, Vrt, Vv, Vr] : (vwelltypedRow(vrtcons(Vft, Vrt), vrcons(Vv, Vr)) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))).
fof('welltypedRow8', axiom, ![Vrt, Vr] : (((Vrt != vrtempty | Vr != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(Vrt, Vr)))).
fof('welltypedRow-true-INV', axiom, ![VRawType0, VRow0] : (vwelltypedRow(VRawType0, VRow0) => ((VRawType0 = vrtempty & VRow0 = vrempty) | ?[Vft, Vrt, Vv, Vr] : (VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr) & (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))))).
fof('welltypedRow-false-INV', axiom, ![VRawType0, VRow0] : ((~vwelltypedRow(VRawType0, VRow0)) => (?[Vft, Vrt, Vv, Vr] : (VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr) & (~(vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))) | ?[Vrt, Vr] : ((Vrt != vrtempty | Vr != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0)) & VRawType0 = Vrt & VRow0 = Vr)))).
fof('rowIn4', axiom, ![Vr1] : (~vrowIn(Vr1, vtempty))).
fof('rowIn5', axiom, ![Vr1, Vr2, Vrt] : (vrowIn(Vr1, vtcons(Vr2, Vrt)) <=> (Vr1 = Vr2 | vrowIn(Vr1, Vrt)))).
fof('rowIn-true-INV', axiom, ![VRow0, VRawTable0] : (vrowIn(VRow0, VRawTable0) => ?[Vr1, Vr2, Vrt] : (VRow0 = Vr1 & VRawTable0 = vtcons(Vr2, Vrt) & (Vr1 = Vr2 | vrowIn(Vr1, Vrt))))).
fof('rowIn-false-INV', axiom, ![VRow0, VRawTable0] : ((~vrowIn(VRow0, VRawTable0)) => (?[Vr1] : (VRow0 = Vr1 & VRawTable0 = vtempty) | ?[Vr1, Vr2, Vrt] : (VRow0 = Vr1 & VRawTable0 = vtcons(Vr2, Vrt) & (~(Vr1 = Vr2 | vrowIn(Vr1, Vrt))))))).
fof('projectFirstRaw6', axiom, vprojectFirstRaw(vtempty) = vtempty).
fof('projectFirstRaw7', axiom, ![Vrt] : vprojectFirstRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vprojectFirstRaw(Vrt))).
fof('projectFirstRaw8', axiom, ![Vf, Vr, Vrt] : vprojectFirstRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(vrcons(Vf, vrempty), vprojectFirstRaw(Vrt))).
fof('dropFirstColRaw6', axiom, vdropFirstColRaw(vtempty) = vtempty).
fof('dropFirstColRaw7', axiom, ![Vrt] : vdropFirstColRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vdropFirstColRaw(Vrt))).
fof('dropFirstColRaw8', axiom, ![Vf, Vr, Vrt] : vdropFirstColRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(Vr, vdropFirstColRaw(Vrt))).
fof('dropFirstColRaw-INV', axiom, ![VRawTable0, VRESULT] : (vdropFirstColRaw(VRawTable0) = VRESULT => ((VRawTable0 = vtempty & VRESULT = vtempty) | ?[Vrt] : (VRawTable0 = vtcons(vrempty, Vrt) & VRESULT = vtcons(vrempty, vdropFirstColRaw(Vrt))) | ?[Vf, Vr, Vrt] : (VRawTable0 = vtcons(vrcons(Vf, Vr), Vrt) & VRESULT = vtcons(Vr, vdropFirstColRaw(Vrt)))))).
fof('isSomeRawTable4', axiom, (~visSomeRawTable(vnoRawTable))).
fof('isSomeRawTable5', axiom, ![Vt] : visSomeRawTable(vsomeRawTable(Vt))).
fof('isSomeRawTable-true-INV', axiom, ![VOptRawTable0] : (visSomeRawTable(VOptRawTable0) => ?[Vt] : VOptRawTable0 = vsomeRawTable(Vt))).
fof('isSomeRawTable-false-INV', axiom, ![VOptRawTable0] : ((~visSomeRawTable(VOptRawTable0)) => VOptRawTable0 = vnoRawTable)).
fof('getSomeRawTable2', axiom, ![Vt] : vgetSomeRawTable(vsomeRawTable(Vt)) = Vt).
fof('attachColToFrontRaw8', axiom, vattachColToFrontRaw(vtempty, vtempty) = vsomeRawTable(vtempty)).
fof('attachColToFrontRaw9', axiom, ![Vrt1, Vrest, Vr, Vf, Vrt2] : ((Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & visSomeRawTable(Vrest)) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(Vrest))))).
fof('attachColToFrontRaw10', axiom, ![Vrt1, Vrest, Vr, Vf, Vrt2] : ((Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & (~visSomeRawTable(Vrest))) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vnoRawTable)).
fof('attachColToFrontRaw11', axiom, ![Vrt1, Vrt2] : (((Vrt1 != vtempty | Vrt2 != vtempty) & (![Vf0, Vrt10] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vr0, Vrt20] : Vrt2 != vtcons(Vr0, Vrt20))) => vattachColToFrontRaw(Vrt1, Vrt2) = vnoRawTable)).
fof('attachColToFrontRaw-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vattachColToFrontRaw(VRawTable0, VRawTable1) = VRESULT => ((VRawTable0 = vtempty & VRawTable1 = vtempty & VRESULT = vsomeRawTable(vtempty)) | ?[Vrt1, Vrest, Vr, Vf, Vrt2] : (Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & visSomeRawTable(Vrest) & VRawTable0 = vtcons(vrcons(Vf, vrempty), Vrt1) & VRawTable1 = vtcons(Vr, Vrt2) & VRESULT = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(Vrest)))) | ?[Vrt1, Vrest, Vr, Vf, Vrt2] : (Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & (~visSomeRawTable(Vrest)) & VRawTable0 = vtcons(vrcons(Vf, vrempty), Vrt1) & VRawTable1 = vtcons(Vr, Vrt2) & VRESULT = vnoRawTable) | ?[Vrt1, Vrt2] : ((Vrt1 != vtempty | Vrt2 != vtempty) & (![Vf0, Vrt10] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vr0, Vrt20] : Vrt2 != vtcons(Vr0, Vrt20)) & VRawTable0 = Vrt1 & VRawTable1 = Vrt2 & VRESULT = vnoRawTable)))).
fof('rawUnion8', axiom, ![Vrt2] : vrawUnion(vtempty, Vrt2) = Vrt2).
fof('rawUnion9', axiom, ![Vrt1] : (Vrt1 != vtempty => vrawUnion(Vrt1, vtempty) = Vrt1)).
fof('rawUnion10', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vurt1rt2))).
fof('rawUnion11', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = Vurt1rt2)).
fof('rawUnion-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawUnion(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = Vrt2) | ?[Vrt1] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = Vrt1) | ?[Vurt1rt2, Vrt1, Vrt2, Vr1] : (Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vurt1rt2)) | ?[Vurt1rt2, Vrt1, Vrt2, Vr1] : (Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2)))).
fof('rawIntersection12', axiom, ![Vrt2] : vrawIntersection(vtempty, Vrt2) = vtempty).
fof('rawIntersection13', axiom, ![Vrt1] : (Vrt1 != vtempty => vrawIntersection(Vrt1, vtempty) = vtempty)).
fof('rawIntersection14', axiom, ![Vr1, Vrt2] : ((vrowIn(Vr1, Vrt2) & Vrt2 != vtempty) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
fof('rawIntersection15', axiom, ![Vr1, Vrt2] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
fof('rawIntersection16', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vurt1rt2))).
fof('rawIntersection17', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = Vurt1rt2)).
fof('rawIntersection-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawIntersection(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = vtempty) | ?[Vr1, Vrt2] : (vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty)) | ?[Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vurt1rt2, Vrt1, Vrt2, Vr1] : (Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vurt1rt2)) | ?[Vurt1rt2, Vrt1, Vrt2, Vr1] : (Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2)))).
fof('rawDifference12', axiom, ![Vrt2] : vrawDifference(vtempty, Vrt2) = vtempty).
fof('rawDifference13', axiom, ![Vrt1] : (Vrt1 != vtempty => vrawDifference(Vrt1, vtempty) = Vrt1)).
fof('rawDifference14', axiom, ![Vr1, Vrt2] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
fof('rawDifference15', axiom, ![Vr1, Vrt2] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
fof('rawDifference16', axiom, ![Vdrt1rt2, Vrt1, Vrt2, Vr1] : ((Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vdrt1rt2))).
fof('rawDifference17', axiom, ![Vdrt1rt2, Vrt1, Vrt2, Vr1] : ((Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = Vdrt1rt2)).
fof('rawDifference-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawDifference(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = Vrt1) | ?[Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty)) | ?[Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vdrt1rt2, Vrt1, Vrt2, Vr1] : (Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vdrt1rt2)) | ?[Vdrt1rt2, Vrt1, Vrt2, Vr1] : (Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vdrt1rt2)))).
fof('isValue16', axiom, ![Vt] : visValue(vTvalue(Vt))).
fof('isValue17', axiom, ![Vn] : (~visValue(vSelectAllFrom(Vn)))).
fof('isValue18', axiom, ![Val, Vtn] : (~visValue(vSelectSomeFrom(Val, Vtn)))).
fof('isValue19', axiom, ![Vtn, Vp] : (~visValue(vSelectAllFromWhere(Vtn, Vp)))).
fof('isValue20', axiom, ![Vtt, Vtn, Vp] : (~visValue(vSelectSomeFromWhere(Vtt, Vtn, Vp)))).
fof('isValue21', axiom, ![Vq1, Vq2] : (~visValue(vUnion(Vq1, Vq2)))).
fof('isValue22', axiom, ![Vsql1, Vsql2] : (~visValue(vIntersection(Vsql1, Vsql2)))).
fof('isValue23', axiom, ![Vsql1, Vsql2] : (~visValue(vDifference(Vsql1, Vsql2)))).
fof('isValue-true-INV', axiom, ![VQuery0] : (visValue(VQuery0) => ?[Vt] : VQuery0 = vTvalue(Vt))).
fof('isValue-false-INV', axiom, ![VQuery0] : ((~visValue(VQuery0)) => (?[Vn] : VQuery0 = vSelectAllFrom(Vn) | ?[Val, Vtn] : VQuery0 = vSelectSomeFrom(Val, Vtn) | ?[Vtn, Vp] : VQuery0 = vSelectAllFromWhere(Vtn, Vp) | ?[Vtt, Vtn, Vp] : VQuery0 = vSelectSomeFromWhere(Vtt, Vtn, Vp) | ?[Vq1, Vq2] : VQuery0 = vUnion(Vq1, Vq2) | ?[Vsql1, Vsql2] : VQuery0 = vIntersection(Vsql1, Vsql2) | ?[Vsql1, Vsql2] : VQuery0 = vDifference(Vsql1, Vsql2)))).
fof('isSomeTable4', axiom, (~visSomeTable(vnoTable))).
fof('isSomeTable5', axiom, ![Vt] : visSomeTable(vsomeTable(Vt))).
fof('isSomeTable-true-INV', axiom, ![VOptTable0] : (visSomeTable(VOptTable0) => ?[Vt] : VOptTable0 = vsomeTable(Vt))).
fof('isSomeTable-false-INV', axiom, ![VOptTable0] : ((~visSomeTable(VOptTable0)) => VOptTable0 = vnoTable)).
fof('getSomeTable2', axiom, ![Vt] : vgetSomeTable(vsomeTable(Vt)) = Vt).
fof('lookupStore6', axiom, ![Vn] : vlookupStore(Vn, vemptyStore) = vnoTable).
fof('lookupStore7', axiom, ![Vn, Vm, Vt, VTS] : (Vn = Vm => vlookupStore(Vn, vbindStore(Vm, Vt, VTS)) = vsomeTable(Vt))).
fof('lookupStore8', axiom, ![Vn, Vm, Vt, VTS] : (Vn != Vm => vlookupStore(Vn, vbindStore(Vm, Vt, VTS)) = vlookupStore(Vn, VTS))).
fof('lookupStore-INV', axiom, ![VTName0, VTStore0, VRESULT] : (vlookupStore(VTName0, VTStore0) = VRESULT => (?[Vn] : (VTName0 = Vn & VTStore0 = vemptyStore & VRESULT = vnoTable) | ?[Vn, Vm, Vt, VTS] : (Vn = Vm & VTName0 = Vn & VTStore0 = vbindStore(Vm, Vt, VTS) & VRESULT = vsomeTable(Vt)) | ?[Vn, Vm, Vt, VTS] : (Vn != Vm & VTName0 = Vn & VTStore0 = vbindStore(Vm, Vt, VTS) & VRESULT = vlookupStore(Vn, VTS))))).
fof('EQ-x1', axiom, $true).
fof('EQ-x2', axiom, $true).
fof('EQ-y1', axiom, $true).
fof('EQ-y2', axiom, $true).
fof('EQ-z1', axiom, $true).
fof('EQ-z2', axiom, $true).
fof('DIFF-x1-x2', axiom, vx1 != vx2).
fof('DIFF-x1-y1', axiom, vx1 != vy1).
fof('DIFF-x1-y2', axiom, vx1 != vy2).
fof('DIFF-x1-z1', axiom, vx1 != vz1).
fof('DIFF-x1-z2', axiom, vx1 != vz2).
fof('DIFF-x2-y1', axiom, vx2 != vy1).
fof('DIFF-x2-y2', axiom, vx2 != vy2).
fof('DIFF-x2-z1', axiom, vx2 != vz1).
fof('DIFF-x2-z2', axiom, vx2 != vz2).
fof('DIFF-y1-y2', axiom, vy1 != vy2).
fof('DIFF-y1-z1', axiom, vy1 != vz1).
fof('DIFF-y1-z2', axiom, vy1 != vz2).
fof('DIFF-y2-z1', axiom, vy2 != vz1).
fof('DIFF-y2-z2', axiom, vy2 != vz2).
fof('DIFF-z1-z2', axiom, vz1 != vz2).
fof('EQ-TN', axiom, $true).
fof('EQ-A1', axiom, $true).
fof('EQ-A2', axiom, $true).
fof('EQ-A3', axiom, $true).
fof('DIFF-A1-A2', axiom, vA1 != vA2).
fof('DIFF-A1-A3', axiom, vA1 != vA3).
fof('DIFF-A2-A3', axiom, vA2 != vA3).
fof('rawUnion-aux', axiom, ![Vrt1, Vrt2, Vrtresult] : ((Vrt1 = vtcons(vrcons(vx1, vrcons(vy2, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz1, vrempty))), vtempty)) & Vrt2 = vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtempty)) & Vrtresult = vtcons(vrcons(vx1, vrcons(vy2, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz1, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtempty))))) => vrawUnion(Vrt1, Vrt2) = Vrtresult)).
fof('rawUnion-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawUnion(VRawTable0, VRawTable1) = VRESULT => ?[Vrt1, Vrt2, Vrtresult] : (Vrt1 = vtcons(vrcons(vx1, vrcons(vy2, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz1, vrempty))), vtempty)) & Vrt2 = vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtempty)) & Vrtresult = vtcons(vrcons(vx1, vrcons(vy2, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz1, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtempty)))) & VRawTable0 = Vrt1 & VRawTable1 = Vrt2 & VRESULT = Vrtresult))).
fof('test-union1', axiom, ![Vrtresult, Vt, Vrt1, Vq, Vt1, Vt2, Val, Vts, Vrt2] : ((Val = vacons(vA1, vacons(vA2, vacons(vA3, vaempty))) & Vrt1 = vtcons(vrcons(vx1, vrcons(vy2, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz1, vrempty))), vtempty)) & Vrt2 = vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtempty)) & Vrtresult = vtcons(vrcons(vx1, vrcons(vy2, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz1, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtcons(vrcons(vx2, vrcons(vy1, vrcons(vz2, vrempty))), vtempty)))) & Vt1 = vtable(Val, Vrt1) & Vt2 = vtable(Val, Vrt2) & Vts = vbindStore(vTN, Vt, vemptyStore) & Vq = vUnion(vTvalue(Vt1), vTvalue(Vt2)) & Vt = vtable(Val, Vrtresult)) => vreduce(vconf(Vq, Vts)) = vsomeConf(vconf(vTvalue(Vt), Vts)))).
fof('false-goal', conjecture, ($true => $false)).
