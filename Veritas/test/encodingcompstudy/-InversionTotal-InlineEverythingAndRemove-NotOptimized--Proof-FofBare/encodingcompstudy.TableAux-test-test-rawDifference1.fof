fof('EQ-ctype', axiom, ![VAName0, VAName1, VFType0, VFType1] : ($true => ((VAName0 = VAName1 & VFType0 = VFType1) <=> vctype(VAName0, VFType0) = vctype(VAName1, VFType1)))).
fof('EQ-aempty', axiom, ($true => ($true <=> vaempty = vaempty))).
fof('EQ-acons', axiom, ![VAName0, VAName1, VAList0, VAList1] : ($true => ((VAName0 = VAName1 & VAList0 = VAList1) <=> vacons(VAName0, VAList0) = vacons(VAName1, VAList1)))).
fof('EQ-ttempty', axiom, ($true => ($true <=> vttempty = vttempty))).
fof('EQ-ttcons', axiom, ![VCType0, VCType1, VTType0, VTType1] : ($true => ((VCType0 = VCType1 & VTType0 = VTType1) <=> vttcons(VCType0, VTType0) = vttcons(VCType1, VTType1)))).
fof('EQ-rtempty', axiom, ($true => ($true <=> vrtempty = vrtempty))).
fof('EQ-rtcons', axiom, ![VFType0, VFType1, VRawType0, VRawType1] : ($true => ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> vrtcons(VFType0, VRawType0) = vrtcons(VFType1, VRawType1)))).
fof('EQ-rempty', axiom, ($true => ($true <=> vrempty = vrempty))).
fof('EQ-rcons', axiom, ![VFVal0, VFVal1, VRow0, VRow1] : ($true => ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> vrcons(VFVal0, VRow0) = vrcons(VFVal1, VRow1)))).
fof('EQ-tempty', axiom, ($true => ($true <=> vtempty = vtempty))).
fof('EQ-tcons', axiom, ![VRow0, VRow1, VRawTable0, VRawTable1] : ($true => ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> vtcons(VRow0, VRawTable0) = vtcons(VRow1, VRawTable1)))).
fof('EQ-table', axiom, ![VAList0, VAList1, VRawTable0, VRawTable1] : ($true => ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> vtable(VAList0, VRawTable0) = vtable(VAList1, VRawTable1)))).
fof('EQ-noRawTable', axiom, ($true => ($true <=> vnoRawTable = vnoRawTable))).
fof('EQ-someRawTable', axiom, ![VRawTable0, VRawTable1] : ($true => (VRawTable0 = VRawTable1 <=> vsomeRawTable(VRawTable0) = vsomeRawTable(VRawTable1)))).
fof('DIFF-aempty-acons', axiom, ![VAName0, VAList0] : ($true => vaempty != vacons(VAName0, VAList0))).
fof('DIFF-ttempty-ttcons', axiom, ![VCType0, VTType0] : ($true => vttempty != vttcons(VCType0, VTType0))).
fof('DIFF-rtempty-rtcons', axiom, ![VFType0, VRawType0] : ($true => vrtempty != vrtcons(VFType0, VRawType0))).
fof('DIFF-rempty-rcons', axiom, ![VFVal0, VRow0] : ($true => vrempty != vrcons(VFVal0, VRow0))).
fof('DIFF-tempty-tcons', axiom, ![VRow0, VRawTable0] : ($true => vtempty != vtcons(VRow0, VRawTable0))).
fof('DIFF-noRawTable-someRawTable', axiom, ![VRawTable0] : ($true => vnoRawTable != vsomeRawTable(VRawTable0))).
fof('getRaw0', axiom, ![Val, Vrt] : ($true => vgetRaw(vtable(Val, Vrt)) = Vrt)).
fof('getRaw-INV', axiom, ![VTable0, VRESULT] : (vgetRaw(VTable0) = VRESULT => ?[Val, Vrt] : (VTable0 = vtable(Val, Vrt) & VRESULT = Vrt))).
fof('getAL0', axiom, ![Val, Vrt] : ($true => vgetAL(vtable(Val, Vrt)) = Val)).
fof('getAL-INV', axiom, ![VTable0, VRESULT] : (vgetAL(VTable0) = VRESULT => ?[Val, Vrt] : (VTable0 = vtable(Val, Vrt) & VRESULT = Val))).
fof('matchingAList0', axiom, ($true => vmatchingAList(vttempty, vaempty))).
fof('matchingAList1', axiom, ![Va1, Va2, Val, Vf, Vtt] : ($true => (vmatchingAList(vttcons(vctype(Va1, Vf), Vtt), vacons(Va2, Val)) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val))))).
fof('matchingAList2', axiom, ![Vtt, Val] : (((Vtt != vttempty | Val != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0))) => (~vmatchingAList(Vtt, Val)))).
fof('matchingAList-true-INV', axiom, ![VTType0, VAList0] : (vmatchingAList(VTType0, VAList0) => ($true | ?[Va1, Va2, Val, Vf, Vtt] : (vttempty = vttcons(vctype(Va1, Vf), Vtt) & vaempty = vacons(Va2, Val) & (Va1 = Va2 & vmatchingAList(Vtt, Val)))))).
fof('matchingAList-false-INV', axiom, ![VTType0, VAList0] : ((~vmatchingAList(VTType0, VAList0)) => (?[Va1, Va2, Val, Vf, Vtt] : (VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val) & (~(Va1 = Va2 & vmatchingAList(Vtt, Val)))) | ?[Vtt, Val] : ((Vtt != vttempty | Val != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0)) & VTType0 = Vtt & VAList0 = Val)))).
fof('welltypedtable0', axiom, ![Vtt, Val, Vt] : ($true => (vwelltypedtable(Vtt, vtable(Val, Vt)) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt))))).
fof('welltypedtable-true-INV', axiom, ![VTType0, VTable0] : (vwelltypedtable(VTType0, VTable0) => ?[Vtt, Val, Vt] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt))))).
fof('welltypedtable-false-INV', axiom, ![VTType0, VTable0] : ((~vwelltypedtable(VTType0, VTable0)) => ?[Vtt, Val, Vt] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (~(vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))))).
fof('rawType0', axiom, ($true => vrawType(vttempty) = vrtempty)).
fof('rawType1', axiom, ![Va, Vft, Vtt] : ($true => vrawType(vttcons(vctype(Va, Vft), Vtt)) = vrtcons(Vft, vrawType(Vtt)))).
fof('rawType-INV', axiom, ![VTType0, VRESULT] : (vrawType(VTType0) = VRESULT => ($true | ?[Va, Vft, Vtt] : (vttempty = vttcons(vctype(Va, Vft), Vtt) & vrtempty = vrtcons(Vft, vrawType(Vtt)))))).
fof('welltypedRawtable0', axiom, ![Vrt] : ($true => vwelltypedRawtable(Vrt, vtempty))).
fof('welltypedRawtable1', axiom, ![Vrt, Vr, Vt] : ($true => (vwelltypedRawtable(Vrt, vtcons(Vr, Vt)) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt))))).
fof('welltypedRawtable-true-INV', axiom, ![VRawType0, VRawTable0] : (vwelltypedRawtable(VRawType0, VRawTable0) => (?[Vrt] : (VRawType0 = Vrt & VRawTable0 = vtempty) | ?[Vrt, Vr, Vt] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))))).
fof('welltypedRawtable-false-INV', axiom, ![VRawType0, VRawTable0] : ((~vwelltypedRawtable(VRawType0, VRawTable0)) => ?[Vrt, Vr, Vt] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (~(vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))))).
fof('welltypedRow0', axiom, ($true => vwelltypedRow(vrtempty, vrempty))).
fof('welltypedRow1', axiom, ![Vft, Vrt, Vv, Vr] : ($true => (vwelltypedRow(vrtcons(Vft, Vrt), vrcons(Vv, Vr)) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr))))).
fof('welltypedRow2', axiom, ![Vrt, Vr] : (((Vrt != vrtempty | Vr != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(Vrt, Vr)))).
fof('welltypedRow-true-INV', axiom, ![VRawType0, VRow0] : (vwelltypedRow(VRawType0, VRow0) => ($true | ?[Vft, Vrt, Vv, Vr] : (vrtempty = vrtcons(Vft, Vrt) & vrempty = vrcons(Vv, Vr) & (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))))).
fof('welltypedRow-false-INV', axiom, ![VRawType0, VRow0] : ((~vwelltypedRow(VRawType0, VRow0)) => (?[Vft, Vrt, Vv, Vr] : (VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr) & (~(vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))) | ?[Vrt, Vr] : ((Vrt != vrtempty | Vr != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0)) & VRawType0 = Vrt & VRow0 = Vr)))).
fof('rowIn0', axiom, ![Vr1] : ($true => (~vrowIn(Vr1, vtempty)))).
fof('rowIn1', axiom, ![Vr1, Vr2, Vrt] : ($true => (vrowIn(Vr1, vtcons(Vr2, Vrt)) <=> (Vr1 = Vr2 | vrowIn(Vr1, Vrt))))).
fof('rowIn-true-INV', axiom, ![VRow0, VRawTable0] : (vrowIn(VRow0, VRawTable0) => ?[Vr1, Vr2, Vrt] : (VRow0 = Vr1 & VRawTable0 = vtcons(Vr2, Vrt) & (Vr1 = Vr2 | vrowIn(Vr1, Vrt))))).
fof('rowIn-false-INV', axiom, ![VRow0, VRawTable0] : ((~vrowIn(VRow0, VRawTable0)) => (?[Vr1] : (VRow0 = Vr1 & VRawTable0 = vtempty) | ?[Vr1, Vr2, Vrt] : (VRow0 = Vr1 & VRawTable0 = vtcons(Vr2, Vrt) & (~(Vr1 = Vr2 | vrowIn(Vr1, Vrt))))))).
fof('projectFirstRaw0', axiom, ($true => vprojectFirstRaw(vtempty) = vtempty)).
fof('projectFirstRaw1', axiom, ![Vrt] : ($true => vprojectFirstRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vprojectFirstRaw(Vrt)))).
fof('projectFirstRaw2', axiom, ![Vf, Vr, Vrt] : ($true => vprojectFirstRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(vrcons(Vf, vrempty), vprojectFirstRaw(Vrt)))).
fof('projectFirstRaw-INV', axiom, ![VRawTable0, VRESULT] : (vprojectFirstRaw(VRawTable0) = VRESULT => ($true | ?[Vrt] : (vtempty = vtcons(vrempty, Vrt) & vtempty = vtcons(vrempty, vprojectFirstRaw(Vrt))) | ?[Vf, Vr, Vrt] : (vtempty = vtcons(vrcons(Vf, Vr), Vrt) & vtempty = vtcons(vrcons(Vf, vrempty), vprojectFirstRaw(Vrt)))))).
fof('dropFirstColRaw0', axiom, ($true => vdropFirstColRaw(vtempty) = vtempty)).
fof('dropFirstColRaw1', axiom, ![Vrt] : ($true => vdropFirstColRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vdropFirstColRaw(Vrt)))).
fof('dropFirstColRaw2', axiom, ![Vf, Vr, Vrt] : ($true => vdropFirstColRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(Vr, vdropFirstColRaw(Vrt)))).
fof('dropFirstColRaw-INV', axiom, ![VRawTable0, VRESULT] : (vdropFirstColRaw(VRawTable0) = VRESULT => ($true | ?[Vrt] : (vtempty = vtcons(vrempty, Vrt) & vtempty = vtcons(vrempty, vdropFirstColRaw(Vrt))) | ?[Vf, Vr, Vrt] : (vtempty = vtcons(vrcons(Vf, Vr), Vrt) & vtempty = vtcons(Vr, vdropFirstColRaw(Vrt)))))).
fof('isSomeRawTable0', axiom, ($true => (~visSomeRawTable(vnoRawTable)))).
fof('isSomeRawTable1', axiom, ![Vt] : ($true => visSomeRawTable(vsomeRawTable(Vt)))).
fof('isSomeRawTable-true-INV', axiom, ![VOptRawTable0] : (visSomeRawTable(VOptRawTable0) => ?[Vt] : VOptRawTable0 = vsomeRawTable(Vt))).
fof('isSomeRawTable-false-INV', axiom, ![VOptRawTable0] : ((~visSomeRawTable(VOptRawTable0)) => VOptRawTable0 = vnoRawTable)).
fof('getSomeRawTable0', axiom, ![Vt] : ($true => vgetSomeRawTable(vsomeRawTable(Vt)) = Vt)).
fof('attachColToFrontRaw0', axiom, ($true => vattachColToFrontRaw(vtempty, vtempty) = vsomeRawTable(vtempty))).
fof('attachColToFrontRaw1', axiom, ![Vrt1, Vrt2, Vf, Vr] : (visSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2)) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2)))))).
fof('attachColToFrontRaw2', axiom, ![Vrt1, Vrt2, Vf, Vr] : ((~visSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2))) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vnoRawTable)).
fof('attachColToFrontRaw3', axiom, ![Vrt1, Vrt2] : (((Vrt1 != vtempty | Vrt2 != vtempty) & (![Vf0, Vrt10] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vr0, Vrt20] : Vrt2 != vtcons(Vr0, Vrt20))) => vattachColToFrontRaw(Vrt1, Vrt2) = vnoRawTable)).
fof('attachColToFrontRaw-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vattachColToFrontRaw(VRawTable0, VRawTable1) = VRESULT => ($true | ?[Vrt1, Vr, Vf, Vrt2] : (visSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2)) & vtempty = vtcons(vrcons(Vf, vrempty), Vrt1) & vtempty = vtcons(Vr, Vrt2) & vsomeRawTable(vtempty) = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2))))) | ?[Vrt1, Vr, Vf, Vrt2] : ((~visSomeRawTable(vattachColToFrontRaw(Vrt1, Vrt2))) & vtempty = vtcons(vrcons(Vf, vrempty), Vrt1) & vtempty = vtcons(Vr, Vrt2) & vsomeRawTable(vtempty) = vnoRawTable) | ?[Vrt1, Vrt2] : ((Vrt1 != vtempty | Vrt2 != vtempty) & (![Vf0, Vrt10] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vr0, Vrt20] : Vrt2 != vtcons(Vr0, Vrt20)) & vtempty = Vrt1 & vtempty = Vrt2 & vsomeRawTable(vtempty) = vnoRawTable)))).
fof('rawUnion0', axiom, ![Vrt2] : ($true => vrawUnion(vtempty, Vrt2) = Vrt2)).
fof('rawUnion1', axiom, ![Vrt1] : (Vrt1 != vtempty => vrawUnion(Vrt1, vtempty) = Vrt1)).
fof('rawUnion2', axiom, ![Vr1, Vrt2, Vrt1] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, vrawUnion(Vrt1, Vrt2)))).
fof('rawUnion3', axiom, ![Vr1, Vrt2, Vrt1] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = vrawUnion(Vrt1, Vrt2))).
fof('rawUnion-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawUnion(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = Vrt2) | ?[Vrt1] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = Vrt1) | ?[Vrt1, Vrt2, Vr1] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vrawUnion(Vrt1, Vrt2))) | ?[Vurt1rt2, Vrt1, Vrt2, Vr1] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2)))).
fof('rawIntersection0', axiom, ![Vrt2] : ($true => vrawIntersection(vtempty, Vrt2) = vtempty)).
fof('rawIntersection1', axiom, ![Vrt1] : (Vrt1 != vtempty => vrawIntersection(Vrt1, vtempty) = vtempty)).
fof('rawIntersection2', axiom, ![Vr1, Vrt2] : ((vrowIn(Vr1, Vrt2) & Vrt2 != vtempty) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
fof('rawIntersection3', axiom, ![Vr1, Vrt2] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
fof('rawIntersection4', axiom, ![Vr1, Vrt2, Vrt1] : ((vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, vrawIntersection(Vrt1, Vrt2)))).
fof('rawIntersection5', axiom, ![Vr1, Vrt2, Vrt1] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = vrawIntersection(Vrt1, Vrt2))).
fof('rawIntersection-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawIntersection(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = vtempty) | ?[Vr1, Vrt2] : (vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty)) | ?[Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1, Vrt2, Vr1] : (vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vrawIntersection(Vrt1, Vrt2))) | ?[Vurt1rt2, Vrt1, Vrt2, Vr1] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2)))).
fof('rawDifference0', axiom, ![Vrt2] : ($true => vrawDifference(vtempty, Vrt2) = vtempty)).
fof('rawDifference1', axiom, ![Vrt1] : (Vrt1 != vtempty => vrawDifference(Vrt1, vtempty) = Vrt1)).
fof('rawDifference2', axiom, ![Vr1, Vrt2] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
fof('rawDifference3', axiom, ![Vr1, Vrt2] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
fof('rawDifference4', axiom, ![Vr1, Vrt2, Vrt1] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, vrawDifference(Vrt1, Vrt2)))).
fof('rawDifference5', axiom, ![Vr1, Vrt2, Vrt1] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = vrawDifference(Vrt1, Vrt2))).
fof('rawDifference-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawDifference(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = Vrt1) | ?[Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty)) | ?[Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1, Vrt2, Vr1] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vrawDifference(Vrt1, Vrt2))) | ?[Vdrt1rt2, Vrt1, Vrt2, Vr1] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vdrt1rt2)))).
fof('test-rawDifference1', conjecture, ![Vy2, Vz2, Vy1, Vz1] : ($true => vrawDifference(vtcons(vrcons(Vy2, vrcons(Vz2, vrempty)), vtcons(vrcons(Vy1, vrcons(Vz1, vrempty)), vtcons(vrcons(Vy2, vrcons(Vz1, vrempty)), vtcons(vrcons(Vy1, vrcons(Vz1, vrempty)), vtempty)))), vtcons(vrcons(Vy2, vrcons(Vz2, vrempty)), vtcons(vrcons(Vy1, vrcons(Vz1, vrempty)), vtcons(vrcons(Vy2, vrcons(Vz1, vrempty)), vtcons(vrcons(Vy1, vrcons(Vz1, vrempty)), vtempty))))) = vtempty)).
