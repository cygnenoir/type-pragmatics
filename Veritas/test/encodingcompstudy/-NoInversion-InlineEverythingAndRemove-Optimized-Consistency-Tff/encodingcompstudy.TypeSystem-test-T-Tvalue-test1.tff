tff('FType_type', type, vFType: $tType).
tff('AName_type', type, vAName: $tType).
tff('AList_type', type, vAList: $tType).
tff('CType_type', type, vCType: $tType).
tff('TType_type', type, vTType: $tType).
tff('RawType_type', type, vRawType: $tType).
tff('FVal_type', type, vFVal: $tType).
tff('Row_type', type, vRow: $tType).
tff('RawTable_type', type, vRawTable: $tType).
tff('Table_type', type, vTable: $tType).
tff('TStore_type', type, vTStore: $tType).
tff('TName_type', type, vTName: $tType).
tff('OptTable_type', type, vOptTable: $tType).
tff('Pred_type', type, vPred: $tType).
tff('Query_type', type, vQuery: $tType).
tff('TRef_type', type, vTRef: $tType).
tff('TTContext_type', type, vTTContext: $tType).
tff('OptTType_type', type, vOptTType: $tType).
tff('OptFType_type', type, vOptFType: $tType).
tff('ctype_type', type, vctype: (vAName * vFType) > vCType).
tff('aempty_type', type, vaempty: vAList).
tff('acons_type', type, vacons: (vAName * vAList) > vAList).
tff('ttempty_type', type, vttempty: vTType).
tff('ttcons_type', type, vttcons: (vCType * vTType) > vTType).
tff('rtempty_type', type, vrtempty: vRawType).
tff('rtcons_type', type, vrtcons: (vFType * vRawType) > vRawType).
tff('rempty_type', type, vrempty: vRow).
tff('rcons_type', type, vrcons: (vFVal * vRow) > vRow).
tff('tempty_type', type, vtempty: vRawTable).
tff('tcons_type', type, vtcons: (vRow * vRawTable) > vRawTable).
tff('table_type', type, vtable: (vAList * vRawTable) > vTable).
tff('noTable_type', type, vnoTable: vOptTable).
tff('someTable_type', type, vsomeTable: vTable > vOptTable).
tff('emptyStore_type', type, vemptyStore: vTStore).
tff('bindStore_type', type, vbindStore: (vTName * vTable * vTStore) > vTStore).
tff('VEquals_type', type, vVEquals: (vAName * vFVal) > vPred).
tff('VGreater_type', type, vVGreater: (vAName * vFVal) > vPred).
tff('VSmaller_type', type, vVSmaller: (vAName * vFVal) > vPred).
tff('Ref_type', type, vRef: vTName > vTRef).
tff('Tvalue_type', type, vTvalue: vTable > vQuery).
tff('SelectAllFrom_type', type, vSelectAllFrom: vTRef > vQuery).
tff('SelectSomeFrom_type', type, vSelectSomeFrom: (vAList * vTRef) > vQuery).
tff('SelectAllFromWhere_type', type, vSelectAllFromWhere: (vTRef * vPred) > vQuery).
tff('SelectSomeFromWhere_type', type, vSelectSomeFromWhere: (vAList * vTRef * vPred) > vQuery).
tff('Union_type', type, vUnion: (vQuery * vQuery) > vQuery).
tff('Intersection_type', type, vIntersection: (vQuery * vQuery) > vQuery).
tff('Difference_type', type, vDifference: (vQuery * vQuery) > vQuery).
tff('noTType_type', type, vnoTType: vOptTType).
tff('someTType_type', type, vsomeTType: vTType > vOptTType).
tff('emptyContext_type', type, vemptyContext: vTTContext).
tff('bindContext_type', type, vbindContext: (vTName * vTType * vTTContext) > vTTContext).
tff('noFType_type', type, vnoFType: vOptFType).
tff('someFType_type', type, vsomeFType: vFType > vOptFType).
tff('getRaw_type', type, vgetRaw: vTable > vRawTable).
tff('getAL_type', type, vgetAL: vTable > vAList).
tff('fieldType_type', type, vfieldType: vFVal > vFType).
tff('le_type', type, vle: (vFVal * vFVal) > $o).
tff('ge_type', type, vge: (vFVal * vFVal) > $o).
tff('matchingAList_type', type, vmatchingAList: (vTType * vAList) > $o).
tff('welltypedtable_type', type, vwelltypedtable: (vTType * vTable) > $o).
tff('rawType_type', type, vrawType: vTType > vRawType).
tff('welltypedRawtable_type', type, vwelltypedRawtable: (vRawType * vRawTable) > $o).
tff('welltypedRow_type', type, vwelltypedRow: (vRawType * vRow) > $o).
tff('isSomeTable_type', type, visSomeTable: vOptTable > $o).
tff('lookupStore_type', type, vlookupStore: (vTName * vTStore) > vOptTable).
tff('isValue_type', type, visValue: vQuery > $o).
tff('isSomeTType_type', type, visSomeTType: vOptTType > $o).
tff('lookupContext_type', type, vlookupContext: (vTName * vTTContext) > vOptTType).
tff('isSomeFType_type', type, visSomeFType: vOptFType > $o).
tff('findColType_type', type, vfindColType: (vAName * vTType) > vOptFType).
tff('projectType_type', type, vprojectType: (vAList * vTType) > vOptTType).
tff('ctypeIn_type', type, vctypeIn: (vAName * vFType * vTType) > $o).
tff('checkPValidity_type', type, vcheckPValidity: (vPred * vTType) > $o).
tff('tcheck_type', type, vtcheck: (vTTContext * vQuery * vTType) > $o).
tff('getSomeTable_type', type, vgetSomeTable: vOptTable > vTable).
tff('getSomeTType_type', type, vgetSomeTType: vOptTType > vTType).
tff('getSomeFType_type', type, vgetSomeFType: vOptFType > vFType).
tff('EQ-ctype', axiom, ![VAName0: vAName, VAName1: vAName, VFType0: vFType, VFType1: vFType] : ((VAName0 = VAName1 & VFType0 = VFType1) <=> vctype(VAName0, VFType0) = vctype(VAName1, VFType1))).
tff('EQ-aempty', axiom, $true).
tff('EQ-acons', axiom, ![VAName0: vAName, VAName1: vAName, VAList0: vAList, VAList1: vAList] : ((VAName0 = VAName1 & VAList0 = VAList1) <=> vacons(VAName0, VAList0) = vacons(VAName1, VAList1))).
tff('DIFF-acons-aempty', axiom, ![VAName0: vAName, VAList0: vAList] : vacons(VAName0, VAList0) != vaempty).
tff('EQ-ttempty', axiom, $true).
tff('EQ-ttcons', axiom, ![VCType0: vCType, VCType1: vCType, VTType0: vTType, VTType1: vTType] : ((VCType0 = VCType1 & VTType0 = VTType1) <=> vttcons(VCType0, VTType0) = vttcons(VCType1, VTType1))).
tff('DIFF-ttcons-ttempty', axiom, ![VCType0: vCType, VTType0: vTType] : vttcons(VCType0, VTType0) != vttempty).
tff('EQ-rtempty', axiom, $true).
tff('EQ-rtcons', axiom, ![VFType0: vFType, VFType1: vFType, VRawType0: vRawType, VRawType1: vRawType] : ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> vrtcons(VFType0, VRawType0) = vrtcons(VFType1, VRawType1))).
tff('DIFF-rtcons-rtempty', axiom, ![VFType0: vFType, VRawType0: vRawType] : vrtcons(VFType0, VRawType0) != vrtempty).
tff('EQ-rempty', axiom, $true).
tff('EQ-rcons', axiom, ![VFVal0: vFVal, VFVal1: vFVal, VRow0: vRow, VRow1: vRow] : ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> vrcons(VFVal0, VRow0) = vrcons(VFVal1, VRow1))).
tff('DIFF-rcons-rempty', axiom, ![VFVal0: vFVal, VRow0: vRow] : vrcons(VFVal0, VRow0) != vrempty).
tff('EQ-tempty', axiom, $true).
tff('EQ-tcons', axiom, ![VRow0: vRow, VRow1: vRow, VRawTable0: vRawTable, VRawTable1: vRawTable] : ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> vtcons(VRow0, VRawTable0) = vtcons(VRow1, VRawTable1))).
tff('DIFF-tcons-tempty', axiom, ![VRow0: vRow, VRawTable0: vRawTable] : vtcons(VRow0, VRawTable0) != vtempty).
tff('EQ-table', axiom, ![VAList0: vAList, VAList1: vAList, VRawTable0: vRawTable, VRawTable1: vRawTable] : ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> vtable(VAList0, VRawTable0) = vtable(VAList1, VRawTable1))).
tff('getRaw0', axiom, ![Val: vAList, Vrt: vRawTable] : vgetRaw(vtable(Val, Vrt)) = Vrt).
tff('getAL0', axiom, ![Val: vAList, Vrt: vRawTable] : vgetAL(vtable(Val, Vrt)) = Val).
tff('matchingAList0', axiom, vmatchingAList(vttempty, vaempty)).
tff('matchingAList1', axiom, ![Va1: vAName, Va2: vAName, Val: vAList, Vf: vFType, Vtt: vTType] : (vmatchingAList(vttcons(vctype(Va1, Vf), Vtt), vacons(Va2, Val)) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val)))).
tff('matchingAList2', axiom, ![Vtt: vTType, Val: vAList] : (((Vtt != vttempty | Val != vaempty) & (![Vtt: vTType, Va10: vAName, Vf0: vFType, Vtt0: vTType] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Val: vAList, Va20: vAName, Val0: vAList] : Val != vacons(Va20, Val0))) => (~vmatchingAList(Vtt, Val)))).
tff('welltypedtable0', axiom, ![Vtt: vTType, Val: vAList, Vt: vRawTable] : (vwelltypedtable(Vtt, vtable(Val, Vt)) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))).
tff('rawType0', axiom, vrawType(vttempty) = vrtempty).
tff('rawType1', axiom, ![Va: vAName, Vft: vFType, Vtt: vTType] : vrawType(vttcons(vctype(Va, Vft), Vtt)) = vrtcons(Vft, vrawType(Vtt))).
tff('welltypedRawtable0', axiom, ![Vrt: vRawType] : vwelltypedRawtable(Vrt, vtempty)).
tff('welltypedRawtable1', axiom, ![Vrt: vRawType, Vr: vRow, Vt: vRawTable] : (vwelltypedRawtable(Vrt, vtcons(Vr, Vt)) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))).
tff('welltypedRow0', axiom, vwelltypedRow(vrtempty, vrempty)).
tff('welltypedRow1', axiom, ![Vft: vFType, Vrt: vRawType, Vv: vFVal, Vr: vRow] : (vwelltypedRow(vrtcons(Vft, Vrt), vrcons(Vv, Vr)) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))).
tff('welltypedRow2', axiom, ![Vrt: vRawType, Vr: vRow] : (((Vrt != vrtempty | Vr != vrempty) & (![Vrt: vRawType, Vft0: vFType, Vrt0: vRawType] : Vrt != vrtcons(Vft0, Vrt0) | ![Vr: vRow, Vv0: vFVal, Vr0: vRow] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(Vrt, Vr)))).
tff('EQ-noTable', axiom, $true).
tff('EQ-someTable', axiom, ![VTable0: vTable, VTable1: vTable] : (VTable0 = VTable1 <=> vsomeTable(VTable0) = vsomeTable(VTable1))).
tff('DIFF-someTable-noTable', axiom, ![VTable0: vTable] : vsomeTable(VTable0) != vnoTable).
tff('isSomeTable0', axiom, (~visSomeTable(vnoTable))).
tff('isSomeTable1', axiom, ![Vt: vTable] : visSomeTable(vsomeTable(Vt))).
tff('getSomeTable0', axiom, ![Vt: vTable] : vgetSomeTable(vsomeTable(Vt)) = Vt).
tff('EQ-emptyStore', axiom, $true).
tff('EQ-bindStore', axiom, ![VTable1: vTable, VTStore1: vTStore, VTName0: vTName, VTStore0: vTStore, VTName1: vTName, VTable0: vTable] : ((VTName0 = VTName1 & (VTable0 = VTable1 & VTStore0 = VTStore1)) <=> vbindStore(VTName0, VTable0, VTStore0) = vbindStore(VTName1, VTable1, VTStore1))).
tff('DIFF-bindStore-emptyStore', axiom, ![VTName0: vTName, VTable0: vTable, VTStore0: vTStore] : vbindStore(VTName0, VTable0, VTStore0) != vemptyStore).
tff('lookupStore0', axiom, ![Vn: vTName] : vlookupStore(Vn, vemptyStore) = vnoTable).
tff('lookupStore1', axiom, ![Vm: vTName, Vt: vTable, VTS: vTStore] : vlookupStore(Vm, vbindStore(Vm, Vt, VTS)) = vsomeTable(Vt)).
tff('lookupStore2', axiom, ![Vn: vTName, Vm: vTName, Vt: vTable, VTS: vTStore] : (Vn != Vm => vlookupStore(Vn, vbindStore(Vm, Vt, VTS)) = vlookupStore(Vn, VTS))).
tff('EQ-VEquals', axiom, ![VAName0: vAName, VAName1: vAName, VFVal0: vFVal, VFVal1: vFVal] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVEquals(VAName0, VFVal0) = vVEquals(VAName1, VFVal1))).
tff('EQ-VGreater', axiom, ![VAName0: vAName, VAName1: vAName, VFVal0: vFVal, VFVal1: vFVal] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVGreater(VAName0, VFVal0) = vVGreater(VAName1, VFVal1))).
tff('DIFF-VGreater-VEquals', axiom, ![VAName0: vAName, VFVal0: vFVal, VAName1: vAName, VFVal1: vFVal] : vVGreater(VAName0, VFVal0) != vVEquals(VAName1, VFVal1)).
tff('EQ-VSmaller', axiom, ![VAName0: vAName, VAName1: vAName, VFVal0: vFVal, VFVal1: vFVal] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVSmaller(VAName0, VFVal0) = vVSmaller(VAName1, VFVal1))).
tff('DIFF-VSmaller-VGreater', axiom, ![VAName0: vAName, VFVal0: vFVal, VAName1: vAName, VFVal1: vFVal] : vVSmaller(VAName0, VFVal0) != vVGreater(VAName1, VFVal1)).
tff('DIFF-VSmaller-VEquals', axiom, ![VAName0: vAName, VFVal0: vFVal, VAName1: vAName, VFVal1: vFVal] : vVSmaller(VAName0, VFVal0) != vVEquals(VAName1, VFVal1)).
tff('EQ-Ref', axiom, ![VTName0: vTName, VTName1: vTName] : (VTName0 = VTName1 <=> vRef(VTName0) = vRef(VTName1))).
tff('EQ-Tvalue', axiom, ![VTable0: vTable, VTable1: vTable] : (VTable0 = VTable1 <=> vTvalue(VTable0) = vTvalue(VTable1))).
tff('EQ-SelectAllFrom', axiom, ![VTRef0: vTRef, VTRef1: vTRef] : (VTRef0 = VTRef1 <=> vSelectAllFrom(VTRef0) = vSelectAllFrom(VTRef1))).
tff('DIFF-SelectAllFrom-Tvalue', axiom, ![VTRef0: vTRef, VTable0: vTable] : vSelectAllFrom(VTRef0) != vTvalue(VTable0)).
tff('EQ-SelectSomeFrom', axiom, ![VAList0: vAList, VAList1: vAList, VTRef0: vTRef, VTRef1: vTRef] : ((VAList0 = VAList1 & VTRef0 = VTRef1) <=> vSelectSomeFrom(VAList0, VTRef0) = vSelectSomeFrom(VAList1, VTRef1))).
tff('DIFF-SelectSomeFrom-SelectAllFrom', axiom, ![VAList0: vAList, VTRef0: vTRef, VTRef1: vTRef] : vSelectSomeFrom(VAList0, VTRef0) != vSelectAllFrom(VTRef1)).
tff('DIFF-SelectSomeFrom-Tvalue', axiom, ![VAList0: vAList, VTRef0: vTRef, VTable0: vTable] : vSelectSomeFrom(VAList0, VTRef0) != vTvalue(VTable0)).
tff('EQ-SelectAllFromWhere', axiom, ![VTRef0: vTRef, VTRef1: vTRef, VPred0: vPred, VPred1: vPred] : ((VTRef0 = VTRef1 & VPred0 = VPred1) <=> vSelectAllFromWhere(VTRef0, VPred0) = vSelectAllFromWhere(VTRef1, VPred1))).
tff('DIFF-SelectAllFromWhere-SelectSomeFrom', axiom, ![VTRef0: vTRef, VPred0: vPred, VAList0: vAList, VTRef1: vTRef] : vSelectAllFromWhere(VTRef0, VPred0) != vSelectSomeFrom(VAList0, VTRef1)).
tff('DIFF-SelectAllFromWhere-SelectAllFrom', axiom, ![VTRef0: vTRef, VPred0: vPred, VTRef1: vTRef] : vSelectAllFromWhere(VTRef0, VPred0) != vSelectAllFrom(VTRef1)).
tff('DIFF-SelectAllFromWhere-Tvalue', axiom, ![VTRef0: vTRef, VPred0: vPred, VTable0: vTable] : vSelectAllFromWhere(VTRef0, VPred0) != vTvalue(VTable0)).
tff('EQ-SelectSomeFromWhere', axiom, ![VAList0: vAList, VPred0: vPred, VPred1: vPred, VAList1: vAList, VTRef1: vTRef, VTRef0: vTRef] : ((VAList0 = VAList1 & (VTRef0 = VTRef1 & VPred0 = VPred1)) <=> vSelectSomeFromWhere(VAList0, VTRef0, VPred0) = vSelectSomeFromWhere(VAList1, VTRef1, VPred1))).
tff('DIFF-SelectSomeFromWhere-SelectAllFromWhere', axiom, ![VAList0: vAList, VPred0: vPred, VPred1: vPred, VTRef1: vTRef, VTRef0: vTRef] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vSelectAllFromWhere(VTRef1, VPred1)).
tff('DIFF-SelectSomeFromWhere-SelectSomeFrom', axiom, ![VAList0: vAList, VPred0: vPred, VAList1: vAList, VTRef1: vTRef, VTRef0: vTRef] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vSelectSomeFrom(VAList1, VTRef1)).
tff('DIFF-SelectSomeFromWhere-SelectAllFrom', axiom, ![VAList0: vAList, VTRef0: vTRef, VPred0: vPred, VTRef1: vTRef] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vSelectAllFrom(VTRef1)).
tff('DIFF-SelectSomeFromWhere-Tvalue', axiom, ![VAList0: vAList, VTRef0: vTRef, VPred0: vPred, VTable0: vTable] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vTvalue(VTable0)).
tff('EQ-Union', axiom, ![VQuery0: vQuery, VQuery2: vQuery, VQuery1: vQuery, VQuery3: vQuery] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vUnion(VQuery0, VQuery1) = vUnion(VQuery2, VQuery3))).
tff('DIFF-Union-SelectSomeFromWhere', axiom, ![VAList0: vAList, VPred0: vPred, VQuery1: vQuery, VQuery0: vQuery, VTRef0: vTRef] : vUnion(VQuery0, VQuery1) != vSelectSomeFromWhere(VAList0, VTRef0, VPred0)).
tff('DIFF-Union-SelectAllFromWhere', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VTRef0: vTRef, VPred0: vPred] : vUnion(VQuery0, VQuery1) != vSelectAllFromWhere(VTRef0, VPred0)).
tff('DIFF-Union-SelectSomeFrom', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VAList0: vAList, VTRef0: vTRef] : vUnion(VQuery0, VQuery1) != vSelectSomeFrom(VAList0, VTRef0)).
tff('DIFF-Union-SelectAllFrom', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VTRef0: vTRef] : vUnion(VQuery0, VQuery1) != vSelectAllFrom(VTRef0)).
tff('DIFF-Union-Tvalue', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VTable0: vTable] : vUnion(VQuery0, VQuery1) != vTvalue(VTable0)).
tff('EQ-Intersection', axiom, ![VQuery0: vQuery, VQuery2: vQuery, VQuery1: vQuery, VQuery3: vQuery] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vIntersection(VQuery0, VQuery1) = vIntersection(VQuery2, VQuery3))).
tff('DIFF-Intersection-Union', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VQuery2: vQuery, VQuery3: vQuery] : vIntersection(VQuery0, VQuery1) != vUnion(VQuery2, VQuery3)).
tff('DIFF-Intersection-SelectSomeFromWhere', axiom, ![VAList0: vAList, VPred0: vPred, VQuery1: vQuery, VQuery0: vQuery, VTRef0: vTRef] : vIntersection(VQuery0, VQuery1) != vSelectSomeFromWhere(VAList0, VTRef0, VPred0)).
tff('DIFF-Intersection-SelectAllFromWhere', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VTRef0: vTRef, VPred0: vPred] : vIntersection(VQuery0, VQuery1) != vSelectAllFromWhere(VTRef0, VPred0)).
tff('DIFF-Intersection-SelectSomeFrom', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VAList0: vAList, VTRef0: vTRef] : vIntersection(VQuery0, VQuery1) != vSelectSomeFrom(VAList0, VTRef0)).
tff('DIFF-Intersection-SelectAllFrom', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VTRef0: vTRef] : vIntersection(VQuery0, VQuery1) != vSelectAllFrom(VTRef0)).
tff('DIFF-Intersection-Tvalue', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VTable0: vTable] : vIntersection(VQuery0, VQuery1) != vTvalue(VTable0)).
tff('EQ-Difference', axiom, ![VQuery0: vQuery, VQuery2: vQuery, VQuery1: vQuery, VQuery3: vQuery] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vDifference(VQuery0, VQuery1) = vDifference(VQuery2, VQuery3))).
tff('DIFF-Difference-Intersection', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VQuery2: vQuery, VQuery3: vQuery] : vDifference(VQuery0, VQuery1) != vIntersection(VQuery2, VQuery3)).
tff('DIFF-Difference-Union', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VQuery2: vQuery, VQuery3: vQuery] : vDifference(VQuery0, VQuery1) != vUnion(VQuery2, VQuery3)).
tff('DIFF-Difference-SelectSomeFromWhere', axiom, ![VAList0: vAList, VPred0: vPred, VQuery1: vQuery, VQuery0: vQuery, VTRef0: vTRef] : vDifference(VQuery0, VQuery1) != vSelectSomeFromWhere(VAList0, VTRef0, VPred0)).
tff('DIFF-Difference-SelectAllFromWhere', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VTRef0: vTRef, VPred0: vPred] : vDifference(VQuery0, VQuery1) != vSelectAllFromWhere(VTRef0, VPred0)).
tff('DIFF-Difference-SelectSomeFrom', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VAList0: vAList, VTRef0: vTRef] : vDifference(VQuery0, VQuery1) != vSelectSomeFrom(VAList0, VTRef0)).
tff('DIFF-Difference-SelectAllFrom', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VTRef0: vTRef] : vDifference(VQuery0, VQuery1) != vSelectAllFrom(VTRef0)).
tff('DIFF-Difference-Tvalue', axiom, ![VQuery0: vQuery, VQuery1: vQuery, VTable0: vTable] : vDifference(VQuery0, VQuery1) != vTvalue(VTable0)).
tff('isValue0', axiom, ![Vt: vTable] : visValue(vTvalue(Vt))).
tff('isValue1', axiom, ![Vn: vTRef] : (~visValue(vSelectAllFrom(Vn)))).
tff('isValue2', axiom, ![Val: vAList, Vtr: vTRef] : (~visValue(vSelectSomeFrom(Val, Vtr)))).
tff('isValue3', axiom, ![Vtr: vTRef, Vp: vPred] : (~visValue(vSelectAllFromWhere(Vtr, Vp)))).
tff('isValue4', axiom, ![Val: vAList, Vtr: vTRef, Vp: vPred] : (~visValue(vSelectSomeFromWhere(Val, Vtr, Vp)))).
tff('isValue5', axiom, ![Vq1: vQuery, Vq2: vQuery] : (~visValue(vUnion(Vq1, Vq2)))).
tff('isValue6', axiom, ![Vsql1: vQuery, Vsql2: vQuery] : (~visValue(vIntersection(Vsql1, Vsql2)))).
tff('isValue7', axiom, ![Vsql1: vQuery, Vsql2: vQuery] : (~visValue(vDifference(Vsql1, Vsql2)))).
tff('EQ-noTType', axiom, $true).
tff('EQ-someTType', axiom, ![VTType0: vTType, VTType1: vTType] : (VTType0 = VTType1 <=> vsomeTType(VTType0) = vsomeTType(VTType1))).
tff('DIFF-someTType-noTType', axiom, ![VTType0: vTType] : vsomeTType(VTType0) != vnoTType).
tff('isSomeTType0', axiom, (~visSomeTType(vnoTType))).
tff('isSomeTType1', axiom, ![Vt: vTType] : visSomeTType(vsomeTType(Vt))).
tff('getSomeTType0', axiom, ![Vt: vTType] : vgetSomeTType(vsomeTType(Vt)) = Vt).
tff('EQ-emptyContext', axiom, $true).
tff('EQ-bindContext', axiom, ![VTTContext0: vTTContext, VTTContext1: vTTContext, VTName0: vTName, VTType0: vTType, VTType1: vTType, VTName1: vTName] : ((VTName0 = VTName1 & (VTType0 = VTType1 & VTTContext0 = VTTContext1)) <=> vbindContext(VTName0, VTType0, VTTContext0) = vbindContext(VTName1, VTType1, VTTContext1))).
tff('DIFF-bindContext-emptyContext', axiom, ![VTName0: vTName, VTType0: vTType, VTTContext0: vTTContext] : vbindContext(VTName0, VTType0, VTTContext0) != vemptyContext).
tff('lookupContext0', axiom, ![Vtn: vTName] : vlookupContext(Vtn, vemptyContext) = vnoTType).
tff('lookupContext1', axiom, ![Vtm: vTName, Vtt: vTType, VTTC: vTTContext] : vlookupContext(Vtm, vbindContext(Vtm, Vtt, VTTC)) = vsomeTType(Vtt)).
tff('lookupContext2', axiom, ![Vtn: vTName, Vtm: vTName, Vtt: vTType, VTTC: vTTContext] : (Vtn != Vtm => vlookupContext(Vtn, vbindContext(Vtm, Vtt, VTTC)) = vlookupContext(Vtn, VTTC))).
tff('EQ-noFType', axiom, $true).
tff('EQ-someFType', axiom, ![VFType0: vFType, VFType1: vFType] : (VFType0 = VFType1 <=> vsomeFType(VFType0) = vsomeFType(VFType1))).
tff('DIFF-someFType-noFType', axiom, ![VFType0: vFType] : vsomeFType(VFType0) != vnoFType).
tff('isSomeFType0', axiom, (~visSomeFType(vnoFType))).
tff('isSomeFType1', axiom, ![Va: vFType] : visSomeFType(vsomeFType(Va))).
tff('getSomeFType0', axiom, ![Va: vFType] : vgetSomeFType(vsomeFType(Va)) = Va).
tff('findColType0', axiom, ![Van: vAName] : vfindColType(Van, vttempty) = vnoFType).
tff('findColType1', axiom, ![Va: vAName, Vft: vFType, Vttr: vTType] : vfindColType(Va, vttcons(vctype(Va, Vft), Vttr)) = vsomeFType(Vft)).
tff('findColType2', axiom, ![Van: vAName, Va: vAName, Vft: vFType, Vttr: vTType] : (Van != Va => vfindColType(Van, vttcons(vctype(Va, Vft), Vttr)) = vfindColType(Van, Vttr))).
tff('projectType0', axiom, ![Vtt: vTType] : vprojectType(vaempty, Vtt) = vsomeTType(vttempty)).
tff('projectType1', axiom, ![Va: vAName, Vtt: vTType, Valr: vAList] : ((visSomeFType(vfindColType(Va, Vtt)) & visSomeTType(vprojectType(Valr, Vtt))) => vprojectType(vacons(Va, Valr), Vtt) = vsomeTType(vttcons(vctype(Va, vgetSomeFType(vfindColType(Va, Vtt))), vgetSomeTType(vprojectType(Valr, Vtt)))))).
tff('projectType2', axiom, ![Va: vAName, Vtt: vTType, Valr: vAList] : ((~(visSomeFType(vfindColType(Va, Vtt)) & visSomeTType(vprojectType(Valr, Vtt)))) => vprojectType(vacons(Va, Valr), Vtt) = vnoTType)).
tff('ctypeIn0', axiom, ![Va: vAName, Vft: vFType] : (~vctypeIn(Va, Vft, vttempty))).
tff('ctypeIn1', axiom, ![Va: vAName, Vft2: vFType, Vttr: vTType, Vft: vFType, Va2: vAName] : (vctypeIn(Va, Vft, vttcons(vctype(Va2, Vft2), Vttr)) <=> ((Va = Va2 & Vft = Vft2) | vctypeIn(Va, Vft, Vttr)))).
tff('checkPValidity0', axiom, ![Va: vAName, Vfv: vFVal, Vtt: vTType] : (vcheckPValidity(vVEquals(Va, Vfv), Vtt) <=> vctypeIn(Va, vfieldType(Vfv), Vtt))).
tff('checkPValidity1', axiom, ![Va: vAName, Vfv: vFVal, Vtt: vTType] : (vcheckPValidity(vVGreater(Va, Vfv), Vtt) <=> vctypeIn(Va, vfieldType(Vfv), Vtt))).
tff('checkPValidity2', axiom, ![Va: vAName, Vfv: vFVal, Vtt: vTType] : (vcheckPValidity(vVSmaller(Va, Vfv), Vtt) <=> vctypeIn(Va, vfieldType(Vfv), Vtt))).
tff('T-TTContext-Duplicate', axiom, ![VTx: vTType, Vy: vTName, Ve: vQuery, VC: vTTContext, VTy: vTType, VT: vTType] : (vtcheck(vbindContext(Vy, VTx, vbindContext(Vy, VTy, VC)), Ve, VT) => vtcheck(vbindContext(Vy, VTx, VC), Ve, VT))).
tff('T-TTContext-Swap', axiom, ![Vx: vTName, VTx: vTType, Vy: vTName, Ve: vQuery, VC: vTTContext, VTy: vTType, VT: vTType] : ((Vx != Vy & vtcheck(vbindContext(Vx, VTx, vbindContext(Vy, VTy, VC)), Ve, VT)) => vtcheck(vbindContext(Vy, VTy, vbindContext(Vx, VTx, VC)), Ve, VT))).
tff('T-Tvalue', axiom, ![VTT: vTType, Val: vAList, Vrt: vRawTable, VTTC: vTTContext] : (vwelltypedtable(VTT, vtable(Val, Vrt)) => vtcheck(VTTC, vTvalue(vtable(Val, Vrt)), VTT))).
tff('T-SelectAllFrom', axiom, ![Vtn: vTName, VTTC: vTTContext, VTT: vTType] : (vlookupContext(Vtn, VTTC) = vsomeTType(VTT) => vtcheck(VTTC, vSelectAllFrom(vRef(Vtn)), VTT))).
tff('T-SelectSomeFrom', axiom, ![VTT: vTType, Vtn: vTName, Val: vAList, VTT1: vTType, VTTC: vTTContext] : ((vlookupContext(Vtn, VTTC) = vsomeTType(VTT1) & vprojectType(Val, VTT1) = vsomeTType(VTT)) => vtcheck(VTTC, vSelectSomeFrom(Val, vRef(Vtn)), VTT))).
tff('T-SelectAllFromWhere', axiom, ![Vtn: vTName, VTTC: vTTContext, VTT: vTType, Vp: vPred] : ((vlookupContext(Vtn, VTTC) = vsomeTType(VTT) & vcheckPValidity(Vp, VTT)) => vtcheck(VTTC, vSelectAllFromWhere(vRef(Vtn), Vp), VTT))).
tff('T-SelectSomeFromWhere', axiom, ![Vp: vPred, VTT: vTType, Vtn: vTName, Val: vAList, VTT1: vTType, VTTC: vTTContext] : ((vlookupContext(Vtn, VTTC) = vsomeTType(VTT1) & vcheckPValidity(Vp, VTT1) & vprojectType(Val, VTT1) = vsomeTType(VTT)) => vtcheck(VTTC, vSelectSomeFromWhere(Val, vRef(Vtn), Vp), VTT))).
tff('T-Union', axiom, ![VTTC: vTTContext, Vq1: vQuery, VTT: vTType, Vq2: vQuery] : ((vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, vUnion(Vq1, Vq2), VTT))).
tff('T-Intersection', axiom, ![VTTC: vTTContext, Vq1: vQuery, VTT: vTType, Vq2: vQuery] : ((vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, vIntersection(Vq1, Vq2), VTT))).
tff('T-Difference', axiom, ![VTTC: vTTContext, Vq1: vQuery, VTT: vTType, Vq2: vQuery] : ((vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, vDifference(Vq1, Vq2), VTT))).
tff('false-goal', conjecture, ($true => $false)).
