fof('EQ-ctype', axiom, ![VAName0, VAName1, VFType0, VFType1] : ($true => ((VAName0 = VAName1 & VFType0 = VFType1) <=> vctype(VAName0, VFType0) = vctype(VAName1, VFType1)))).
fof('EQ-aempty', axiom, ($true => ($true <=> vaempty = vaempty))).
fof('EQ-acons', axiom, ![VAName0, VAName1, VAList0, VAList1] : ($true => ((VAName0 = VAName1 & VAList0 = VAList1) <=> vacons(VAName0, VAList0) = vacons(VAName1, VAList1)))).
fof('EQ-ttempty', axiom, ($true => ($true <=> vttempty = vttempty))).
fof('EQ-ttcons', axiom, ![VCType0, VCType1, VTType0, VTType1] : ($true => ((VCType0 = VCType1 & VTType0 = VTType1) <=> vttcons(VCType0, VTType0) = vttcons(VCType1, VTType1)))).
fof('EQ-rtempty', axiom, ($true => ($true <=> vrtempty = vrtempty))).
fof('EQ-rtcons', axiom, ![VFType0, VFType1, VRawType0, VRawType1] : ($true => ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> vrtcons(VFType0, VRawType0) = vrtcons(VFType1, VRawType1)))).
fof('EQ-rempty', axiom, ($true => ($true <=> vrempty = vrempty))).
fof('EQ-rcons', axiom, ![VFVal0, VFVal1, VRow0, VRow1] : ($true => ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> vrcons(VFVal0, VRow0) = vrcons(VFVal1, VRow1)))).
fof('EQ-tempty', axiom, ($true => ($true <=> vtempty = vtempty))).
fof('EQ-tcons', axiom, ![VRow0, VRow1, VRawTable0, VRawTable1] : ($true => ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> vtcons(VRow0, VRawTable0) = vtcons(VRow1, VRawTable1)))).
fof('EQ-table', axiom, ![VAList0, VAList1, VRawTable0, VRawTable1] : ($true => ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> vtable(VAList0, VRawTable0) = vtable(VAList1, VRawTable1)))).
fof('EQ-noRawTable', axiom, ($true => ($true <=> vnoRawTable = vnoRawTable))).
fof('EQ-someRawTable', axiom, ![VRawTable0, VRawTable1] : ($true => (VRawTable0 = VRawTable1 <=> vsomeRawTable(VRawTable0) = vsomeRawTable(VRawTable1)))).
fof('DIFF-aempty-acons', axiom, ![VAName0, VAList0] : ($true => vaempty != vacons(VAName0, VAList0))).
fof('DIFF-ttempty-ttcons', axiom, ![VCType0, VTType0] : ($true => vttempty != vttcons(VCType0, VTType0))).
fof('DIFF-rtempty-rtcons', axiom, ![VFType0, VRawType0] : ($true => vrtempty != vrtcons(VFType0, VRawType0))).
fof('DIFF-rempty-rcons', axiom, ![VFVal0, VRow0] : ($true => vrempty != vrcons(VFVal0, VRow0))).
fof('DIFF-tempty-tcons', axiom, ![VRow0, VRawTable0] : ($true => vtempty != vtcons(VRow0, VRawTable0))).
fof('DIFF-noRawTable-someRawTable', axiom, ![VRawTable0] : ($true => vnoRawTable != vsomeRawTable(VRawTable0))).
fof('getRaw0', axiom, ![VTable0, Val, Vrt, VRESULT] : ((VTable0 = vtable(Val, Vrt) & VRESULT = Vrt) => vgetRaw(VTable0) = VRESULT)).
fof('getRaw-INV', axiom, ![VTable0, VRESULT] : (vgetRaw(VTable0) = VRESULT => ?[Val, Vrt] : (VTable0 = vtable(Val, Vrt) & VRESULT = Vrt))).
fof('getAL0', axiom, ![VTable0, Val, Vrt, VRESULT] : ((VTable0 = vtable(Val, Vrt) & VRESULT = Val) => vgetAL(VTable0) = VRESULT)).
fof('getAL-INV', axiom, ![VTable0, VRESULT] : (vgetAL(VTable0) = VRESULT => ?[Val, Vrt] : (VTable0 = vtable(Val, Vrt) & VRESULT = Val))).
fof('matchingAList0', axiom, ![VTType0, VAList0] : ((VTType0 = vttempty & VAList0 = vaempty) => vmatchingAList(VTType0, VAList0))).
fof('matchingAList1', axiom, ![VAList0, Va1, VTType0, Va2, Val, Vf, Vtt] : ((VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val)) => (vmatchingAList(VTType0, VAList0) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val))))).
fof('matchingAList2', axiom, ![VVAR0, Vtt, VVAR1, Val] : ((VVAR0 = Vtt & VVAR1 = Val & (VVAR0 != vttempty | VVAR1 != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0))) => (~vmatchingAList(VVAR0, VVAR1)))).
fof('matchingAList-true-INV', axiom, ![VTType0, VAList0] : (vmatchingAList(VTType0, VAList0) => ((VTType0 = vttempty & VAList0 = vaempty) | ?[Va1, Va2, Val, Vf, Vtt] : (VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val) & (Va1 = Va2 & vmatchingAList(Vtt, Val)))))).
fof('matchingAList-false-INV', axiom, ![VTType0, VAList0] : ((~vmatchingAList(VTType0, VAList0)) => (?[Va1, Va2, Val, Vf, Vtt] : (VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val) & (~(Va1 = Va2 & vmatchingAList(Vtt, Val)))) | ?[Vtt, Val] : ((Vtt != vttempty | Val != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0)) & VTType0 = Vtt & VAList0 = Val)))).
fof('welltypedtable0', axiom, ![Vt, VTType0, Val, Vtt, VTable0] : ((VTType0 = Vtt & VTable0 = vtable(Val, Vt)) => (vwelltypedtable(VTType0, VTable0) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt))))).
fof('welltypedtable-true-INV', axiom, ![VTType0, VTable0] : (vwelltypedtable(VTType0, VTable0) => ?[Vt, Val, Vtt] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt))))).
fof('welltypedtable-false-INV', axiom, ![VTType0, VTable0] : ((~vwelltypedtable(VTType0, VTable0)) => ?[Vt, Val, Vtt] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (~(vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))))).
fof('rawType0', axiom, ![VTType0, VRESULT] : ((VTType0 = vttempty & VRESULT = vrtempty) => vrawType(VTType0) = VRESULT)).
fof('rawType1', axiom, ![Va, Vft, VTType0, VRESULT, Vtt] : ((VTType0 = vttcons(vctype(Va, Vft), Vtt) & VRESULT = vrtcons(Vft, vrawType(Vtt))) => vrawType(VTType0) = VRESULT)).
fof('rawType-INV', axiom, ![VTType0, VRESULT] : (vrawType(VTType0) = VRESULT => ((VTType0 = vttempty & VRESULT = vrtempty) | ?[Va, Vft, Vtt] : (VTType0 = vttcons(vctype(Va, Vft), Vtt) & VRESULT = vrtcons(Vft, vrawType(Vtt)))))).
fof('welltypedRawtable0', axiom, ![VRawType0, Vrt, VRawTable0] : ((VRawType0 = Vrt & VRawTable0 = vtempty) => vwelltypedRawtable(VRawType0, VRawTable0))).
fof('welltypedRawtable1', axiom, ![Vt, Vrt, VRawTable0, VRawType0, Vr] : ((VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt)) => (vwelltypedRawtable(VRawType0, VRawTable0) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt))))).
fof('welltypedRawtable-true-INV', axiom, ![VRawType0, VRawTable0] : (vwelltypedRawtable(VRawType0, VRawTable0) => (?[Vrt] : (VRawType0 = Vrt & VRawTable0 = vtempty) | ?[Vt, Vrt, Vr] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))))).
fof('welltypedRawtable-false-INV', axiom, ![VRawType0, VRawTable0] : ((~vwelltypedRawtable(VRawType0, VRawTable0)) => ?[Vt, Vrt, Vr] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (~(vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))))).
fof('welltypedRow0', axiom, ![VRawType0, VRow0] : ((VRawType0 = vrtempty & VRow0 = vrempty) => vwelltypedRow(VRawType0, VRow0))).
fof('welltypedRow1', axiom, ![Vv, VRow0, Vrt, Vft, VRawType0, Vr] : ((VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr)) => (vwelltypedRow(VRawType0, VRow0) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr))))).
fof('welltypedRow2', axiom, ![VVAR0, Vrt, VVAR1, Vr] : ((VVAR0 = Vrt & VVAR1 = Vr & (VVAR0 != vrtempty | VVAR1 != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(VVAR0, VVAR1)))).
fof('welltypedRow-true-INV', axiom, ![VRawType0, VRow0] : (vwelltypedRow(VRawType0, VRow0) => ((VRawType0 = vrtempty & VRow0 = vrempty) | ?[Vv, Vrt, Vft, Vr] : (VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr) & (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))))).
fof('welltypedRow-false-INV', axiom, ![VRawType0, VRow0] : ((~vwelltypedRow(VRawType0, VRow0)) => (?[Vv, Vrt, Vft, Vr] : (VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr) & (~(vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))) | ?[Vrt, Vr] : ((Vrt != vrtempty | Vr != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0)) & VRawType0 = Vrt & VRow0 = Vr)))).
fof('rowIn0', axiom, ![VRow0, Vr1, VRawTable0] : ((VRow0 = Vr1 & VRawTable0 = vtempty) => (~vrowIn(VRow0, VRawTable0)))).
fof('rowIn1', axiom, ![Vr2, Vr1, VRow0, Vrt, VRawTable0] : ((VRow0 = Vr1 & VRawTable0 = vtcons(Vr2, Vrt)) => (vrowIn(VRow0, VRawTable0) <=> (Vr1 = Vr2 | vrowIn(Vr1, Vrt))))).
fof('rowIn-true-INV', axiom, ![VRow0, VRawTable0] : (vrowIn(VRow0, VRawTable0) => ?[Vr2, Vr1, Vrt] : (VRow0 = Vr1 & VRawTable0 = vtcons(Vr2, Vrt) & (Vr1 = Vr2 | vrowIn(Vr1, Vrt))))).
fof('rowIn-false-INV', axiom, ![VRow0, VRawTable0] : ((~vrowIn(VRow0, VRawTable0)) => (?[Vr1] : (VRow0 = Vr1 & VRawTable0 = vtempty) | ?[Vr2, Vr1, Vrt] : (VRow0 = Vr1 & VRawTable0 = vtcons(Vr2, Vrt) & (~(Vr1 = Vr2 | vrowIn(Vr1, Vrt))))))).
fof('projectFirstRaw0', axiom, ![VRawTable0, VRESULT] : ((VRawTable0 = vtempty & VRESULT = vtempty) => vprojectFirstRaw(VRawTable0) = VRESULT)).
fof('projectFirstRaw1', axiom, ![VRawTable0, Vrt, VRESULT] : ((VRawTable0 = vtcons(vrempty, Vrt) & VRESULT = vtcons(vrempty, vprojectFirstRaw(Vrt))) => vprojectFirstRaw(VRawTable0) = VRESULT)).
fof('projectFirstRaw2', axiom, ![Vrt, VRawTable0, Vr, VRESULT, Vf] : ((VRawTable0 = vtcons(vrcons(Vf, Vr), Vrt) & VRESULT = vtcons(vrcons(Vf, vrempty), vprojectFirstRaw(Vrt))) => vprojectFirstRaw(VRawTable0) = VRESULT)).
fof('projectFirstRaw-INV', axiom, ![VRawTable0, VRESULT] : (vprojectFirstRaw(VRawTable0) = VRESULT => ((VRawTable0 = vtempty & VRESULT = vtempty) | ?[Vrt] : (VRawTable0 = vtcons(vrempty, Vrt) & VRESULT = vtcons(vrempty, vprojectFirstRaw(Vrt))) | ?[Vrt, Vr, Vf] : (VRawTable0 = vtcons(vrcons(Vf, Vr), Vrt) & VRESULT = vtcons(vrcons(Vf, vrempty), vprojectFirstRaw(Vrt)))))).
fof('dropFirstColRaw0', axiom, ![VRawTable0, VRESULT] : ((VRawTable0 = vtempty & VRESULT = vtempty) => vdropFirstColRaw(VRawTable0) = VRESULT)).
fof('dropFirstColRaw1', axiom, ![VRawTable0, Vrt, VRESULT] : ((VRawTable0 = vtcons(vrempty, Vrt) & VRESULT = vtcons(vrempty, vdropFirstColRaw(Vrt))) => vdropFirstColRaw(VRawTable0) = VRESULT)).
fof('dropFirstColRaw2', axiom, ![Vrt, VRawTable0, Vr, VRESULT, Vf] : ((VRawTable0 = vtcons(vrcons(Vf, Vr), Vrt) & VRESULT = vtcons(Vr, vdropFirstColRaw(Vrt))) => vdropFirstColRaw(VRawTable0) = VRESULT)).
fof('dropFirstColRaw-INV', axiom, ![VRawTable0, VRESULT] : (vdropFirstColRaw(VRawTable0) = VRESULT => ((VRawTable0 = vtempty & VRESULT = vtempty) | ?[Vrt] : (VRawTable0 = vtcons(vrempty, Vrt) & VRESULT = vtcons(vrempty, vdropFirstColRaw(Vrt))) | ?[Vrt, Vr, Vf] : (VRawTable0 = vtcons(vrcons(Vf, Vr), Vrt) & VRESULT = vtcons(Vr, vdropFirstColRaw(Vrt)))))).
fof('isSomeRawTable0', axiom, ![VOptRawTable0] : (VOptRawTable0 = vnoRawTable => (~visSomeRawTable(VOptRawTable0)))).
fof('isSomeRawTable1', axiom, ![VOptRawTable0, Vt] : (VOptRawTable0 = vsomeRawTable(Vt) => visSomeRawTable(VOptRawTable0))).
fof('isSomeRawTable-true-INV', axiom, ![VOptRawTable0] : (visSomeRawTable(VOptRawTable0) => ?[Vt] : VOptRawTable0 = vsomeRawTable(Vt))).
fof('isSomeRawTable-false-INV', axiom, ![VOptRawTable0] : ((~visSomeRawTable(VOptRawTable0)) => VOptRawTable0 = vnoRawTable)).
fof('getSomeRawTable0', axiom, ![VOptRawTable0, Vt, VRESULT] : ((VOptRawTable0 = vsomeRawTable(Vt) & VRESULT = Vt) => vgetSomeRawTable(VOptRawTable0) = VRESULT)).
fof('attachColToFrontRaw0', axiom, ![VRawTable0, VRESULT] : ((VRawTable0 = vtempty & VRESULT = vsomeRawTable(vtempty)) => vattachColToFrontRaw(VRawTable0, VRawTable0) = VRESULT)).
fof('attachColToFrontRaw1', axiom, ![Vrt1, Vrest, VRawTable0, VRawTable1, Vr, VRESULT, Vf, Vrt2] : ((VRawTable0 = vtcons(vrcons(Vf, vrempty), Vrt1) & VRawTable1 = vtcons(Vr, Vrt2) & VRESULT = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(Vrest))) & Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & visSomeRawTable(Vrest)) => vattachColToFrontRaw(VRawTable0, VRawTable1) = VRESULT)).
fof('attachColToFrontRaw2', axiom, ![Vrt1, Vrest, VRawTable0, VRawTable1, Vr, VRESULT, Vf, Vrt2] : ((VRawTable0 = vtcons(vrcons(Vf, vrempty), Vrt1) & VRawTable1 = vtcons(Vr, Vrt2) & VRESULT = vnoRawTable & Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & (~visSomeRawTable(Vrest))) => vattachColToFrontRaw(VRawTable0, VRawTable1) = VRESULT)).
fof('attachColToFrontRaw3', axiom, ![Vrt1, VRawTable0, VRawTable1, VRESULT, Vrt2] : ((VRawTable0 = Vrt1 & VRawTable1 = Vrt2 & VRESULT = vnoRawTable & (Vrt1 != vtempty | Vrt2 != vtempty) & (![Vf0, Vrt10] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vr0, Vrt20] : Vrt2 != vtcons(Vr0, Vrt20))) => vattachColToFrontRaw(VRawTable0, VRawTable1) = VRESULT)).
fof('attachColToFrontRaw-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vattachColToFrontRaw(VRawTable0, VRawTable1) = VRESULT => ((VRawTable0 = vtempty & VRawTable1 = vtempty & VRESULT = vsomeRawTable(vtempty)) | ?[Vrt1, Vrest, Vr, Vf, Vrt2] : (Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & visSomeRawTable(Vrest) & VRawTable0 = vtcons(vrcons(Vf, vrempty), Vrt1) & VRawTable1 = vtcons(Vr, Vrt2) & VRESULT = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(Vrest)))) | ?[Vrt1, Vrest, Vr, Vf, Vrt2] : (Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & (~visSomeRawTable(Vrest)) & VRawTable0 = vtcons(vrcons(Vf, vrempty), Vrt1) & VRawTable1 = vtcons(Vr, Vrt2) & VRESULT = vnoRawTable) | ?[Vrt1, Vrt2] : ((Vrt1 != vtempty | Vrt2 != vtempty) & (![Vf0, Vrt10] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vr0, Vrt20] : Vrt2 != vtcons(Vr0, Vrt20)) & VRawTable0 = Vrt1 & VRawTable1 = Vrt2 & VRESULT = vnoRawTable)))).
fof('rawUnion0', axiom, ![VRawTable0, VRawTable1, Vrt2, VRESULT] : ((VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = Vrt2) => vrawUnion(VRawTable0, VRawTable1) = VRESULT)).
fof('rawUnion1', axiom, ![VVAR0, VRESULT, VRawTable0, Vrt1] : ((VVAR0 = VRESULT & VRawTable0 = vtempty & VVAR0 = Vrt1 & VRESULT != vtempty) => vrawUnion(VVAR0, VRawTable0) = VRESULT)).
fof('rawUnion2', axiom, ![Vr1, Vrt1, VRawTable0, VRawTable1, VRESULT, Vurt1rt2, Vrt2] : ((VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vurt1rt2) & Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawUnion(VRawTable0, VRawTable1) = VRESULT)).
fof('rawUnion3', axiom, ![Vr1, Vrt1, VRawTable0, VRawTable1, VRESULT, Vurt1rt2, Vrt2] : ((VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2 & VRESULT = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawUnion(VRawTable0, VRawTable1) = VRESULT)).
fof('rawUnion-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawUnion(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = Vrt2) | ?[Vrt1] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = Vrt1) | ?[Vr1, Vrt1, Vurt1rt2, Vrt2] : (Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vurt1rt2)) | ?[Vr1, Vrt1, Vurt1rt2, Vrt2] : (Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2)))).
fof('rawIntersection0', axiom, ![VRawTable0, VRawTable1, Vrt2, VRESULT] : ((VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) => vrawIntersection(VRawTable0, VRawTable1) = VRESULT)).
fof('rawIntersection1', axiom, ![VVAR0, VRESULT, VRawTable0, Vrt1] : ((VVAR0 = VRESULT & VRawTable0 = Vrt1 & VVAR0 = vtempty & Vrt1 != VRESULT) => vrawIntersection(VRawTable0, VVAR0) = VRESULT)).
fof('rawIntersection2', axiom, ![Vr1, VRawTable0, VRawTable1, VRESULT, Vrt2] : ((VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty) & vrowIn(Vr1, Vrt2) & Vrt2 != vtempty) => vrawIntersection(VRawTable0, VRawTable1) = VRESULT)).
fof('rawIntersection3', axiom, ![Vr1, VRawTable0, VRawTable1, VRESULT, Vrt2] : ((VRawTable0 = vtcons(Vr1, VRESULT) & VRawTable1 = Vrt2 & VRESULT = vtempty & (~vrowIn(Vr1, Vrt2)) & Vrt2 != VRESULT) => vrawIntersection(VRawTable0, VRawTable1) = VRESULT)).
fof('rawIntersection4', axiom, ![Vr1, Vrt1, VRawTable0, VRawTable1, VRESULT, Vurt1rt2, Vrt2] : ((VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vurt1rt2) & Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(VRawTable0, VRawTable1) = VRESULT)).
fof('rawIntersection5', axiom, ![Vr1, Vrt1, VRawTable0, VRawTable1, VRESULT, Vurt1rt2, Vrt2] : ((VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2 & VRESULT = vrawIntersection(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(VRawTable0, VRawTable1) = VRESULT)).
fof('rawIntersection-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawIntersection(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = vtempty) | ?[Vr1, Vrt2] : (vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty)) | ?[Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vr1, Vrt1, Vurt1rt2, Vrt2] : (Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vurt1rt2)) | ?[Vr1, Vrt1, Vurt1rt2, Vrt2] : (Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2)))).
fof('rawDifference0', axiom, ![VRawTable0, VRawTable1, Vrt2, VRESULT] : ((VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) => vrawDifference(VRawTable0, VRawTable1) = VRESULT)).
fof('rawDifference1', axiom, ![VVAR0, VRESULT, VRawTable0, Vrt1] : ((VVAR0 = VRESULT & VRawTable0 = vtempty & VVAR0 = Vrt1 & VRESULT != vtempty) => vrawDifference(VVAR0, VRawTable0) = VRESULT)).
fof('rawDifference2', axiom, ![Vr1, VRawTable0, VRawTable1, VRESULT, Vrt2] : ((VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawDifference(VRawTable0, VRawTable1) = VRESULT)).
fof('rawDifference3', axiom, ![Vr1, VRawTable0, VRawTable1, VRESULT, Vrt2] : ((VRawTable0 = vtcons(Vr1, VRESULT) & VRawTable1 = Vrt2 & VRESULT = vtempty & (~vrowIn(Vr1, Vrt2)) & Vrt2 != VRESULT) => vrawDifference(VRawTable0, VRawTable1) = VRESULT)).
fof('rawDifference4', axiom, ![Vr1, Vrt1, VRawTable0, VRawTable1, VRESULT, Vrt2, Vdrt1rt2] : ((VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vdrt1rt2) & Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(VRawTable0, VRawTable1) = VRESULT)).
fof('rawDifference5', axiom, ![Vr1, Vrt1, VRawTable0, VRawTable1, VRESULT, Vrt2, Vdrt1rt2] : ((VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vdrt1rt2 & VRESULT = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(VRawTable0, VRawTable1) = VRESULT)).
fof('rawDifference-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawDifference(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1] : (Vrt1 != vtempty & VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = Vrt1) | ?[Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty)) | ?[Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vr1, Vrt1, Vrt2, Vdrt1rt2] : (Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vdrt1rt2)) | ?[Vr1, Vrt1, Vrt2, Vdrt1rt2] : (Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vdrt1rt2)))).
fof('EQ-y1', axiom, ($true => ($true <=> vy1 = vy1))).
fof('EQ-y2', axiom, ($true => ($true <=> vy2 = vy2))).
fof('EQ-z1', axiom, ($true => ($true <=> vz1 = vz1))).
fof('EQ-z2', axiom, ($true => ($true <=> vz2 = vz2))).
fof('DIFF-y1-y2', axiom, ($true => vy1 != vy2)).
fof('DIFF-y1-z1', axiom, ($true => vy1 != vz1)).
fof('DIFF-y1-z2', axiom, ($true => vy1 != vz2)).
fof('DIFF-y2-z1', axiom, ($true => vy2 != vz1)).
fof('DIFF-y2-z2', axiom, ($true => vy2 != vz2)).
fof('DIFF-z1-z2', axiom, ($true => vz1 != vz2)).
fof('test-rawDifference2', conjecture, ![Vdrt, VRawTable0, Vprt, VVAR0, VRESULT] : ((VVAR0 = VRESULT & VRawTable0 = Vdrt & VVAR0 = Vprt & VRESULT = vtcons(vrcons(vy2, vrcons(vz2, vrempty)), vtempty) & Vdrt = vtcons(vrcons(vy1, vrcons(vz1, vrempty)), vtcons(vrcons(vy2, vrcons(vz1, vrempty)), vtcons(vrcons(vy1, vrcons(vz1, vrempty)), vtempty)))) => vrawDifference(VVAR0, VRawTable0) = VRESULT)).
