fof('EQ-ctype', axiom, ![VAName0, VAName1, VFType0, VFType1] : ($true => ((VAName0 = VAName1 & VFType0 = VFType1) <=> vctype(VAName0, VFType0) = vctype(VAName1, VFType1)))).
fof('EQ-aempty', axiom, ($true => ($true <=> vaempty = vaempty))).
fof('EQ-acons', axiom, ![VAName0, VAName1, VAList0, VAList1] : ($true => ((VAName0 = VAName1 & VAList0 = VAList1) <=> vacons(VAName0, VAList0) = vacons(VAName1, VAList1)))).
fof('DIFF-acons-aempty', axiom, ![VAName0, VAList0] : ($true => vacons(VAName0, VAList0) != vaempty)).
fof('EQ-ttempty', axiom, ($true => ($true <=> vttempty = vttempty))).
fof('EQ-ttcons', axiom, ![VCType0, VCType1, VTType0, VTType1] : ($true => ((VCType0 = VCType1 & VTType0 = VTType1) <=> vttcons(VCType0, VTType0) = vttcons(VCType1, VTType1)))).
fof('DIFF-ttcons-ttempty', axiom, ![VCType0, VTType0] : ($true => vttcons(VCType0, VTType0) != vttempty)).
fof('EQ-rtempty', axiom, ($true => ($true <=> vrtempty = vrtempty))).
fof('EQ-rtcons', axiom, ![VFType0, VFType1, VRawType0, VRawType1] : ($true => ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> vrtcons(VFType0, VRawType0) = vrtcons(VFType1, VRawType1)))).
fof('DIFF-rtcons-rtempty', axiom, ![VFType0, VRawType0] : ($true => vrtcons(VFType0, VRawType0) != vrtempty)).
fof('EQ-rempty', axiom, ($true => ($true <=> vrempty = vrempty))).
fof('EQ-rcons', axiom, ![VFVal0, VFVal1, VRow0, VRow1] : ($true => ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> vrcons(VFVal0, VRow0) = vrcons(VFVal1, VRow1)))).
fof('DIFF-rcons-rempty', axiom, ![VFVal0, VRow0] : ($true => vrcons(VFVal0, VRow0) != vrempty)).
fof('EQ-tempty', axiom, ($true => ($true <=> vtempty = vtempty))).
fof('EQ-tcons', axiom, ![VRow0, VRow1, VRawTable0, VRawTable1] : ($true => ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> vtcons(VRow0, VRawTable0) = vtcons(VRow1, VRawTable1)))).
fof('DIFF-tcons-tempty', axiom, ![VRow0, VRawTable0] : ($true => vtcons(VRow0, VRawTable0) != vtempty)).
fof('EQ-table', axiom, ![VAList0, VAList1, VRawTable0, VRawTable1] : ($true => ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> vtable(VAList0, VRawTable0) = vtable(VAList1, VRawTable1)))).
fof('getRaw0', axiom, ![Val, Vrt] : ($true => vgetRaw(vtable(Val, Vrt)) = Vrt)).
fof('getAL0', axiom, ![Val, Vrt] : ($true => vgetAL(vtable(Val, Vrt)) = Val)).
fof('matchingAList0', axiom, ($true => vmatchingAList(vttempty, vaempty))).
fof('matchingAList1', axiom, ![Va1, Va2, Val, Vf, Vtt] : ($true => (vmatchingAList(vttcons(vctype(Va1, Vf), Vtt), vacons(Va2, Val)) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val))))).
fof('matchingAList2', axiom, ![Vtt, Val] : (((Vtt != vttempty | Val != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0))) => (~vmatchingAList(Vtt, Val)))).
fof('welltypedtable0', axiom, ![Vtt, Val, Vt] : ($true => (vwelltypedtable(Vtt, vtable(Val, Vt)) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt))))).
fof('rawType0', axiom, ($true => vrawType(vttempty) = vrtempty)).
fof('rawType1', axiom, ![Va, Vft, Vtt] : ($true => vrawType(vttcons(vctype(Va, Vft), Vtt)) = vrtcons(Vft, vrawType(Vtt)))).
fof('welltypedRawtable0', axiom, ![Vrt] : ($true => vwelltypedRawtable(Vrt, vtempty))).
fof('welltypedRawtable1', axiom, ![Vrt, Vr, Vt] : ($true => (vwelltypedRawtable(Vrt, vtcons(Vr, Vt)) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt))))).
fof('welltypedRow0', axiom, ($true => vwelltypedRow(vrtempty, vrempty))).
fof('welltypedRow1', axiom, ![Vft, Vrt, Vv, Vr] : ($true => (vwelltypedRow(vrtcons(Vft, Vrt), vrcons(Vv, Vr)) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr))))).
fof('welltypedRow2', axiom, ![Vrt, Vr] : (((Vrt != vrtempty | Vr != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(Vrt, Vr)))).
fof('test4', conjecture, ![Vy2, Vyt, Va, Vxt, Vb, Vx1, Vx2, Val, Vy1, Vtt] : ((vfieldType(Vx1) = Vxt & vfieldType(Vx2) = Vxt & vfieldType(Vy1) = Vyt & vfieldType(Vy2) = Vyt & Val = vacons(Va, vacons(Vb, vaempty)) & Vtt = vttcons(vctype(Va, Vxt), vttcons(vctype(Vb, Vyt), vttempty))) => vwelltypedtable(Vtt, vtable(Val, vtcons(vrcons(Vx1, vrcons(Vy1, vrempty)), vtcons(vrcons(Vx2, vrcons(Vy2, vrempty)), vtempty)))))).
