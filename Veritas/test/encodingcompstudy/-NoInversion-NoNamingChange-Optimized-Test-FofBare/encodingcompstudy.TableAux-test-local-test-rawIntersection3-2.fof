fof('EQ-ctype', axiom, ![VAName0, VAName1, VFType0, VFType1] : ((VAName0 = VAName1 & VFType0 = VFType1) <=> vctype(VAName0, VFType0) = vctype(VAName1, VFType1))).
fof('EQ-aempty', axiom, $true).
fof('EQ-acons', axiom, ![VAName0, VAName1, VAList0, VAList1] : ((VAName0 = VAName1 & VAList0 = VAList1) <=> vacons(VAName0, VAList0) = vacons(VAName1, VAList1))).
fof('DIFF-acons-aempty', axiom, ![VAName0, VAList0] : vacons(VAName0, VAList0) != vaempty).
fof('EQ-ttempty', axiom, $true).
fof('EQ-ttcons', axiom, ![VCType0, VCType1, VTType0, VTType1] : ((VCType0 = VCType1 & VTType0 = VTType1) <=> vttcons(VCType0, VTType0) = vttcons(VCType1, VTType1))).
fof('DIFF-ttcons-ttempty', axiom, ![VCType0, VTType0] : vttcons(VCType0, VTType0) != vttempty).
fof('EQ-rtempty', axiom, $true).
fof('EQ-rtcons', axiom, ![VFType0, VFType1, VRawType0, VRawType1] : ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> vrtcons(VFType0, VRawType0) = vrtcons(VFType1, VRawType1))).
fof('DIFF-rtcons-rtempty', axiom, ![VFType0, VRawType0] : vrtcons(VFType0, VRawType0) != vrtempty).
fof('EQ-rempty', axiom, $true).
fof('EQ-rcons', axiom, ![VFVal0, VFVal1, VRow0, VRow1] : ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> vrcons(VFVal0, VRow0) = vrcons(VFVal1, VRow1))).
fof('DIFF-rcons-rempty', axiom, ![VFVal0, VRow0] : vrcons(VFVal0, VRow0) != vrempty).
fof('EQ-tempty', axiom, $true).
fof('EQ-tcons', axiom, ![VRow0, VRow1, VRawTable0, VRawTable1] : ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> vtcons(VRow0, VRawTable0) = vtcons(VRow1, VRawTable1))).
fof('DIFF-tcons-tempty', axiom, ![VRow0, VRawTable0] : vtcons(VRow0, VRawTable0) != vtempty).
fof('EQ-table', axiom, ![VAList0, VAList1, VRawTable0, VRawTable1] : ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> vtable(VAList0, VRawTable0) = vtable(VAList1, VRawTable1))).
fof('getRaw0', axiom, ![Val, Vrt] : vgetRaw(vtable(Val, Vrt)) = Vrt).
fof('getAL0', axiom, ![Val, Vrt] : vgetAL(vtable(Val, Vrt)) = Val).
fof('matchingAList0', axiom, vmatchingAList(vttempty, vaempty)).
fof('matchingAList1', axiom, ![Va1, Va2, Val, Vf, Vtt] : (vmatchingAList(vttcons(vctype(Va1, Vf), Vtt), vacons(Va2, Val)) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val)))).
fof('matchingAList2', axiom, ![Vtt, Val] : (((Vtt != vttempty | Val != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0))) => (~vmatchingAList(Vtt, Val)))).
fof('welltypedtable0', axiom, ![Vtt, Val, Vt] : (vwelltypedtable(Vtt, vtable(Val, Vt)) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))).
fof('rawType0', axiom, vrawType(vttempty) = vrtempty).
fof('rawType1', axiom, ![Va, Vft, Vtt] : vrawType(vttcons(vctype(Va, Vft), Vtt)) = vrtcons(Vft, vrawType(Vtt))).
fof('welltypedRawtable0', axiom, ![Vrt] : vwelltypedRawtable(Vrt, vtempty)).
fof('welltypedRawtable1', axiom, ![Vrt, Vr, Vt] : (vwelltypedRawtable(Vrt, vtcons(Vr, Vt)) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))).
fof('welltypedRow0', axiom, vwelltypedRow(vrtempty, vrempty)).
fof('welltypedRow1', axiom, ![Vft, Vrt, Vv, Vr] : (vwelltypedRow(vrtcons(Vft, Vrt), vrcons(Vv, Vr)) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))).
fof('welltypedRow2', axiom, ![Vrt, Vr] : (((Vrt != vrtempty | Vr != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(Vrt, Vr)))).
fof('rowIn0', axiom, ![Vr1] : (~vrowIn(Vr1, vtempty))).
fof('rowIn1', axiom, ![Vr1, Vr2, Vrt] : (vrowIn(Vr1, vtcons(Vr2, Vrt)) <=> (Vr1 = Vr2 | vrowIn(Vr1, Vrt)))).
fof('projectFirstRaw0', axiom, vprojectFirstRaw(vtempty) = vtempty).
fof('projectFirstRaw1', axiom, ![Vrt] : vprojectFirstRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vprojectFirstRaw(Vrt))).
fof('projectFirstRaw2', axiom, ![Vf, Vr, Vrt] : vprojectFirstRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(vrcons(Vf, vrempty), vprojectFirstRaw(Vrt))).
fof('dropFirstColRaw0', axiom, vdropFirstColRaw(vtempty) = vtempty).
fof('dropFirstColRaw1', axiom, ![Vrt] : vdropFirstColRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vdropFirstColRaw(Vrt))).
fof('dropFirstColRaw2', axiom, ![Vf, Vr, Vrt] : vdropFirstColRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(Vr, vdropFirstColRaw(Vrt))).
fof('EQ-noRawTable', axiom, $true).
fof('EQ-someRawTable', axiom, ![VRawTable0, VRawTable1] : (VRawTable0 = VRawTable1 <=> vsomeRawTable(VRawTable0) = vsomeRawTable(VRawTable1))).
fof('DIFF-someRawTable-noRawTable', axiom, ![VRawTable0] : vsomeRawTable(VRawTable0) != vnoRawTable).
fof('isSomeRawTable0', axiom, (~visSomeRawTable(vnoRawTable))).
fof('isSomeRawTable1', axiom, ![Vt] : visSomeRawTable(vsomeRawTable(Vt))).
fof('getSomeRawTable0', axiom, ![Vt] : vgetSomeRawTable(vsomeRawTable(Vt)) = Vt).
fof('attachColToFrontRaw0', axiom, vattachColToFrontRaw(vtempty, vtempty) = vsomeRawTable(vtempty)).
fof('attachColToFrontRaw1', axiom, ![Vrt1, Vrest, Vr, Vf, Vrt2] : ((Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & visSomeRawTable(Vrest)) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(Vrest))))).
fof('attachColToFrontRaw2', axiom, ![Vrt1, Vrest, Vr, Vf, Vrt2] : ((Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & (~visSomeRawTable(Vrest))) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vnoRawTable)).
fof('attachColToFrontRaw3', axiom, ![Vrt1, Vrt2] : (((Vrt1 != vtempty | Vrt2 != vtempty) & (![Vf0, Vrt10] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vr0, Vrt20] : Vrt2 != vtcons(Vr0, Vrt20))) => vattachColToFrontRaw(Vrt1, Vrt2) = vnoRawTable)).
fof('rawUnion0', axiom, ![Vrt2] : vrawUnion(vtempty, Vrt2) = Vrt2).
fof('rawUnion1', axiom, ![Vrt1] : (Vrt1 != vtempty => vrawUnion(Vrt1, vtempty) = Vrt1)).
fof('rawUnion2', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vurt1rt2))).
fof('rawUnion3', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = Vurt1rt2)).
fof('rawIntersection0', axiom, ![Vrt2] : vrawIntersection(vtempty, Vrt2) = vtempty).
fof('rawIntersection1', axiom, ![Vrt1] : (Vrt1 != vtempty => vrawIntersection(Vrt1, vtempty) = vtempty)).
fof('rawIntersection2', axiom, ![Vr1, Vrt2] : ((vrowIn(Vr1, Vrt2) & Vrt2 != vtempty) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
fof('rawIntersection3', axiom, ![Vr1, Vrt2] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
fof('rawIntersection4', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vurt1rt2))).
fof('rawIntersection5', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = Vurt1rt2)).
fof('rawDifference0', axiom, ![Vrt2] : vrawDifference(vtempty, Vrt2) = vtempty).
fof('rawDifference1', axiom, ![Vrt1] : (Vrt1 != vtempty => vrawDifference(Vrt1, vtempty) = Vrt1)).
fof('rawDifference2', axiom, ![Vr1, Vrt2] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
fof('rawDifference3', axiom, ![Vr1, Vrt2] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
fof('rawDifference4', axiom, ![Vdrt1rt2, Vrt1, Vrt2, Vr1] : ((Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vdrt1rt2))).
fof('rawDifference5', axiom, ![Vdrt1rt2, Vrt1, Vrt2, Vr1] : ((Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = Vdrt1rt2)).
fof('EQ-y1', axiom, $true).
fof('EQ-y2', axiom, $true).
fof('DIFF-y2-y1', axiom, vy2 != vy1).
fof('EQ-z1', axiom, $true).
fof('DIFF-z1-y2', axiom, vz1 != vy2).
fof('DIFF-z1-y1', axiom, vz1 != vy1).
fof('EQ-z2', axiom, $true).
fof('DIFF-z2-z1', axiom, vz2 != vz1).
fof('DIFF-z2-y2', axiom, vz2 != vy2).
fof('DIFF-z2-y1', axiom, vz2 != vy1).
fof('test-rawIntersection3-2', conjecture, ![Vprt, Vdrt, Vrt] : ((Vprt = vtcons(vrcons(vy2, vrcons(vz2, vrempty)), vtcons(vrcons(vy2, vrcons(vz1, vrempty)), vtempty)) & Vdrt = vtcons(vrcons(vy1, vrcons(vz1, vrempty)), vtcons(vrcons(vy2, vrcons(vz1, vrempty)), vtcons(vrcons(vy1, vrcons(vz1, vrempty)), vtempty))) & Vrt = vtcons(vrcons(vy2, vrcons(vz1, vrempty)), vtempty)) => vrawIntersection(Vprt, Vdrt) = Vrt)).
