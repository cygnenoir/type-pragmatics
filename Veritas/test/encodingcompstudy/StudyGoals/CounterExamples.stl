module encodingcompstudy.CounterExamples

import encodingcompstudy.Syntax
import encodingcompstudy.Semantics
import encodingcompstudy.TypeSystem
import encodingcompstudy.TStore
import encodingcompstudy.Tables
import encodingcompstudy.TContext
import encodingcompstudy.TableAux

//currently, we fix the form of the tables in the goals more concretely to make
//the goals easier for the theorem provers - maybe make them harder later on?

// there exists rt2 such that rawUnion(rt1, rt2) != rt1
goal
~rt1 == tcons(~row, tempty)
=============================================== counterexample-1
exists ~rt2
	rawUnion(~rt1, ~rt2) != ~rt1



goal
~t1 = table(acons(~a1, aempty), ~rt1)
welltypedtable(~TT1, ~t1)
==================================== counterexample-2
exists ~t2, ~TT2, ~rt2
	  ~t2 = table(acons(~a1, aempty), ~rt2)
	  welltypedtable(~TT2, ~t2)
	  ~TT1 != ~TT2



// if two contexts type the same object as the same type, they are not necessarily equal
goal
~C == bindContext(~n, ~T, emptyContext)
lookupContext(~n, ~C) == someTType(~T)
========================================== counterexample-3
exists ~C2
  lookupContext(~n, ~C2) == someTType(~T)
  ~C != ~C2

// there exists t2 such that union(t1, filterRows(t2, p)) != select(filterRows(t1, t2), p)
goal
welltypedtable(~tt, table(~al, ~rt1))
~p = eq(lookup(~n), constant(~v))
==================================================================================== counterexample-4
exists ~rt2
	welltypedtable(~tt, table(~al, ~rt2))
	rawUnion(~rt1, filterRows(~rt2, ~al, ~p)) != filterRows(rawUnion(~rt1, ~rt2), ~al, ~p)


// there exists t2 such that diff(t1, filterRows(t2, p)) != filterRows(diff(t1, t2), p)
goal
welltypedtable(~tt, table(~al, ~rt1))
============================================================= counterexample-5
exists ~rt2, ~p
	welltypedtable(~tt, table(~al, ~rt2))
	rawDifference(~rt1, filterRows(~rt2, ~al, ~p)) != filterRows(rawDifference(~rt1, ~rt2), ~al, ~p)


// difference is not commutative
goal
true
========================================= counterexample-6
exists ~rt1, ~rt2, ~tt
	welltypedRawtable(~tt, ~rt1)
	welltypedRawtable(~tt, ~rt2)
	rawDifference(~rt1, ~rt2) != rawDifference(~rt2, ~rt1)


goal
true
====================== counterexample-7
exists ~rt
	projectEmptyCol(~rt) != tempty


// addding a column before a row can change the result of filterSingleRow
goal
~pred = eq(lookup(~b), constant(~gv))
============================================== counterexample-8
exists ~name, ~value, ~row, ~al
	!filterSingleRow(~pred, ~al, ~row) 
	filterSingleRow(~pred, acons(~name, ~al), rcons(~value, ~row))
exists ~name, ~value, ~row, ~al
	filterSingleRow(~pred, ~al, ~row) 
	!filterSingleRow(~pred, acons(~name, ~al), rcons(~value, ~row))


//intersection between two tables with the same type can indeed be non-empty
goal
~t1 == table(~al, ~rt1)
welltypedtable(~tt, ~t1)
============================ counterexample-9
exists ~rt2, ~table2
	~t2 = table(~al, ~rt2)
	welltypedtable(~tt, ~t2)
	reduce(conf(Intersection(tvalue(~t1), tvalue(~t2)), ~ts)) == someConf(conf(tvalue(table(~al, tempty)), ~ts))


// // findCol in a non-empty table can fail
goal
~al2 = acons(~a, ~al)
~rt2 = tcons(~r, ~rt)
welltypedtable(~tt, table(~al2, ~rt2))
========================== counterexample-10
exists ~name
  findCol(~name, ~al2, ~rt2) != someRawTable(~rt)
