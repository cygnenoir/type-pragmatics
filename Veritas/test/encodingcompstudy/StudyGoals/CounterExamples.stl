module encodingcompstudy.CounterExamples

import encodingcompstudy.Syntax
import encodingcompstudy.Semantics
import encodingcompstudy.TypeSystem
import encodingcompstudy.TStore
import encodingcompstudy.Tables
import encodingcompstudy.TContext
import encodingcompstudy.TableAux

//currently, we fix the form of the tables in the goals more concretely to make
//the goals easier for the theorem provers - maybe make them harder later on?

// there exists rt2 such that rawUnion(rt1, rt2) != rt1
goal
~rt1 == tcons(~row, tempty)
=============================================== counterexample-1
exists ~rt2
	rawUnion(~rt1, ~rt2) != ~rt1



goal
~t1 = table(acons(~a1, aempty), ~rt1)
welltypedtable(~TT1, ~t1)
==================================== counterexample-2
exists ~t2, ~TT2, ~rt2
	  ~t2 = table(acons(~a1, aempty), ~rt2)
	  welltypedtable(~TT2, ~t2)
	  ~TT1 != ~TT2



// if two contexts type the same object as the same type, they are not necessarily equal
goal
~C == bindContext(~n, ~T, emptyContext)
lookupContext(~n, ~C) == someTType(~T)
========================================== counterexample-3
exists ~C2
  lookupContext(~n, ~C2) == someTType(~T)
  ~C != ~C2

// there exists t2 such that union(t1, select(p, t2)) != select(p, union(t1, t2))
goal
~t1 = table(acons(~n, aempty), tcons(rcons(~v, rempty), tempty))
~p = VEquals(~n, ~v)
============================================================= counterexample-4
exists ~t2, ~r2, ~v2
	~t2 = table(acons(~n, aempty), tcons(rcons(~v2, rempty), tempty))
	union(~t1, select(~p, ~t2)) != select(~p, union(~t1, ~t2))


// there exists t2 such that diff(t1, select(p, t2)) != select(p, diff(t1, t2))
goal
~t1 = table(acons(~n, aempty), tcons(rcons(~v, rempty), tempty))
~p = VEquals(~n, ~v)
============================================================= counterexample-5
exists ~t2, ~r2, ~v2
	~t2 = table(acons(~n, aempty), tcons(rcons(~v2, rempty), tempty))
	difference(~t1, select(~p, ~t2)) != select(~p, difference(~t1, ~t2))


// difference is not commutative
goal
~rt == tcons(~r1, tcons(~r2, tempty))
~al == acons(~a, aempty)
~t1 == table(~al, ~rt)
welltypedtable(~tt, ~t1)
========================================= counterexample-6
exists ~t2
	welltypedtable(~tt, ~t2)
	difference(~t1, ~t2) != difference(~t2, ~t1)


goal
true
====================== counterexample-7
exists ~rt
	projectEmptyCol(~rt) != tempty


// addding a column before a row can change the result of singleRowSelect
goal
~pred = VEquals(~b, ~gv)
============================================== counterexample-8
exists ~name, ~value
	singleRowSelect(~al, ~pred, ~row) != singleRowSelect(acons(~name, ~al), ~pred, rcons(~value, ~row))


//intersection between two tables with the same type can indeed be non-empty
goal
~table1 == table(~al, tcons(~r1, tempty))
welltypedtable(~tt, ~table1)
============================ counterexample-9
exists ~table2, ~r2,  ~ts
  ~table2 == table(~al, tcons(~r2, tempty))
  welltypedtable(~tt, ~table2)
  reduce(conf(Intersection(Tvalue(~table1), Tvalue(~table2)), ~ts)) != someConf(conf(Tvalue(table(~al, tempty)), ~ts))


// findCol in a non-empty table can fail
goal
~table == table(acons(~a, ~al), tcons(rcons(~r, ~rrest), tempty))
welltypedtable(~tt, ~table)
========================== counterexample-10
exists ~name
  findCol(~name, ~table) != someRawTable(tcons(rcons(~r, ~rrest), tempty))
