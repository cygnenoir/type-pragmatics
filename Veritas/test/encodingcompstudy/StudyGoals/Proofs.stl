module encodingcompstudy.Proofs

import encodingcompstudy.Syntax
import encodingcompstudy.Semantics
import encodingcompstudy.TypeSystem
import encodingcompstudy.TypeSystemInv
import encodingcompstudy.TStore
import encodingcompstudy.Tables
import encodingcompstudy.TableAux
import encodingcompstudy.TContext
import encodingcompstudy.SoundnessAuxDefs

// order of tables in union does not influence result of rowIn
// for tables with one row (avoiding induction)
goal 
~t1 = tcons(~r1, tempty)	
~t2 = tcons(~r2, tempty)
~u1 = rawUnion(~t1, ~t2)
~u2 = rawUnion(~t2, ~t1)
rowIn(~r, ~u1)
=========================== proof-1
rowIn(~r, ~u2)

// diff(union(a, b), c) = union(diff(a, c), diff(b, c))
// for tables with only one row
local {
	different consts
		row1 : Row
		row2 : Row
		row3 : Row
	
	goal
	~table1 = tcons(row1, tempty)
	~table2 = tcons(row2, tempty)
	~table3 = tcons(row3, tempty)
	~d1 = rawDifference(rawUnion(~table1, ~table2), ~table3)
	~d2 = rawUnion(rawDifference(~table1, ~table3), rawDifference(~table2, ~table3))
	rowIn(~r, ~d1)
	==================================== proof-2
	rowIn(~r, ~d2)
}

// goal below can be proven easily
// goal
// lookupContext(~tn, ~TTC) == someTType(~TT)
// ===================================================== proof-3-1
// lookupContext(~tn, bindContext(~tn1, ~TT, ~TTC)) == someTType(~TT)


//proof should be combination of applying typing inversion lemma and 
//inferring commented theorem above - but seems to be difficult for Vampire
goal
~TTC |- selectFromWhere(some(~al), ~tn, ~p) : ~TT
===================================================== proof-3
bindContext(~tn1, ~TT, ~TTC) |- selectFromWhere(some(~al), ~tn, ~p) : ~TT


// select all is identity
goal
~TTC |- tvalue(~table) : ~TT
lookupStore(~name, ~ts) = someTable(~table)
========================================== proof-4
reduce(conf(selectFromWhere(all(), ~name, ptrue()), ~ts)) == someConf(conf(tvalue(~table), ~ts))

// intersection is associative for tables with one row
goal
~t1 == tcons(~row1, tempty)
~t2 == tcons(~row2, tempty)
~t3 == tcons(~row3, tempty)
~intersection1 == rawIntersection(rawIntersection(~t1, ~t2), ~t3)
~intersection2 == rawIntersection(~t1, rawIntersection(~t2, ~t3))
==================================== proof-5
~intersection1 == ~intersection2

// (small part of) type progress for union of table values
goal
~t1 == table(acons(~a1, aempty), ~rt)
~t2 == table(acons(~a2, aempty), ~rt) 
~u == Union(tvalue(~t1), tvalue(~t2))
~TTC |- ~u : ~TT
================================================ proof-6
~a1 == ~a2

// exists ~result
//	reduce(conf(~u, ~ts)) == someConf(conf(tvalue(~result), ~ts)) // - too difficult?

// if a query is a value, reduce will return noConf
goal
~TTC |- ~q : ~TT
isValue(~q)
StoreContextConsistent(~ts, ~TTC)
==================================== proof-7
reduce(conf(~q, ~ts)) == noConf

// Preservation for one specific case SelectSomeFromWhere case
// too difficult
// goal
// lookupContext(~tn, ~TTC) == someTType(~TT1)
// tcheckPred(~p, ~TT1)
// projectType(~al, ~TT1) == someTType(~TT)
// ~q = SelectSomeFromWhere(~al, Ref(~tn), ~p)
// ~TTC |- ~q : ~TT
// lookupStore(~tn, ~ts) == someTable(~t)
// reduce(conf(~q, ~ts)) == someConf(conf(~result, ~ts))
// StoreContextConsistent(~ts, ~TTC)
// ================================================= proof-8
// ~TTC |- ~result : ~TT

// apparently still too difficult
goal
~q = selectFromWhere(some(acons(~a, ~al)), ~tn, ptrue())
~TTC |- ~q : ~TT
============================================== proof-8
exists ~ft
	findColType(~a, ~TT) = someFType(~ft)

// if a query can be reduced to a value, its intersection with another value is equal 
// to the intersection of both of those values after two reduction steps.
goal
~TTC |- ~sql1 : ~TT
~TTC |- ~sql2 : ~TT
~sql1 == tvalue(~t1)
reduce(conf(~sql2, ~ts)) == someConf(conf(tvalue(~t2), ~ts))
reduce(conf(Intersection(~sql1, ~sql2), ~ts)) == someConf(conf(~tmp, ~ts))
reduce(conf(~tmp, ~ts)) == ~result
==================================================================== proof-9
reduce(conf(Intersection(tvalue(~t1), tvalue(~t2)), ~ts)) == ~result


// adding a table to store and contexts preserves consistency
goal
StoreContextConsistent(~ts, ~ttc)
welltypedtable(~tt, ~t)
==================================================================== proof-10
StoreContextConsistent(bindStore(~tn, ~t, ~ts), bindContext(~tn, ~tt, ~ttc))

