module encodingcompstudy.Syntheses

import encodingcompstudy.Syntax
import encodingcompstudy.Semantics
import encodingcompstudy.TypeSystem
import encodingcompstudy.TStore
import encodingcompstudy.Tables
import encodingcompstudy.TableAux
import encodingcompstudy.TContext


goal
true
================================= synthesis-1
exists ~TTC, ~q1, ~q2, ~TT
  ~TTC |- ~q1 : ~TT
  ~TTC |- ~q2 : ~TT
  ~TTC |- Intersection(~q1, ~q2) : ~TT


//given table with one column and one row, there is an attribute list
//to project the table on itself
local {
	consts
		v : Val

	goal
	~rt1 == tcons(rcons(v, rempty), tempty)
	~table1 == table(acons(~a, aempty), ~rt1)
	===================================================================== synthesis-2
	exists ~p
  		project(~p, ~table1) == someRawTable(~rt1)
}

local {
	consts
		a : Name
		b : Name
		r : Row
		q : Row
		
	goal
	~table1 == table(acons(a, acons(b, aempty)), tcons(r, tcons(q, tempty)))
	========================================================================= synthesis-3
	exists ~table2
		~table1 != ~table2
		intersect(~table1, ~table2) == someTable(~table1)
	
}

//there is a configuration that cannot be reduced further 
//(but does not contain a table value)    
goal
true
======================= synthesis-4
exists ~conf
  forall ~t, ~ts ~conf != conf(tvalue(~t), ~ts)
  reduce(~conf) = noConf
  
goal
true
=================================================== synthesis-5
exists ~table
  projectEmptyCol(~table) == tcons(rempty, tempty)

// if there is a well typed raw table, there also is a 
// well-typed table that contains this raw table
goal
~r1 == rcons(~fv1, rcons(~fv2, rempty))
~r2 == rcons(~fv3, rcons(~fv4, rempty))
~rt == tcons(~r1, tcons(~r2, tempty))
~rtype == rtcons(~ft1, rtcons(~ft2, rtempty))
welltypedRawtable(~rtype, ~rt)
======================================================================== synthesis-6
exists ~TT, ~table2, ~al
  ~table2 = table(~al, ~rt)
  welltypedtable(~TT, ~table2)


goal
~tt = ttcons(ctype(~a, ~t), ttcons(ctype(~b, ~u), ttempty))
forall ~type
	exists ~fv 
		fieldType(~fv) == ~type
======================================= synthesis-7
exists ~x, ~fv
  tcheckPred(VEquals(~x, ~fv), ~tt)


goal
true
====== synthesis-8
exists ~al
  projectType(~al, ~tt) = someTType(ttempty)


local {
	consts
	  a : Name
	  t : FType
	  
	goal
	~tt = ttcons(ctype(a, t), ttempty)
	===================================================================================== synthesis-9
	exists ~al
 		projectType(~al, ~tt) = someTType(~tt)	
}


local {
	consts
		table1 : RawTable

	goal
	true
	========================================== synthesis-10
	exists ~table2
	 rawUnion(table1, ~table2) = table1
}