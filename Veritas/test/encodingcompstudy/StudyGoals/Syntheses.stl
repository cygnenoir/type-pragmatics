module encodingcompstudy.Syntheses

import encodingcompstudy.Syntax
import encodingcompstudy.Semantics
import encodingcompstudy.TypeSystem
import encodingcompstudy.TStore
import encodingcompstudy.Tables
import encodingcompstudy.TableAux
import encodingcompstudy.TContext


goal
true
================================= synthesis-1
exists ~TTC, ~q1, ~q2, ~TT
  ~TTC |- ~q1 : ~TT
  ~TTC |- ~q2 : ~TT
  ~TTC |- Intersection(~q1, ~q2) : ~TT


//given table with one column and one row, there is an attribute list
//to project the table on itself
local {
	consts
		v : Val

	goal
	~rt == tcons(rcons(v, rempty), tempty)
	~al == acons(~a, aempty)
	===================================================================== synthesis-2
	exists ~alr
  		selectRows(~alr, ~al, ~rt) == someRawTable(~rt)
}

local {
	consts
		a : Name
		b : Name
		r : Row
		q : Row
		
	goal
	~rt1 = tcons(r, tcons(q, tempty))
	========================================================================= synthesis-3
	exists ~rt2
		~rt1 != ~rt2
		rawIntersection(~rt1, ~rt2) == ~rt1
	
}

//there is a configuration that cannot be reduced further 
//(but does not contain a table value)    
goal
true
======================= synthesis-4
exists ~ts, ~q
  forall ~t 
  	~q != tvalue(~t)
  reduce(~q, ~ts) = noQuery
  
goal
true
=================================================== synthesis-5
exists ~table
  projectEmptyCol(~table) == tcons(rempty, tempty)

// if there is a well typed raw table, there also is a 
// well-typed table that contains this raw table
goal
~r1 == rcons(~fv1, rcons(~fv2, rempty))
~r2 == rcons(~fv3, rcons(~fv4, rempty))
~rt == tcons(~r1, tcons(~r2, tempty))
~rtype == rtcons(~ft1, rtcons(~ft2, rtempty))
welltypedRawtable(~rtype, ~rt)
======================================================================== synthesis-6
exists ~TT, ~table2, ~al
  ~table2 = table(~al, ~rt)
  welltypedtable(~TT, ~table2)


goal
~tt = ttcons(~a, ~t, ttcons(~b, ~u, ttempty))
forall ~type
	exists ~fv 
		fieldType(~fv) == ~type
======================================= synthesis-7
exists ~p
  tcheckPred(~p, ~tt)


goal
true
====== synthesis-8
exists ~al
  projectType(~al, ~tt) = someTType(ttempty)


local {
	consts
	  a : Name
	  t : FType
	  
	goal
	~tt = ttcons(a, t, ttempty)
	===================================================================================== synthesis-9
	exists ~al
 		projectType(~al, ~tt) = someTType(~tt)	
}


local {
	consts
		rt1 : RawTable

	goal
	true
	========================================== synthesis-10
	exists ~rt2
	 rawUnion(rt1, ~rt2) = rt1
}