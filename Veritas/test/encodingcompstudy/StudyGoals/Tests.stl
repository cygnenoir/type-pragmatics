module encodingcompstudy.Tests

import encodingcompstudy.Syntax
import encodingcompstudy.Semantics
import encodingcompstudy.TypeSystem
import encodingcompstudy.TStore
import encodingcompstudy.Tables
import encodingcompstudy.TableAux
import encodingcompstudy.TContext
import encodingcompstudy.SoundnessAuxDefs

local {
	different consts
	    fv : Val
	    gv : Val
	    hv : Val
	    
	    a : Name
	    b : Name
	    c : Name

	goal
	~al = acons(a, acons(b, acons(c, aempty)))
	~pred = VEquals(b, gv)
	~row = rcons(fv, rcons(gv, rcons(hv, rempty)))
	============================================== test-1
	filterSingleRow(~al, ~pred, ~row) == isTrue
}

local {
	different consts
		r1 : Row
		r2 : Row
		
		a : Name
		b : Name
	
	goal
	~al = acons(a, acons(b, aempty))
	~table1 == table(~al, tcons(r1, tempty))
	~table2 == table(~al, tcons(r2, tempty))
	============================ test-2
	reduce(conf(Intersection(tvalue(~table1), tvalue(~table2)), emptyStore)) == someConf(conf(tvalue(table(~al, tempty)), emptyStore))
}

local {
	different consts
		a1 : Name
		a2 : Name
		a3 : Name
		
		v1 : Val
		v2 : Val
		v3 : Val
	
	goal
	~al == acons(a1, acons(a2, acons(a3, aempty)))
	~row == rcons(v1, rcons(v2, rcons(v3, rempty)))
	~table == table(~al, tcons(~row, tempty))
	========================== test-3
	findCol(a2, ~table) == someRawTable(tcons(rcons(v2, rempty), tempty))
}

local {
	different consts
		row1 : Row
		row2 : Row
		row3 : Row
	
	goal
	~table1 == tcons(row1, tcons(row2, tempty))
	~table2 == tcons(row3, tcons(row1, tempty))
	============================================ test-4
	rawDifference(~table1, ~table2) == tcons(row2, tempty)
}

local {	
	different consts
		row1 : Row
		row2 : Row
		row3 : Row
		row4 : Row


	goal
	~table = tcons(row1, tcons(row2, tcons(row3, tcons(row4, tempty))))
	======================================================================= test-5
	rowIn(row4, ~table)
}

local {
	different consts
		a : Name
		b : Name
		c : Name
		d : Name
		z : Name
	
	goal
	~al = acons(a, acons(b, acons(c, acons(d, aempty))))
	~table1 = table(~al, ~rt)
	~table2 = table(acons(z, ~al), ~rt2)
	================================= test-6
	reduce(conf(Union(tvalue(~table1), tvalue(~table2)), emptyStore)) == noConf
	
}

local {
	different consts
		a : Name
		b : Name
		
		ft1 : FType
		ft2 : FType
		
		tn1 : Name
		
    goal
    ~tt1 == ttcons(ctype(a, ft1), ttcons(ctype(b, ft2), ttempty))
    ~TTC == bindContext(tn1, ~tt1, emptyContext)
    ~al == acons(b, aempty)
    ~TT == ttcons(ctype(b, ft2), ttempty)
    ==================================================== test-7
    ~TTC |- SelectSomeFrom(~al, Ref(tn1)) : ~TT
    
}


local {
	different consts
		tn1 : Name
		tn2 : Name
		tn3 : Name
		
		tt1 : TType
		tt2 : TType
		tt3 : TType
		
		t1 : Table
		t2 : Table
		t3 : Table
	
	goal
	welltypedtable(tt1, t1)
	welltypedtable(tt2, t2)
	welltypedtable(tt3, t3)
	~TS == bindStore(tn1, t1, bindStore(tn2, t2, bindStore(tn3, t3, emptyStore)))
	~TTC == bindContext(tn1, tt1, bindContext(tn2, tt2, bindContext(tn3, tt3, emptyContext)))
	========================================================================================= test-8
	StoreContextConsistent(~TS, ~TTC)
}

local {
	different consts
		tn1 : Name
		tn2 : Name
		tn3 : Name
		tn4 : Name
		tn5 : Name
		
		tt : TType
		tt4 : TType
		
	goal
	~TTC = bindContext(tn1, tt, bindContext(tn2, tt, bindContext(tn3, tt, bindContext(tn4, tt4, bindContext(tn5, tt, emptyContext)))))
	========================================= test-9
	lookupContext(tn4, ~TTC) == someTType(tt4)
	
}

local {
	different consts
		v1 : Val
		v2 : Val
		v3 : Val
		v4 : Val
	
	goal
	~row1 == rcons(v1, rcons(v2, rempty))
	~row2 == rcons(v3, rcons(v4, rempty))
	~table == tcons(~row1, tcons(~row2, tempty))
	~result == dropFirstColRaw(~table)
	~resultRow1 == rcons(v2, rempty)
	~resultRow2 == rcons(v4, rempty)
	============================================= test-10
	~result == tcons(~resultRow1, tcons(~resultRow2, tempty))
}