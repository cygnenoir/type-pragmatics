tff('FType_type', type, vFType: $tType).
tff('AName_type', type, vAName: $tType).
tff('AList_type', type, vAList: $tType).
tff('CType_type', type, vCType: $tType).
tff('TType_type', type, vTType: $tType).
tff('RawType_type', type, vRawType: $tType).
tff('FVal_type', type, vFVal: $tType).
tff('Row_type', type, vRow: $tType).
tff('RawTable_type', type, vRawTable: $tType).
tff('Table_type', type, vTable: $tType).
tff('OptRawTable_type', type, vOptRawTable: $tType).
tff('ctype_type', type, vctype: (vAName * vFType) > vCType).
tff('aempty_type', type, vaempty: vAList).
tff('acons_type', type, vacons: (vAName * vAList) > vAList).
tff('ttempty_type', type, vttempty: vTType).
tff('ttcons_type', type, vttcons: (vCType * vTType) > vTType).
tff('rtempty_type', type, vrtempty: vRawType).
tff('rtcons_type', type, vrtcons: (vFType * vRawType) > vRawType).
tff('rempty_type', type, vrempty: vRow).
tff('rcons_type', type, vrcons: (vFVal * vRow) > vRow).
tff('tempty_type', type, vtempty: vRawTable).
tff('tcons_type', type, vtcons: (vRow * vRawTable) > vRawTable).
tff('table_type', type, vtable: (vAList * vRawTable) > vTable).
tff('noRawTable_type', type, vnoRawTable: vOptRawTable).
tff('someRawTable_type', type, vsomeRawTable: vRawTable > vOptRawTable).
tff('x1_type', type, vx1: vFVal).
tff('x2_type', type, vx2: vFVal).
tff('y1_type', type, vy1: vFVal).
tff('y2_type', type, vy2: vFVal).
tff('z1_type', type, vz1: vFVal).
tff('z2_type', type, vz2: vFVal).
tff('getRaw_type', type, vgetRaw: vTable > vRawTable).
tff('getAL_type', type, vgetAL: vTable > vAList).
tff('fieldType_type', type, vfieldType: vFVal > vFType).
tff('le_type', type, vle: (vFVal * vFVal) > $o).
tff('ge_type', type, vge: (vFVal * vFVal) > $o).
tff('matchingAList_type', type, vmatchingAList: (vTType * vAList) > $o).
tff('welltypedtable_type', type, vwelltypedtable: (vTType * vTable) > $o).
tff('rawType_type', type, vrawType: vTType > vRawType).
tff('welltypedRawtable_type', type, vwelltypedRawtable: (vRawType * vRawTable) > $o).
tff('welltypedRow_type', type, vwelltypedRow: (vRawType * vRow) > $o).
tff('rowIn_type', type, vrowIn: (vRow * vRawTable) > $o).
tff('projectFirstRaw_type', type, vprojectFirstRaw: vRawTable > vRawTable).
tff('dropFirstColRaw_type', type, vdropFirstColRaw: vRawTable > vRawTable).
tff('isSomeRawTable_type', type, visSomeRawTable: vOptRawTable > $o).
tff('attachColToFrontRaw_type', type, vattachColToFrontRaw: (vRawTable * vRawTable) > vOptRawTable).
tff('rawUnion_type', type, vrawUnion: (vRawTable * vRawTable) > vRawTable).
tff('rawIntersection_type', type, vrawIntersection: (vRawTable * vRawTable) > vRawTable).
tff('rawDifference_type', type, vrawDifference: (vRawTable * vRawTable) > vRawTable).
tff('getSomeRawTable_type', type, vgetSomeRawTable: vOptRawTable > vRawTable).
tff('EQ-ctype', axiom, ![VAName0: vAName, VAName1: vAName, VFType0: vFType, VFType1: vFType] : ((VAName0 = VAName1 & VFType0 = VFType1) <=> vctype(VAName0, VFType0) = vctype(VAName1, VFType1))).
tff('EQ-aempty', axiom, $true).
tff('EQ-acons', axiom, ![VAName0: vAName, VAName1: vAName, VAList0: vAList, VAList1: vAList] : ((VAName0 = VAName1 & VAList0 = VAList1) <=> vacons(VAName0, VAList0) = vacons(VAName1, VAList1))).
tff('EQ-ttempty', axiom, $true).
tff('EQ-ttcons', axiom, ![VCType0: vCType, VCType1: vCType, VTType0: vTType, VTType1: vTType] : ((VCType0 = VCType1 & VTType0 = VTType1) <=> vttcons(VCType0, VTType0) = vttcons(VCType1, VTType1))).
tff('EQ-rtempty', axiom, $true).
tff('EQ-rtcons', axiom, ![VFType0: vFType, VFType1: vFType, VRawType0: vRawType, VRawType1: vRawType] : ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> vrtcons(VFType0, VRawType0) = vrtcons(VFType1, VRawType1))).
tff('EQ-rempty', axiom, $true).
tff('EQ-rcons', axiom, ![VFVal0: vFVal, VFVal1: vFVal, VRow0: vRow, VRow1: vRow] : ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> vrcons(VFVal0, VRow0) = vrcons(VFVal1, VRow1))).
tff('EQ-tempty', axiom, $true).
tff('EQ-tcons', axiom, ![VRow0: vRow, VRow1: vRow, VRawTable0: vRawTable, VRawTable1: vRawTable] : ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> vtcons(VRow0, VRawTable0) = vtcons(VRow1, VRawTable1))).
tff('EQ-table', axiom, ![VAList0: vAList, VAList1: vAList, VRawTable0: vRawTable, VRawTable1: vRawTable] : ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> vtable(VAList0, VRawTable0) = vtable(VAList1, VRawTable1))).
tff('EQ-noRawTable', axiom, $true).
tff('EQ-someRawTable', axiom, ![VRawTable0: vRawTable, VRawTable1: vRawTable] : (VRawTable0 = VRawTable1 <=> vsomeRawTable(VRawTable0) = vsomeRawTable(VRawTable1))).
tff('DIFF-aempty-acons', axiom, ![VAName0: vAName, VAList0: vAList] : vaempty != vacons(VAName0, VAList0)).
tff('DIFF-ttempty-ttcons', axiom, ![VCType0: vCType, VTType0: vTType] : vttempty != vttcons(VCType0, VTType0)).
tff('DIFF-rtempty-rtcons', axiom, ![VFType0: vFType, VRawType0: vRawType] : vrtempty != vrtcons(VFType0, VRawType0)).
tff('DIFF-rempty-rcons', axiom, ![VFVal0: vFVal, VRow0: vRow] : vrempty != vrcons(VFVal0, VRow0)).
tff('DIFF-tempty-tcons', axiom, ![VRow0: vRow, VRawTable0: vRawTable] : vtempty != vtcons(VRow0, VRawTable0)).
tff('DIFF-noRawTable-someRawTable', axiom, ![VRawTable0: vRawTable] : vnoRawTable != vsomeRawTable(VRawTable0)).
tff('getRaw0', axiom, ![Val: vAList, Vrt: vRawTable] : vgetRaw(vtable(Val, Vrt)) = Vrt).
tff('getAL0', axiom, ![Val: vAList, Vrt: vRawTable] : vgetAL(vtable(Val, Vrt)) = Val).
tff('matchingAList0', axiom, vmatchingAList(vttempty, vaempty)).
tff('matchingAList1', axiom, ![Va1: vAName, Va2: vAName, Val: vAList, Vf: vFType, Vtt: vTType] : (vmatchingAList(vttcons(vctype(Va1, Vf), Vtt), vacons(Va2, Val)) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val)))).
tff('matchingAList2', axiom, ![Vtt: vTType, Val: vAList] : (((Vtt != vttempty | Val != vaempty) & (![Vtt: vTType, Va10: vAName, Vf0: vFType, Vtt0: vTType] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Val: vAList, Va20: vAName, Val0: vAList] : Val != vacons(Va20, Val0))) => (~vmatchingAList(Vtt, Val)))).
tff('welltypedtable0', axiom, ![Vtt: vTType, Val: vAList, Vt: vRawTable] : (vwelltypedtable(Vtt, vtable(Val, Vt)) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))).
tff('rawType0', axiom, vrawType(vttempty) = vrtempty).
tff('rawType1', axiom, ![Va: vAName, Vft: vFType, Vtt: vTType] : vrawType(vttcons(vctype(Va, Vft), Vtt)) = vrtcons(Vft, vrawType(Vtt))).
tff('welltypedRawtable0', axiom, ![Vrt: vRawType] : vwelltypedRawtable(Vrt, vtempty)).
tff('welltypedRawtable1', axiom, ![Vrt: vRawType, Vr: vRow, Vt: vRawTable] : (vwelltypedRawtable(Vrt, vtcons(Vr, Vt)) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))).
tff('welltypedRow0', axiom, vwelltypedRow(vrtempty, vrempty)).
tff('welltypedRow1', axiom, ![Vft: vFType, Vrt: vRawType, Vv: vFVal, Vr: vRow] : (vwelltypedRow(vrtcons(Vft, Vrt), vrcons(Vv, Vr)) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))).
tff('welltypedRow2', axiom, ![Vrt: vRawType, Vr: vRow] : (((Vrt != vrtempty | Vr != vrempty) & (![Vrt: vRawType, Vft0: vFType, Vrt0: vRawType] : Vrt != vrtcons(Vft0, Vrt0) | ![Vr: vRow, Vv0: vFVal, Vr0: vRow] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(Vrt, Vr)))).
tff('rowIn0', axiom, ![Vr1: vRow] : (~vrowIn(Vr1, vtempty))).
tff('rowIn1', axiom, ![Vr1: vRow, Vr2: vRow, Vrt: vRawTable] : (vrowIn(Vr1, vtcons(Vr2, Vrt)) <=> (Vr1 = Vr2 | vrowIn(Vr1, Vrt)))).
tff('projectFirstRaw0', axiom, vprojectFirstRaw(vtempty) = vtempty).
tff('projectFirstRaw1', axiom, ![Vrt: vRawTable] : vprojectFirstRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vprojectFirstRaw(Vrt))).
tff('projectFirstRaw2', axiom, ![Vf: vFVal, Vr: vRow, Vrt: vRawTable] : vprojectFirstRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(vrcons(Vf, vrempty), vprojectFirstRaw(Vrt))).
tff('dropFirstColRaw0', axiom, vdropFirstColRaw(vtempty) = vtempty).
tff('dropFirstColRaw1', axiom, ![Vrt: vRawTable] : vdropFirstColRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vdropFirstColRaw(Vrt))).
tff('dropFirstColRaw2', axiom, ![Vf: vFVal, Vr: vRow, Vrt: vRawTable] : vdropFirstColRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(Vr, vdropFirstColRaw(Vrt))).
tff('isSomeRawTable0', axiom, (~visSomeRawTable(vnoRawTable))).
tff('isSomeRawTable1', axiom, ![Vt: vRawTable] : visSomeRawTable(vsomeRawTable(Vt))).
tff('getSomeRawTable0', axiom, ![Vt: vRawTable] : vgetSomeRawTable(vsomeRawTable(Vt)) = Vt).
tff('attachColToFrontRaw0', axiom, vattachColToFrontRaw(vtempty, vtempty) = vsomeRawTable(vtempty)).
tff('attachColToFrontRaw1', axiom, ![Vrt1: vRawTable, Vrest: vOptRawTable, Vr: vRow, Vf: vFVal, Vrt2: vRawTable] : ((Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & visSomeRawTable(Vrest)) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(Vrest))))).
tff('attachColToFrontRaw2', axiom, ![Vrt1: vRawTable, Vrest: vOptRawTable, Vr: vRow, Vf: vFVal, Vrt2: vRawTable] : ((Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & (~visSomeRawTable(Vrest))) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vnoRawTable)).
tff('attachColToFrontRaw3', axiom, ![Vrt1: vRawTable, Vrt2: vRawTable] : (((Vrt1 != vtempty | Vrt2 != vtempty) & (![Vrt1: vRawTable, Vf0: vFVal, Vrt10: vRawTable] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vrt2: vRawTable, Vr0: vRow, Vrt20: vRawTable] : Vrt2 != vtcons(Vr0, Vrt20))) => vattachColToFrontRaw(Vrt1, Vrt2) = vnoRawTable)).
tff('rawUnion0', axiom, ![Vrt2: vRawTable] : vrawUnion(vtempty, Vrt2) = Vrt2).
tff('rawUnion1', axiom, ![Vrt1: vRawTable] : (Vrt1 != vtempty => vrawUnion(Vrt1, vtempty) = Vrt1)).
tff('rawUnion2', axiom, ![Vurt1rt2: vRawTable, Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : ((Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vurt1rt2))).
tff('rawUnion3', axiom, ![Vurt1rt2: vRawTable, Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : ((Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = Vurt1rt2)).
tff('rawIntersection0', axiom, ![Vrt2: vRawTable] : vrawIntersection(vtempty, Vrt2) = vtempty).
tff('rawIntersection1', axiom, ![Vrt1: vRawTable] : (Vrt1 != vtempty => vrawIntersection(Vrt1, vtempty) = vtempty)).
tff('rawIntersection2', axiom, ![Vr1: vRow, Vrt2: vRawTable] : ((vrowIn(Vr1, Vrt2) & Vrt2 != vtempty) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
tff('rawIntersection3', axiom, ![Vr1: vRow, Vrt2: vRawTable] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
tff('rawIntersection4', axiom, ![Vurt1rt2: vRawTable, Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : ((Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vurt1rt2))).
tff('rawIntersection5', axiom, ![Vurt1rt2: vRawTable, Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : ((Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = Vurt1rt2)).
tff('rawDifference0', axiom, ![Vrt2: vRawTable] : vrawDifference(vtempty, Vrt2) = vtempty).
tff('rawDifference1', axiom, ![Vrt1: vRawTable] : (Vrt1 != vtempty => vrawDifference(Vrt1, vtempty) = Vrt1)).
tff('rawDifference2', axiom, ![Vr1: vRow, Vrt2: vRawTable] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
tff('rawDifference3', axiom, ![Vr1: vRow, Vrt2: vRawTable] : (((~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
tff('rawDifference4', axiom, ![Vdrt1rt2: vRawTable, Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : ((Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vdrt1rt2))).
tff('rawDifference5', axiom, ![Vdrt1rt2: vRawTable, Vrt1: vRawTable, Vrt2: vRawTable, Vr1: vRow] : ((Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt2 != vtempty & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = Vdrt1rt2)).
tff('test-rawDifference1', axiom, ![Vz1: vFVal, Vy2: vFVal, Vz2: vFVal, Vdrt: vRawTable, Vprt: vRawTable, Vy1: vFVal] : ((Vprt = vtcons(vrcons(Vy2, vrcons(Vz2, vrempty)), vtcons(vrcons(Vy1, vrcons(Vz1, vrempty)), vtcons(vrcons(Vy2, vrcons(Vz1, vrempty)), vtcons(vrcons(Vy1, vrcons(Vz1, vrempty)), vtempty)))) & Vdrt = vtcons(vrcons(Vy2, vrcons(Vz2, vrempty)), vtcons(vrcons(Vy1, vrcons(Vz1, vrempty)), vtcons(vrcons(Vy2, vrcons(Vz1, vrempty)), vtcons(vrcons(Vy1, vrcons(Vz1, vrempty)), vtempty))))) => vrawDifference(Vprt, Vdrt) = vtempty)).
tff('false-goal', conjecture, ($true => $false)).
