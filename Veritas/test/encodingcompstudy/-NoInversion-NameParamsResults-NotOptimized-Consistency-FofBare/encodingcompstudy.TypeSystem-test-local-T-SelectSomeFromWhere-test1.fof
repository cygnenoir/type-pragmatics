fof('EQ-ctype', axiom, ![VAName0, VAName1, VFType0, VFType1] : ($true => ((VAName0 = VAName1 & VFType0 = VFType1) <=> vctype(VAName0, VFType0) = vctype(VAName1, VFType1)))).
fof('EQ-aempty', axiom, ($true => ($true <=> vaempty = vaempty))).
fof('EQ-acons', axiom, ![VAName0, VAName1, VAList0, VAList1] : ($true => ((VAName0 = VAName1 & VAList0 = VAList1) <=> vacons(VAName0, VAList0) = vacons(VAName1, VAList1)))).
fof('DIFF-acons-aempty', axiom, ![VAName0, VAList0] : ($true => vacons(VAName0, VAList0) != vaempty)).
fof('EQ-ttempty', axiom, ($true => ($true <=> vttempty = vttempty))).
fof('EQ-ttcons', axiom, ![VCType0, VCType1, VTType0, VTType1] : ($true => ((VCType0 = VCType1 & VTType0 = VTType1) <=> vttcons(VCType0, VTType0) = vttcons(VCType1, VTType1)))).
fof('DIFF-ttcons-ttempty', axiom, ![VCType0, VTType0] : ($true => vttcons(VCType0, VTType0) != vttempty)).
fof('EQ-rtempty', axiom, ($true => ($true <=> vrtempty = vrtempty))).
fof('EQ-rtcons', axiom, ![VFType0, VFType1, VRawType0, VRawType1] : ($true => ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> vrtcons(VFType0, VRawType0) = vrtcons(VFType1, VRawType1)))).
fof('DIFF-rtcons-rtempty', axiom, ![VFType0, VRawType0] : ($true => vrtcons(VFType0, VRawType0) != vrtempty)).
fof('EQ-rempty', axiom, ($true => ($true <=> vrempty = vrempty))).
fof('EQ-rcons', axiom, ![VFVal0, VFVal1, VRow0, VRow1] : ($true => ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> vrcons(VFVal0, VRow0) = vrcons(VFVal1, VRow1)))).
fof('DIFF-rcons-rempty', axiom, ![VFVal0, VRow0] : ($true => vrcons(VFVal0, VRow0) != vrempty)).
fof('EQ-tempty', axiom, ($true => ($true <=> vtempty = vtempty))).
fof('EQ-tcons', axiom, ![VRow0, VRow1, VRawTable0, VRawTable1] : ($true => ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> vtcons(VRow0, VRawTable0) = vtcons(VRow1, VRawTable1)))).
fof('DIFF-tcons-tempty', axiom, ![VRow0, VRawTable0] : ($true => vtcons(VRow0, VRawTable0) != vtempty)).
fof('EQ-table', axiom, ![VAList0, VAList1, VRawTable0, VRawTable1] : ($true => ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> vtable(VAList0, VRawTable0) = vtable(VAList1, VRawTable1)))).
fof('getRaw0', axiom, ![VTable0, Val, Vrt, VRESULT] : ((VTable0 = vtable(Val, Vrt) & VRESULT = Vrt) => vgetRaw(VTable0) = VRESULT)).
fof('getAL0', axiom, ![VTable0, Val, Vrt, VRESULT] : ((VTable0 = vtable(Val, Vrt) & VRESULT = Val) => vgetAL(VTable0) = VRESULT)).
fof('matchingAList0', axiom, ![VTType0, VAList0] : ((VTType0 = vttempty & VAList0 = vaempty) => vmatchingAList(VTType0, VAList0))).
fof('matchingAList1', axiom, ![VAList0, Va1, VTType0, Va2, Val, Vf, Vtt] : ((VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val)) => (vmatchingAList(VTType0, VAList0) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val))))).
fof('matchingAList2', axiom, ![VVAR0, Vtt, VVAR1, Val] : ((VVAR0 = Vtt & VVAR1 = Val & (VVAR0 != vttempty | VVAR1 != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0))) => (~vmatchingAList(VVAR0, VVAR1)))).
fof('welltypedtable0', axiom, ![Vt, VTType0, Val, Vtt, VTable0] : ((VTType0 = Vtt & VTable0 = vtable(Val, Vt)) => (vwelltypedtable(VTType0, VTable0) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt))))).
fof('rawType0', axiom, ![VTType0, VRESULT] : ((VTType0 = vttempty & VRESULT = vrtempty) => vrawType(VTType0) = VRESULT)).
fof('rawType1', axiom, ![Va, Vft, VTType0, VRESULT, Vtt] : ((VTType0 = vttcons(vctype(Va, Vft), Vtt) & VRESULT = vrtcons(Vft, vrawType(Vtt))) => vrawType(VTType0) = VRESULT)).
fof('welltypedRawtable0', axiom, ![VRawType0, Vrt, VRawTable0] : ((VRawType0 = Vrt & VRawTable0 = vtempty) => vwelltypedRawtable(VRawType0, VRawTable0))).
fof('welltypedRawtable1', axiom, ![Vt, Vrt, VRawTable0, VRawType0, Vr] : ((VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt)) => (vwelltypedRawtable(VRawType0, VRawTable0) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt))))).
fof('welltypedRow0', axiom, ![VRawType0, VRow0] : ((VRawType0 = vrtempty & VRow0 = vrempty) => vwelltypedRow(VRawType0, VRow0))).
fof('welltypedRow1', axiom, ![Vv, VRow0, Vrt, Vft, VRawType0, Vr] : ((VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr)) => (vwelltypedRow(VRawType0, VRow0) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr))))).
fof('welltypedRow2', axiom, ![VVAR0, Vrt, VVAR1, Vr] : ((VVAR0 = Vrt & VVAR1 = Vr & (VVAR0 != vrtempty | VVAR1 != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(VVAR0, VVAR1)))).
fof('EQ-noTable', axiom, ($true => ($true <=> vnoTable = vnoTable))).
fof('EQ-someTable', axiom, ![VTable0, VTable1] : ($true => (VTable0 = VTable1 <=> vsomeTable(VTable0) = vsomeTable(VTable1)))).
fof('DIFF-someTable-noTable', axiom, ![VTable0] : ($true => vsomeTable(VTable0) != vnoTable)).
fof('isSomeTable0', axiom, ![VOptTable0] : (VOptTable0 = vnoTable => (~visSomeTable(VOptTable0)))).
fof('isSomeTable1', axiom, ![VOptTable0, Vt] : (VOptTable0 = vsomeTable(Vt) => visSomeTable(VOptTable0))).
fof('getSomeTable0', axiom, ![VOptTable0, Vt, VRESULT] : ((VOptTable0 = vsomeTable(Vt) & VRESULT = Vt) => vgetSomeTable(VOptTable0) = VRESULT)).
fof('EQ-emptyStore', axiom, ($true => ($true <=> vemptyStore = vemptyStore))).
fof('EQ-bindStore', axiom, ![VTable1, VTStore1, VTName0, VTStore0, VTName1, VTable0] : ($true => ((VTName0 = VTName1 & (VTable0 = VTable1 & VTStore0 = VTStore1)) <=> vbindStore(VTName0, VTable0, VTStore0) = vbindStore(VTName1, VTable1, VTStore1)))).
fof('DIFF-bindStore-emptyStore', axiom, ![VTName0, VTable0, VTStore0] : ($true => vbindStore(VTName0, VTable0, VTStore0) != vemptyStore)).
fof('lookupStore0', axiom, ![VTName0, Vn, VTStore0, VRESULT] : ((VTName0 = Vn & VTStore0 = vemptyStore & VRESULT = vnoTable) => vlookupStore(VTName0, VTStore0) = VRESULT)).
fof('lookupStore1', axiom, ![Vt, VTName0, VTStore0, VTS, Vm, VRESULT, Vn] : ((VTName0 = Vn & VTStore0 = vbindStore(Vm, Vt, VTS) & VRESULT = vsomeTable(Vt) & Vn = Vm) => vlookupStore(VTName0, VTStore0) = VRESULT)).
fof('lookupStore2', axiom, ![Vt, VTName0, VTStore0, VTS, Vm, VRESULT, Vn] : ((VTName0 = Vn & VTStore0 = vbindStore(Vm, Vt, VTS) & VRESULT = vlookupStore(Vn, VTS) & Vn != Vm) => vlookupStore(VTName0, VTStore0) = VRESULT)).
fof('EQ-VEquals', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ($true => ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVEquals(VAName0, VFVal0) = vVEquals(VAName1, VFVal1)))).
fof('EQ-VGreater', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ($true => ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVGreater(VAName0, VFVal0) = vVGreater(VAName1, VFVal1)))).
fof('DIFF-VGreater-VEquals', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : ($true => vVGreater(VAName0, VFVal0) != vVEquals(VAName1, VFVal1))).
fof('EQ-VSmaller', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ($true => ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVSmaller(VAName0, VFVal0) = vVSmaller(VAName1, VFVal1)))).
fof('DIFF-VSmaller-VGreater', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : ($true => vVSmaller(VAName0, VFVal0) != vVGreater(VAName1, VFVal1))).
fof('DIFF-VSmaller-VEquals', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : ($true => vVSmaller(VAName0, VFVal0) != vVEquals(VAName1, VFVal1))).
fof('EQ-Ref', axiom, ![VTName0, VTName1] : ($true => (VTName0 = VTName1 <=> vRef(VTName0) = vRef(VTName1)))).
fof('EQ-Tvalue', axiom, ![VTable0, VTable1] : ($true => (VTable0 = VTable1 <=> vTvalue(VTable0) = vTvalue(VTable1)))).
fof('EQ-SelectAllFrom', axiom, ![VTRef0, VTRef1] : ($true => (VTRef0 = VTRef1 <=> vSelectAllFrom(VTRef0) = vSelectAllFrom(VTRef1)))).
fof('DIFF-SelectAllFrom-Tvalue', axiom, ![VTRef0, VTable0] : ($true => vSelectAllFrom(VTRef0) != vTvalue(VTable0))).
fof('EQ-SelectSomeFrom', axiom, ![VAList0, VAList1, VTRef0, VTRef1] : ($true => ((VAList0 = VAList1 & VTRef0 = VTRef1) <=> vSelectSomeFrom(VAList0, VTRef0) = vSelectSomeFrom(VAList1, VTRef1)))).
fof('DIFF-SelectSomeFrom-SelectAllFrom', axiom, ![VAList0, VTRef0, VTRef1] : ($true => vSelectSomeFrom(VAList0, VTRef0) != vSelectAllFrom(VTRef1))).
fof('DIFF-SelectSomeFrom-Tvalue', axiom, ![VAList0, VTRef0, VTable0] : ($true => vSelectSomeFrom(VAList0, VTRef0) != vTvalue(VTable0))).
fof('EQ-SelectAllFromWhere', axiom, ![VTRef0, VTRef1, VPred0, VPred1] : ($true => ((VTRef0 = VTRef1 & VPred0 = VPred1) <=> vSelectAllFromWhere(VTRef0, VPred0) = vSelectAllFromWhere(VTRef1, VPred1)))).
fof('DIFF-SelectAllFromWhere-SelectSomeFrom', axiom, ![VTRef0, VPred0, VAList0, VTRef1] : ($true => vSelectAllFromWhere(VTRef0, VPred0) != vSelectSomeFrom(VAList0, VTRef1))).
fof('DIFF-SelectAllFromWhere-SelectAllFrom', axiom, ![VTRef0, VPred0, VTRef1] : ($true => vSelectAllFromWhere(VTRef0, VPred0) != vSelectAllFrom(VTRef1))).
fof('DIFF-SelectAllFromWhere-Tvalue', axiom, ![VTRef0, VPred0, VTable0] : ($true => vSelectAllFromWhere(VTRef0, VPred0) != vTvalue(VTable0))).
fof('EQ-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VPred1, VAList1, VTRef1, VTRef0] : ($true => ((VAList0 = VAList1 & (VTRef0 = VTRef1 & VPred0 = VPred1)) <=> vSelectSomeFromWhere(VAList0, VTRef0, VPred0) = vSelectSomeFromWhere(VAList1, VTRef1, VPred1)))).
fof('DIFF-SelectSomeFromWhere-SelectAllFromWhere', axiom, ![VAList0, VPred0, VPred1, VTRef1, VTRef0] : ($true => vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vSelectAllFromWhere(VTRef1, VPred1))).
fof('DIFF-SelectSomeFromWhere-SelectSomeFrom', axiom, ![VAList0, VPred0, VAList1, VTRef1, VTRef0] : ($true => vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vSelectSomeFrom(VAList1, VTRef1))).
fof('DIFF-SelectSomeFromWhere-SelectAllFrom', axiom, ![VAList0, VTRef0, VPred0, VTRef1] : ($true => vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vSelectAllFrom(VTRef1))).
fof('DIFF-SelectSomeFromWhere-Tvalue', axiom, ![VAList0, VTRef0, VPred0, VTable0] : ($true => vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vTvalue(VTable0))).
fof('EQ-Union', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ($true => ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vUnion(VQuery0, VQuery1) = vUnion(VQuery2, VQuery3)))).
fof('DIFF-Union-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : ($true => vUnion(VQuery0, VQuery1) != vSelectSomeFromWhere(VAList0, VTRef0, VPred0))).
fof('DIFF-Union-SelectAllFromWhere', axiom, ![VQuery0, VQuery1, VTRef0, VPred0] : ($true => vUnion(VQuery0, VQuery1) != vSelectAllFromWhere(VTRef0, VPred0))).
fof('DIFF-Union-SelectSomeFrom', axiom, ![VQuery0, VQuery1, VAList0, VTRef0] : ($true => vUnion(VQuery0, VQuery1) != vSelectSomeFrom(VAList0, VTRef0))).
fof('DIFF-Union-SelectAllFrom', axiom, ![VQuery0, VQuery1, VTRef0] : ($true => vUnion(VQuery0, VQuery1) != vSelectAllFrom(VTRef0))).
fof('DIFF-Union-Tvalue', axiom, ![VQuery0, VQuery1, VTable0] : ($true => vUnion(VQuery0, VQuery1) != vTvalue(VTable0))).
fof('EQ-Intersection', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ($true => ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vIntersection(VQuery0, VQuery1) = vIntersection(VQuery2, VQuery3)))).
fof('DIFF-Intersection-Union', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : ($true => vIntersection(VQuery0, VQuery1) != vUnion(VQuery2, VQuery3))).
fof('DIFF-Intersection-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : ($true => vIntersection(VQuery0, VQuery1) != vSelectSomeFromWhere(VAList0, VTRef0, VPred0))).
fof('DIFF-Intersection-SelectAllFromWhere', axiom, ![VQuery0, VQuery1, VTRef0, VPred0] : ($true => vIntersection(VQuery0, VQuery1) != vSelectAllFromWhere(VTRef0, VPred0))).
fof('DIFF-Intersection-SelectSomeFrom', axiom, ![VQuery0, VQuery1, VAList0, VTRef0] : ($true => vIntersection(VQuery0, VQuery1) != vSelectSomeFrom(VAList0, VTRef0))).
fof('DIFF-Intersection-SelectAllFrom', axiom, ![VQuery0, VQuery1, VTRef0] : ($true => vIntersection(VQuery0, VQuery1) != vSelectAllFrom(VTRef0))).
fof('DIFF-Intersection-Tvalue', axiom, ![VQuery0, VQuery1, VTable0] : ($true => vIntersection(VQuery0, VQuery1) != vTvalue(VTable0))).
fof('EQ-Difference', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ($true => ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vDifference(VQuery0, VQuery1) = vDifference(VQuery2, VQuery3)))).
fof('DIFF-Difference-Intersection', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : ($true => vDifference(VQuery0, VQuery1) != vIntersection(VQuery2, VQuery3))).
fof('DIFF-Difference-Union', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : ($true => vDifference(VQuery0, VQuery1) != vUnion(VQuery2, VQuery3))).
fof('DIFF-Difference-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : ($true => vDifference(VQuery0, VQuery1) != vSelectSomeFromWhere(VAList0, VTRef0, VPred0))).
fof('DIFF-Difference-SelectAllFromWhere', axiom, ![VQuery0, VQuery1, VTRef0, VPred0] : ($true => vDifference(VQuery0, VQuery1) != vSelectAllFromWhere(VTRef0, VPred0))).
fof('DIFF-Difference-SelectSomeFrom', axiom, ![VQuery0, VQuery1, VAList0, VTRef0] : ($true => vDifference(VQuery0, VQuery1) != vSelectSomeFrom(VAList0, VTRef0))).
fof('DIFF-Difference-SelectAllFrom', axiom, ![VQuery0, VQuery1, VTRef0] : ($true => vDifference(VQuery0, VQuery1) != vSelectAllFrom(VTRef0))).
fof('DIFF-Difference-Tvalue', axiom, ![VQuery0, VQuery1, VTable0] : ($true => vDifference(VQuery0, VQuery1) != vTvalue(VTable0))).
fof('isValue0', axiom, ![VQuery0, Vt] : (VQuery0 = vTvalue(Vt) => visValue(VQuery0))).
fof('isValue1', axiom, ![VQuery0, Vn] : (VQuery0 = vSelectAllFrom(Vn) => (~visValue(VQuery0)))).
fof('isValue2', axiom, ![VQuery0, Val, Vtr] : (VQuery0 = vSelectSomeFrom(Val, Vtr) => (~visValue(VQuery0)))).
fof('isValue3', axiom, ![VQuery0, Vtr, Vp] : (VQuery0 = vSelectAllFromWhere(Vtr, Vp) => (~visValue(VQuery0)))).
fof('isValue4', axiom, ![VQuery0, Val, Vtr, Vp] : (VQuery0 = vSelectSomeFromWhere(Val, Vtr, Vp) => (~visValue(VQuery0)))).
fof('isValue5', axiom, ![VQuery0, Vq1, Vq2] : (VQuery0 = vUnion(Vq1, Vq2) => (~visValue(VQuery0)))).
fof('isValue6', axiom, ![VQuery0, Vsql1, Vsql2] : (VQuery0 = vIntersection(Vsql1, Vsql2) => (~visValue(VQuery0)))).
fof('isValue7', axiom, ![VQuery0, Vsql1, Vsql2] : (VQuery0 = vDifference(Vsql1, Vsql2) => (~visValue(VQuery0)))).
fof('EQ-noTType', axiom, ($true => ($true <=> vnoTType = vnoTType))).
fof('EQ-someTType', axiom, ![VTType0, VTType1] : ($true => (VTType0 = VTType1 <=> vsomeTType(VTType0) = vsomeTType(VTType1)))).
fof('DIFF-someTType-noTType', axiom, ![VTType0] : ($true => vsomeTType(VTType0) != vnoTType)).
fof('isSomeTType0', axiom, ![VOptTType0] : (VOptTType0 = vnoTType => (~visSomeTType(VOptTType0)))).
fof('isSomeTType1', axiom, ![VOptTType0, Vt] : (VOptTType0 = vsomeTType(Vt) => visSomeTType(VOptTType0))).
fof('getSomeTType0', axiom, ![VOptTType0, Vt, VRESULT] : ((VOptTType0 = vsomeTType(Vt) & VRESULT = Vt) => vgetSomeTType(VOptTType0) = VRESULT)).
fof('EQ-emptyContext', axiom, ($true => ($true <=> vemptyContext = vemptyContext))).
fof('EQ-bindContext', axiom, ![VTTContext0, VTTContext1, VTName0, VTType0, VTType1, VTName1] : ($true => ((VTName0 = VTName1 & (VTType0 = VTType1 & VTTContext0 = VTTContext1)) <=> vbindContext(VTName0, VTType0, VTTContext0) = vbindContext(VTName1, VTType1, VTTContext1)))).
fof('DIFF-bindContext-emptyContext', axiom, ![VTName0, VTType0, VTTContext0] : ($true => vbindContext(VTName0, VTType0, VTTContext0) != vemptyContext)).
fof('lookupContext0', axiom, ![VTName0, Vtn, VTTContext0, VRESULT] : ((VTName0 = Vtn & VTTContext0 = vemptyContext & VRESULT = vnoTType) => vlookupContext(VTName0, VTTContext0) = VRESULT)).
fof('lookupContext1', axiom, ![VTTContext0, Vtm, VTName0, Vtn, VRESULT, VTTC, Vtt] : ((VTName0 = Vtn & VTTContext0 = vbindContext(Vtm, Vtt, VTTC) & VRESULT = vsomeTType(Vtt) & Vtn = Vtm) => vlookupContext(VTName0, VTTContext0) = VRESULT)).
fof('lookupContext2', axiom, ![VTTContext0, Vtm, VTName0, Vtn, VRESULT, VTTC, Vtt] : ((VTName0 = Vtn & VTTContext0 = vbindContext(Vtm, Vtt, VTTC) & VRESULT = vlookupContext(Vtn, VTTC) & Vtn != Vtm) => vlookupContext(VTName0, VTTContext0) = VRESULT)).
fof('EQ-noFType', axiom, ($true => ($true <=> vnoFType = vnoFType))).
fof('EQ-someFType', axiom, ![VFType0, VFType1] : ($true => (VFType0 = VFType1 <=> vsomeFType(VFType0) = vsomeFType(VFType1)))).
fof('DIFF-someFType-noFType', axiom, ![VFType0] : ($true => vsomeFType(VFType0) != vnoFType)).
fof('isSomeFType0', axiom, ![VOptFType0] : (VOptFType0 = vnoFType => (~visSomeFType(VOptFType0)))).
fof('isSomeFType1', axiom, ![VOptFType0, Va] : (VOptFType0 = vsomeFType(Va) => visSomeFType(VOptFType0))).
fof('getSomeFType0', axiom, ![VOptFType0, Va, VRESULT] : ((VOptFType0 = vsomeFType(Va) & VRESULT = Va) => vgetSomeFType(VOptFType0) = VRESULT)).
fof('findColType0', axiom, ![VAName0, Van, VTType0, VRESULT] : ((VAName0 = Van & VTType0 = vttempty & VRESULT = vnoFType) => vfindColType(VAName0, VTType0) = VRESULT)).
fof('findColType1', axiom, ![Va, VAName0, Vttr, Vft, Van, VTType0, VRESULT] : ((VAName0 = Van & VTType0 = vttcons(vctype(Va, Vft), Vttr) & VRESULT = vsomeFType(Vft) & Van = Va) => vfindColType(VAName0, VTType0) = VRESULT)).
fof('findColType2', axiom, ![Va, VAName0, Vttr, Vft, Van, VTType0, VRESULT] : ((VAName0 = Van & VTType0 = vttcons(vctype(Va, Vft), Vttr) & VRESULT = vfindColType(Van, Vttr) & Van != Va) => vfindColType(VAName0, VTType0) = VRESULT)).
fof('projectType0', axiom, ![VAList0, VTType0, Vtt, VRESULT] : ((VAList0 = vaempty & VTType0 = Vtt & VRESULT = vsomeTType(vttempty)) => vprojectType(VAList0, VTType0) = VRESULT)).
fof('projectType1', axiom, ![VAList0, Va, Vft, VTType0, VRESULT, Vtt, Valr, Vtprest] : ((VAList0 = vacons(Va, Valr) & VTType0 = Vtt & VRESULT = vsomeTType(vttcons(vctype(Va, vgetSomeFType(Vft)), vgetSomeTType(Vtprest))) & Vft = vfindColType(Va, Vtt) & Vtprest = vprojectType(Valr, Vtt) & (visSomeFType(Vft) & visSomeTType(Vtprest))) => vprojectType(VAList0, VTType0) = VRESULT)).
fof('projectType2', axiom, ![VAList0, Va, Vft, VTType0, VRESULT, Vtt, Valr, Vtprest] : ((VAList0 = vacons(Va, Valr) & VTType0 = Vtt & VRESULT = vnoTType & Vft = vfindColType(Va, Vtt) & Vtprest = vprojectType(Valr, Vtt) & (~(visSomeFType(Vft) & visSomeTType(Vtprest)))) => vprojectType(VAList0, VTType0) = VRESULT)).
fof('ctypeIn0', axiom, ![Va, VAName0, Vft, VTType0, VFType0] : ((VAName0 = Va & VFType0 = Vft & VTType0 = vttempty) => (~vctypeIn(VAName0, VFType0, VTType0)))).
fof('ctypeIn1', axiom, ![Va, Vft2, VAName0, Vttr, Vft, VTType0, Va2, VFType0] : ((VAName0 = Va & VFType0 = Vft & VTType0 = vttcons(vctype(Va2, Vft2), Vttr)) => (vctypeIn(VAName0, VFType0, VTType0) <=> ((Va = Va2 & Vft = Vft2) | vctypeIn(Va, Vft, Vttr))))).
fof('checkPValidity0', axiom, ![Va, VPred0, VTType0, Vfv, Vtt] : ((VPred0 = vVEquals(Va, Vfv) & VTType0 = Vtt) => (vcheckPValidity(VPred0, VTType0) <=> vctypeIn(Va, vfieldType(Vfv), Vtt)))).
fof('checkPValidity1', axiom, ![Va, VPred0, VTType0, Vfv, Vtt] : ((VPred0 = vVGreater(Va, Vfv) & VTType0 = Vtt) => (vcheckPValidity(VPred0, VTType0) <=> vctypeIn(Va, vfieldType(Vfv), Vtt)))).
fof('checkPValidity2', axiom, ![Va, VPred0, VTType0, Vfv, Vtt] : ((VPred0 = vVSmaller(Va, Vfv) & VTType0 = Vtt) => (vcheckPValidity(VPred0, VTType0) <=> vctypeIn(Va, vfieldType(Vfv), Vtt)))).
fof('T-TTContext-Duplicate', axiom, ![Vx, VTTContext0, VTx, Vy, Ve, VTType0, VC, VTy, VT, VQuery0] : ((VTTContext0 = vbindContext(Vx, VTx, VC) & VQuery0 = Ve & VTType0 = VT & Vx = Vy & vtcheck(vbindContext(Vx, VTx, vbindContext(Vy, VTy, VC)), Ve, VT)) => vtcheck(VTTContext0, VQuery0, VTType0))).
fof('T-TTContext-Swap', axiom, ![Vx, VTTContext0, VTx, Vy, Ve, VTType0, VC, VTy, VT, VQuery0] : ((VTTContext0 = vbindContext(Vy, VTy, vbindContext(Vx, VTx, VC)) & VQuery0 = Ve & VTType0 = VT & Vx != Vy & vtcheck(vbindContext(Vx, VTx, vbindContext(Vy, VTy, VC)), Ve, VT)) => vtcheck(VTTContext0, VQuery0, VTType0))).
fof('T-Tvalue', axiom, ![VTTContext0, Vrt, VTType0, VTT, Val, VTTC, VQuery0] : ((VTType0 = VTT & VTTContext0 = VTTC & VQuery0 = vTvalue(vtable(Val, Vrt)) & vwelltypedtable(VTType0, vtable(Val, Vrt))) => vtcheck(VTTContext0, VQuery0, VTType0))).
fof('T-SelectAllFrom', axiom, ![VTTContext0, VTType0, VTT, Vtn, VTTC, VQuery0] : ((VTTContext0 = VTTC & VQuery0 = vSelectAllFrom(vRef(Vtn)) & VTType0 = VTT & vlookupContext(Vtn, VTTC) = vsomeTType(VTT)) => vtcheck(VTTContext0, VQuery0, VTType0))).
fof('T-SelectSomeFrom', axiom, ![VTTContext0, VTType0, VTT, Vtn, Val, VTT1, VTTC, VQuery0] : ((VTTContext0 = VTTC & VQuery0 = vSelectSomeFrom(Val, vRef(Vtn)) & VTType0 = VTT & vlookupContext(Vtn, VTTC) = vsomeTType(VTT1) & vprojectType(Val, VTT1) = vsomeTType(VTT)) => vtcheck(VTTContext0, VQuery0, VTType0))).
fof('T-SelectAllFromWhere', axiom, ![VTTContext0, Vp, VTType0, VTT, Vtn, VTTC, VQuery0] : ((VTTContext0 = VTTC & VQuery0 = vSelectAllFromWhere(vRef(Vtn), Vp) & VTType0 = VTT & vlookupContext(Vtn, VTTC) = vsomeTType(VTT) & vcheckPValidity(Vp, VTT)) => vtcheck(VTTContext0, VQuery0, VTType0))).
fof('T-SelectSomeFromWhere', axiom, ![VTTContext0, Vp, VTType0, VTT, Vtn, Val, VTT1, VTTC, VQuery0] : ((VTTContext0 = VTTC & VQuery0 = vSelectSomeFromWhere(Val, vRef(Vtn), Vp) & VTType0 = VTT & vlookupContext(Vtn, VTTC) = vsomeTType(VTT1) & vcheckPValidity(Vp, VTT1) & vprojectType(Val, VTT1) = vsomeTType(VTT)) => vtcheck(VTTContext0, VQuery0, VTType0))).
fof('T-Union', axiom, ![VTTContext0, Vq1, VTType0, VTT, VTTC, VQuery0, Vq2] : ((VTTContext0 = VTTC & VTType0 = VTT & VQuery0 = vUnion(Vq1, Vq2) & vtcheck(VTTContext0, Vq1, VTType0) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTContext0, VQuery0, VTType0))).
fof('T-Intersection', axiom, ![VTTContext0, Vq1, VTType0, VTT, VTTC, VQuery0, Vq2] : ((VTTContext0 = VTTC & VTType0 = VTT & VQuery0 = vIntersection(Vq1, Vq2) & vtcheck(VTTContext0, Vq1, VTType0) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTContext0, VQuery0, VTType0))).
fof('T-Difference', axiom, ![VTTContext0, Vq1, VTType0, VTT, VTTC, VQuery0, Vq2] : ((VTTContext0 = VTTC & VTType0 = VTT & VQuery0 = vDifference(Vq1, Vq2) & vtcheck(VTTContext0, Vq1, VTType0) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTContext0, VQuery0, VTType0))).
fof('EQ-x1', axiom, ($true => ($true <=> vx1 = vx1))).
fof('EQ-TN', axiom, ($true => ($true <=> vTN = vTN))).
fof('EQ-T1', axiom, ($true => ($true <=> vT1 = vT1))).
fof('EQ-T2', axiom, ($true => ($true <=> vT2 = vT2))).
fof('DIFF-T2-T1', axiom, ($true => vT2 != vT1)).
fof('EQ-T3', axiom, ($true => ($true <=> vT3 = vT3))).
fof('DIFF-T3-T2', axiom, ($true => vT3 != vT2)).
fof('DIFF-T3-T1', axiom, ($true => vT3 != vT1)).
fof('EQ-A1', axiom, ($true => ($true <=> vA1 = vA1))).
fof('EQ-A2', axiom, ($true => ($true <=> vA2 = vA2))).
fof('DIFF-A2-A1', axiom, ($true => vA2 != vA1)).
fof('EQ-A3', axiom, ($true => ($true <=> vA3 = vA3))).
fof('DIFF-A3-A2', axiom, ($true => vA3 != vA2)).
fof('DIFF-A3-A1', axiom, ($true => vA3 != vA1)).
fof('false-goal', conjecture, ($true => $false)).
