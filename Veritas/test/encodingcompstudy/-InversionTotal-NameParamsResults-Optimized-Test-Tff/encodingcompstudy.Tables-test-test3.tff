tff('FType_type', type, vFType: $tType).
tff('AName_type', type, vAName: $tType).
tff('AList_type', type, vAList: $tType).
tff('CType_type', type, vCType: $tType).
tff('TType_type', type, vTType: $tType).
tff('RawType_type', type, vRawType: $tType).
tff('FVal_type', type, vFVal: $tType).
tff('Row_type', type, vRow: $tType).
tff('RawTable_type', type, vRawTable: $tType).
tff('Table_type', type, vTable: $tType).
tff('ctype_type', type, vctype: (vAName * vFType) > vCType).
tff('aempty_type', type, vaempty: vAList).
tff('acons_type', type, vacons: (vAName * vAList) > vAList).
tff('ttempty_type', type, vttempty: vTType).
tff('ttcons_type', type, vttcons: (vCType * vTType) > vTType).
tff('rtempty_type', type, vrtempty: vRawType).
tff('rtcons_type', type, vrtcons: (vFType * vRawType) > vRawType).
tff('rempty_type', type, vrempty: vRow).
tff('rcons_type', type, vrcons: (vFVal * vRow) > vRow).
tff('tempty_type', type, vtempty: vRawTable).
tff('tcons_type', type, vtcons: (vRow * vRawTable) > vRawTable).
tff('table_type', type, vtable: (vAList * vRawTable) > vTable).
tff('getRaw_type', type, vgetRaw: vTable > vRawTable).
tff('getAL_type', type, vgetAL: vTable > vAList).
tff('fieldType_type', type, vfieldType: vFVal > vFType).
tff('le_type', type, vle: (vFVal * vFVal) > $o).
tff('ge_type', type, vge: (vFVal * vFVal) > $o).
tff('matchingAList_type', type, vmatchingAList: (vTType * vAList) > $o).
tff('welltypedtable_type', type, vwelltypedtable: (vTType * vTable) > $o).
tff('rawType_type', type, vrawType: vTType > vRawType).
tff('welltypedRawtable_type', type, vwelltypedRawtable: (vRawType * vRawTable) > $o).
tff('welltypedRow_type', type, vwelltypedRow: (vRawType * vRow) > $o).
tff('EQ-ctype', axiom, ![VAName0: vAName, VAName1: vAName, VFType0: vFType, VFType1: vFType] : ((VAName0 = VAName1 & VFType0 = VFType1) <=> vctype(VAName0, VFType0) = vctype(VAName1, VFType1))).
tff('EQ-aempty', axiom, $true).
tff('EQ-acons', axiom, ![VAName0: vAName, VAName1: vAName, VAList0: vAList, VAList1: vAList] : ((VAName0 = VAName1 & VAList0 = VAList1) <=> vacons(VAName0, VAList0) = vacons(VAName1, VAList1))).
tff('DIFF-acons-aempty', axiom, ![VAName0: vAName, VAList0: vAList] : vacons(VAName0, VAList0) != vaempty).
tff('EQ-ttempty', axiom, $true).
tff('EQ-ttcons', axiom, ![VCType0: vCType, VCType1: vCType, VTType0: vTType, VTType1: vTType] : ((VCType0 = VCType1 & VTType0 = VTType1) <=> vttcons(VCType0, VTType0) = vttcons(VCType1, VTType1))).
tff('DIFF-ttcons-ttempty', axiom, ![VCType0: vCType, VTType0: vTType] : vttcons(VCType0, VTType0) != vttempty).
tff('EQ-rtempty', axiom, $true).
tff('EQ-rtcons', axiom, ![VFType0: vFType, VFType1: vFType, VRawType0: vRawType, VRawType1: vRawType] : ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> vrtcons(VFType0, VRawType0) = vrtcons(VFType1, VRawType1))).
tff('DIFF-rtcons-rtempty', axiom, ![VFType0: vFType, VRawType0: vRawType] : vrtcons(VFType0, VRawType0) != vrtempty).
tff('EQ-rempty', axiom, $true).
tff('EQ-rcons', axiom, ![VFVal0: vFVal, VFVal1: vFVal, VRow0: vRow, VRow1: vRow] : ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> vrcons(VFVal0, VRow0) = vrcons(VFVal1, VRow1))).
tff('DIFF-rcons-rempty', axiom, ![VFVal0: vFVal, VRow0: vRow] : vrcons(VFVal0, VRow0) != vrempty).
tff('EQ-tempty', axiom, $true).
tff('EQ-tcons', axiom, ![VRow0: vRow, VRow1: vRow, VRawTable0: vRawTable, VRawTable1: vRawTable] : ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> vtcons(VRow0, VRawTable0) = vtcons(VRow1, VRawTable1))).
tff('DIFF-tcons-tempty', axiom, ![VRow0: vRow, VRawTable0: vRawTable] : vtcons(VRow0, VRawTable0) != vtempty).
tff('EQ-table', axiom, ![VAList0: vAList, VAList1: vAList, VRawTable0: vRawTable, VRawTable1: vRawTable] : ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> vtable(VAList0, VRawTable0) = vtable(VAList1, VRawTable1))).
tff('getRaw0', axiom, ![VTable0: vTable, Val: vAList, Vrt: vRawTable, VRESULT: vRawTable] : ((VTable0 = vtable(Val, Vrt) & VRESULT = Vrt) => vgetRaw(VTable0) = VRESULT)).
tff('getRaw-INV', axiom, ![VTable0: vTable, VRESULT: vRawTable] : (vgetRaw(VTable0) = VRESULT => ?[VTable0: vTable, Val: vAList, Vrt: vRawTable, VRESULT] : (VTable0 = vtable(Val, Vrt) & VRESULT = Vrt))).
tff('getAL0', axiom, ![VTable0: vTable, Val: vAList, Vrt: vRawTable, VRESULT: vAList] : ((VTable0 = vtable(Val, Vrt) & VRESULT = Val) => vgetAL(VTable0) = VRESULT)).
tff('getAL-INV', axiom, ![VTable0: vTable, VRESULT: vAList] : (vgetAL(VTable0) = VRESULT => ?[VTable0: vTable, Val: vAList, Vrt: vRawTable, VRESULT] : (VTable0 = vtable(Val, Vrt) & VRESULT = Val))).
tff('matchingAList0', axiom, ![VTType0: vTType, VAList0: vAList] : ((VTType0 = vttempty & VAList0 = vaempty) => vmatchingAList(VTType0, VAList0))).
tff('matchingAList1', axiom, ![VAList0: vAList, Va1: vAName, VTType0: vTType, Va2: vAName, Val: vAList, Vf: vFType, Vtt: vTType] : ((VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val)) => (vmatchingAList(VTType0, VAList0) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val))))).
tff('matchingAList2', axiom, ![VVAR0: vTType, Vtt: vTType, VVAR1: vAList, Val: vAList] : ((VVAR0 = Vtt & VVAR1 = Val & (VVAR0 != vttempty | VVAR1 != vaempty) & (![Vtt: vTType, Va10: vAName, Vf0: vFType, Vtt0: vTType] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Val: vAList, Va20: vAName, Val0: vAList] : Val != vacons(Va20, Val0))) => (~vmatchingAList(VVAR0, VVAR1)))).
tff('matchingAList-true-INV', axiom, ![VTType0: vTType, VAList0: vAList] : (vmatchingAList(VTType0, VAList0) => ((VTType0 = vttempty & VAList0 = vaempty) | ?[VAList0: vAList, Va1: vAName, VTType0: vTType, Va2: vAName, Val: vAList, Vf: vFType, Vtt: vTType] : (VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val) & (Va1 = Va2 & vmatchingAList(Vtt, Val)))))).
tff('matchingAList-false-INV', axiom, ![VTType0: vTType, VAList0: vAList] : ((~vmatchingAList(VTType0, VAList0)) => (?[VAList0: vAList, Va1: vAName, VTType0: vTType, Va2: vAName, Val: vAList, Vf: vFType, Vtt: vTType] : (VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val) & (~(Va1 = Va2 & vmatchingAList(Vtt, Val)))) | ?[Vtt: vTType, Val: vAList, VTType0, VAList0] : ((Vtt != vttempty | Val != vaempty) & (![Vtt: vTType, Va10: vAName, Vf0: vFType, Vtt0: vTType] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Val: vAList, Va20: vAName, Val0: vAList] : Val != vacons(Va20, Val0)) & VTType0 = Vtt & VAList0 = Val)))).
tff('welltypedtable0', axiom, ![Vt: vRawTable, VTType0: vTType, Val: vAList, Vtt: vTType, VTable0: vTable] : ((VTType0 = Vtt & VTable0 = vtable(Val, Vt)) => (vwelltypedtable(VTType0, VTable0) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt))))).
tff('welltypedtable-true-INV', axiom, ![VTType0: vTType, VTable0: vTable] : (vwelltypedtable(VTType0, VTable0) => ?[Vt: vRawTable, VTType0, Val: vAList, Vtt: vTType, VTable0: vTable] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt))))).
tff('welltypedtable-false-INV', axiom, ![VTType0: vTType, VTable0: vTable] : ((~vwelltypedtable(VTType0, VTable0)) => ?[Vt: vRawTable, VTType0, Val: vAList, Vtt: vTType, VTable0: vTable] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (~(vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))))).
tff('rawType0', axiom, ![VTType0: vTType, VRESULT: vRawType] : ((VTType0 = vttempty & VRESULT = vrtempty) => vrawType(VTType0) = VRESULT)).
tff('rawType1', axiom, ![Va: vAName, Vft: vFType, VTType0: vTType, VRESULT: vRawType, Vtt: vTType] : ((VTType0 = vttcons(vctype(Va, Vft), Vtt) & VRESULT = vrtcons(Vft, vrawType(Vtt))) => vrawType(VTType0) = VRESULT)).
tff('rawType-INV', axiom, ![VTType0: vTType, VRESULT: vRawType] : (vrawType(VTType0) = VRESULT => ((VTType0 = vttempty & VRESULT = vrtempty) | ?[Va: vAName, Vft: vFType, VTType0: vTType, VRESULT: vRawType, Vtt: vTType] : (VTType0 = vttcons(vctype(Va, Vft), Vtt) & VRESULT = vrtcons(Vft, vrawType(Vtt)))))).
tff('welltypedRawtable0', axiom, ![VRawType0: vRawType, Vrt, VRawTable0: vRawTable] : ((VRawType0 = Vrt & VRawTable0 = vtempty) => vwelltypedRawtable(VRawType0, VRawTable0))).
tff('welltypedRawtable1', axiom, ![Vt: vRawTable, Vrt: vRawType, VRawTable0: vRawTable, VRawType0: vRawType, Vr: vRow] : ((VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt)) => (vwelltypedRawtable(VRawType0, VRawTable0) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt))))).
tff('welltypedRawtable-true-INV', axiom, ![VRawType0: vRawType, VRawTable0: vRawTable] : (vwelltypedRawtable(VRawType0, VRawTable0) => (?[VRawType0, Vrt, VRawTable0: vRawTable] : (VRawType0 = Vrt & VRawTable0 = vtempty) | ?[Vt: vRawTable, Vrt: vRawType, VRawTable0: vRawTable, VRawType0, Vr: vRow] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))))).
tff('welltypedRawtable-false-INV', axiom, ![VRawType0: vRawType, VRawTable0: vRawTable] : ((~vwelltypedRawtable(VRawType0, VRawTable0)) => ?[Vt: vRawTable, Vrt: vRawType, VRawTable0: vRawTable, VRawType0, Vr: vRow] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (~(vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))))).
tff('welltypedRow0', axiom, ![VRawType0: vRawType, VRow0: vRow] : ((VRawType0 = vrtempty & VRow0 = vrempty) => vwelltypedRow(VRawType0, VRow0))).
tff('welltypedRow1', axiom, ![Vv: vFVal, VRow0: vRow, Vrt: vRawType, Vft: vFType, VRawType0: vRawType, Vr: vRow] : ((VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr)) => (vwelltypedRow(VRawType0, VRow0) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr))))).
tff('welltypedRow2', axiom, ![VVAR0: vRawType, Vrt: vRawType, VVAR1: vRow, Vr: vRow] : ((VVAR0 = Vrt & VVAR1 = Vr & (VVAR0 != vrtempty | VVAR1 != vrempty) & (![Vrt: vRawType, Vft0: vFType, Vrt0: vRawType] : Vrt != vrtcons(Vft0, Vrt0) | ![Vr: vRow, Vv0: vFVal, Vr0: vRow] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(VVAR0, VVAR1)))).
tff('welltypedRow-true-INV', axiom, ![VRawType0: vRawType, VRow0: vRow] : (vwelltypedRow(VRawType0, VRow0) => ((VRawType0 = vrtempty & VRow0 = vrempty) | ?[Vv: vFVal, VRow0: vRow, Vrt: vRawType, Vft: vFType, VRawType0: vRawType, Vr: vRow] : (VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr) & (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))))).
tff('welltypedRow-false-INV', axiom, ![VRawType0: vRawType, VRow0: vRow] : ((~vwelltypedRow(VRawType0, VRow0)) => (?[Vv: vFVal, VRow0: vRow, Vrt: vRawType, Vft: vFType, VRawType0: vRawType, Vr: vRow] : (VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr) & (~(vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))) | ?[Vrt: vRawType, Vr: vRow, VRawType0, VRow0] : ((Vrt != vrtempty | Vr != vrempty) & (![Vrt: vRawType, Vft0: vFType, Vrt0: vRawType] : Vrt != vrtcons(Vft0, Vrt0) | ![Vr: vRow, Vv0: vFVal, Vr0: vRow] : Vr != vrcons(Vv0, Vr0)) & VRawType0 = Vrt & VRow0 = Vr)))).
tff('test3', conjecture, ![Vx: vFVal, Vy: vFVal, Vyt: vFType, Va: vAName, Vxt: vFType, Vb: vAName, VTType0: vTType, Vtt: vTType, VTable0: vTable] : ((VTType0 = Vtt & VTable0 = vtable(vacons(Va, vacons(Vb, vaempty)), vtcons(vrcons(Vx, vrcons(Vy, vrempty)), vtempty)) & vfieldType(Vx) = Vxt & vfieldType(Vy) = Vyt & Vtt = vttcons(vctype(Va, Vxt), vttcons(vctype(Vb, Vyt), vttempty))) => vwelltypedtable(VTType0, VTable0))).
