tff('FType_type', type, vFType: $tType).
tff('AName_type', type, vAName: $tType).
tff('AList_type', type, vAList: $tType).
tff('CType_type', type, vCType: $tType).
tff('TType_type', type, vTType: $tType).
tff('RawType_type', type, vRawType: $tType).
tff('FVal_type', type, vFVal: $tType).
tff('Row_type', type, vRow: $tType).
tff('RawTable_type', type, vRawTable: $tType).
tff('Table_type', type, vTable: $tType).
tff('TStore_type', type, vTStore: $tType).
tff('TName_type', type, vTName: $tType).
tff('OptTable_type', type, vOptTable: $tType).
tff('Pred_type', type, vPred: $tType).
tff('Query_type', type, vQuery: $tType).
tff('TRef_type', type, vTRef: $tType).
tff('TTContext_type', type, vTTContext: $tType).
tff('OptTType_type', type, vOptTType: $tType).
tff('OptFType_type', type, vOptFType: $tType).
tff('ctype_type', type, vctype: (vAName * vFType) > vCType).
tff('aempty_type', type, vaempty: vAList).
tff('acons_type', type, vacons: (vAName * vAList) > vAList).
tff('ttempty_type', type, vttempty: vTType).
tff('ttcons_type', type, vttcons: (vCType * vTType) > vTType).
tff('rtempty_type', type, vrtempty: vRawType).
tff('rtcons_type', type, vrtcons: (vFType * vRawType) > vRawType).
tff('rempty_type', type, vrempty: vRow).
tff('rcons_type', type, vrcons: (vFVal * vRow) > vRow).
tff('tempty_type', type, vtempty: vRawTable).
tff('tcons_type', type, vtcons: (vRow * vRawTable) > vRawTable).
tff('table_type', type, vtable: (vAList * vRawTable) > vTable).
tff('noTable_type', type, vnoTable: vOptTable).
tff('someTable_type', type, vsomeTable: vTable > vOptTable).
tff('emptyStore_type', type, vemptyStore: vTStore).
tff('bindStore_type', type, vbindStore: (vTName * vTable * vTStore) > vTStore).
tff('VEquals_type', type, vVEquals: (vAName * vFVal) > vPred).
tff('VGreater_type', type, vVGreater: (vAName * vFVal) > vPred).
tff('VSmaller_type', type, vVSmaller: (vAName * vFVal) > vPred).
tff('Ref_type', type, vRef: vTName > vTRef).
tff('Tvalue_type', type, vTvalue: vTable > vQuery).
tff('SelectAllFrom_type', type, vSelectAllFrom: vTRef > vQuery).
tff('SelectSomeFrom_type', type, vSelectSomeFrom: (vAList * vTRef) > vQuery).
tff('SelectAllFromWhere_type', type, vSelectAllFromWhere: (vTRef * vPred) > vQuery).
tff('SelectSomeFromWhere_type', type, vSelectSomeFromWhere: (vAList * vTRef * vPred) > vQuery).
tff('Union_type', type, vUnion: (vQuery * vQuery) > vQuery).
tff('Intersection_type', type, vIntersection: (vQuery * vQuery) > vQuery).
tff('Difference_type', type, vDifference: (vQuery * vQuery) > vQuery).
tff('noTType_type', type, vnoTType: vOptTType).
tff('someTType_type', type, vsomeTType: vTType > vOptTType).
tff('emptyContext_type', type, vemptyContext: vTTContext).
tff('bindContext_type', type, vbindContext: (vTName * vTType * vTTContext) > vTTContext).
tff('noFType_type', type, vnoFType: vOptFType).
tff('someFType_type', type, vsomeFType: vFType > vOptFType).
tff('getRaw_type', type, vgetRaw: vTable > vRawTable).
tff('getAL_type', type, vgetAL: vTable > vAList).
tff('fieldType_type', type, vfieldType: vFVal > vFType).
tff('le_type', type, vle: (vFVal * vFVal) > $o).
tff('ge_type', type, vge: (vFVal * vFVal) > $o).
tff('matchingAList_type', type, vmatchingAList: (vTType * vAList) > $o).
tff('welltypedtable_type', type, vwelltypedtable: (vTType * vTable) > $o).
tff('rawType_type', type, vrawType: vTType > vRawType).
tff('welltypedRawtable_type', type, vwelltypedRawtable: (vRawType * vRawTable) > $o).
tff('welltypedRow_type', type, vwelltypedRow: (vRawType * vRow) > $o).
tff('isSomeTable_type', type, visSomeTable: vOptTable > $o).
tff('lookupStore_type', type, vlookupStore: (vTName * vTStore) > vOptTable).
tff('isValue_type', type, visValue: vQuery > $o).
tff('isSomeTType_type', type, visSomeTType: vOptTType > $o).
tff('lookupContext_type', type, vlookupContext: (vTName * vTTContext) > vOptTType).
tff('isSomeFType_type', type, visSomeFType: vOptFType > $o).
tff('findColType_type', type, vfindColType: (vAName * vTType) > vOptFType).
tff('projectType_type', type, vprojectType: (vAList * vTType) > vOptTType).
tff('ctypeIn_type', type, vctypeIn: (vAName * vFType * vTType) > $o).
tff('checkPValidity_type', type, vcheckPValidity: (vPred * vTType) > $o).
tff('tcheck_type', type, vtcheck: (vTTContext * vQuery * vTType) > $o).
tff('getSomeTable_type', type, vgetSomeTable: vOptTable > vTable).
tff('getSomeTType_type', type, vgetSomeTType: vOptTType > vTType).
tff('getSomeFType_type', type, vgetSomeFType: vOptFType > vFType).
tff('EQ-ctype', axiom, ![VAName0: vAName, VVAR1: vCType, VFType0: vFType, VVAR0: vCType, VAName1: vAName, VFType1: vFType] : ((VVAR0 = vctype(VAName0, VFType0) & VVAR1 = vctype(VAName1, VFType1)) => ((VAName0 = VAName1 & VFType0 = VFType1) <=> VVAR0 = VVAR1))).
tff('EQ-aempty', axiom, ![VVAR0: vAList] : (VVAR0 = vaempty => $true)).
tff('EQ-acons', axiom, ![VAList0: vAList, VAName0: vAName, VVAR1: vAList, VVAR0: vAList, VAName1: vAName, VAList1: vAList] : ((VVAR0 = vacons(VAName0, VAList0) & VVAR1 = vacons(VAName1, VAList1)) => ((VAName0 = VAName1 & VAList0 = VAList1) <=> VVAR0 = VVAR1))).
tff('DIFF-acons-aempty', axiom, ![VVAR0: vAList, VAName0: vAName, VAList0: vAList, VVAR1: vAList] : ((VVAR0 = vacons(VAName0, VAList0) & VVAR1 = vaempty) => VVAR0 != VVAR1)).
tff('EQ-ttempty', axiom, ![VVAR0: vTType] : (VVAR0 = vttempty => $true)).
tff('EQ-ttcons', axiom, ![VTType0: vTType, VTType1: vTType, VCType0: vCType, VVAR1: vTType, VVAR0: vTType, VCType1: vCType] : ((VVAR0 = vttcons(VCType0, VTType0) & VVAR1 = vttcons(VCType1, VTType1)) => ((VCType0 = VCType1 & VTType0 = VTType1) <=> VVAR0 = VVAR1))).
tff('DIFF-ttcons-ttempty', axiom, ![VVAR0: vTType, VCType0: vCType, VTType0: vTType, VVAR1: vTType] : ((VVAR0 = vttcons(VCType0, VTType0) & VVAR1 = vttempty) => VVAR0 != VVAR1)).
tff('EQ-rtempty', axiom, ![VVAR0: vRawType] : (VVAR0 = vrtempty => $true)).
tff('EQ-rtcons', axiom, ![VRawType1: vRawType, VRawType0: vRawType, VVAR1: vRawType, VFType0: vFType, VVAR0: vRawType, VFType1: vFType] : ((VVAR0 = vrtcons(VFType0, VRawType0) & VVAR1 = vrtcons(VFType1, VRawType1)) => ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> VVAR0 = VVAR1))).
tff('DIFF-rtcons-rtempty', axiom, ![VVAR0: vRawType, VFType0: vFType, VRawType0: vRawType, VVAR1: vRawType] : ((VVAR0 = vrtcons(VFType0, VRawType0) & VVAR1 = vrtempty) => VVAR0 != VVAR1)).
tff('EQ-rempty', axiom, ![VVAR0: vRow] : (VVAR0 = vrempty => $true)).
tff('EQ-rcons', axiom, ![VRow0: vRow, VFVal1: vFVal, VVAR1: vRow, VVAR0: vRow, VFVal0: vFVal, VRow1: vRow] : ((VVAR0 = vrcons(VFVal0, VRow0) & VVAR1 = vrcons(VFVal1, VRow1)) => ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> VVAR0 = VVAR1))).
tff('DIFF-rcons-rempty', axiom, ![VVAR0: vRow, VFVal0: vFVal, VRow0: vRow, VVAR1: vRow] : ((VVAR0 = vrcons(VFVal0, VRow0) & VVAR1 = vrempty) => VVAR0 != VVAR1)).
tff('EQ-tempty', axiom, ![VVAR0: vRawTable] : (VVAR0 = vtempty => $true)).
tff('EQ-tcons', axiom, ![VRow0: vRow, VRawTable0: vRawTable, VRawTable1: vRawTable, VVAR1: vRawTable, VVAR0: vRawTable, VRow1: vRow] : ((VVAR0 = vtcons(VRow0, VRawTable0) & VVAR1 = vtcons(VRow1, VRawTable1)) => ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> VVAR0 = VVAR1))).
tff('DIFF-tcons-tempty', axiom, ![VVAR0: vRawTable, VRow0: vRow, VRawTable0: vRawTable, VVAR1: vRawTable] : ((VVAR0 = vtcons(VRow0, VRawTable0) & VVAR1 = vtempty) => VVAR0 != VVAR1)).
tff('EQ-table', axiom, ![VAList0: vAList, VRawTable0: vRawTable, VRawTable1: vRawTable, VVAR1: vTable, VVAR0: vTable, VAList1: vAList] : ((VVAR0 = vtable(VAList0, VRawTable0) & VVAR1 = vtable(VAList1, VRawTable1)) => ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> VVAR0 = VVAR1))).
tff('getRaw0', axiom, ![VVAR0: vTable, Val: vAList, Vrt: vRawTable, VVAR1: vRawTable] : ((VVAR0 = vtable(Val, Vrt) & VVAR1 = vgetRaw(VVAR0)) => VVAR1 = Vrt)).
tff('getAL0', axiom, ![VVAR0: vTable, Val: vAList, Vrt: vRawTable, VVAR1: vAList] : ((VVAR0 = vtable(Val, Vrt) & VVAR1 = vgetAL(VVAR0)) => VVAR1 = Val)).
tff('matchingAList0', axiom, ![VVAR0: vTType, VVAR1: vAList] : ((VVAR0 = vttempty & VVAR1 = vaempty) => vmatchingAList(VVAR0, VVAR1))).
tff('matchingAList1', axiom, ![Va1: vAName, Va2: vAName, VVAR2: vAList, VVAR1: vTType, Val: vAList, VVAR0: vCType, Vf: vFType, Vtt: vTType] : ((VVAR0 = vctype(Va1, Vf) & VVAR1 = vttcons(VVAR0, Vtt) & VVAR2 = vacons(Va2, Val)) => (vmatchingAList(VVAR1, VVAR2) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val))))).
tff('matchingAList2', axiom, ![VVAR0: vTType, VVAR1: vAList, Vtt: vTType, Val: vAList] : ((VVAR0 = vttempty & VVAR1 = vaempty & (Vtt != VVAR0 | Val != VVAR1) & (![Vf0: vFType, Vtt0: vTType, Va10: vAName, VVAR2: vCType, VVAR3: vTType, Vtt] : ((~VVAR2 = vctype(Va10, Vf0)) | (~VVAR3 = vttcons(VVAR2, Vtt0)) | Vtt != VVAR3) | ![VVAR4: vAList, Va20: vAName, Val0: vAList, Val] : ((~VVAR4 = vacons(Va20, Val0)) | Val != VVAR4))) => (~vmatchingAList(Vtt, Val)))).
tff('welltypedtable0', axiom, ![Vt: vRawTable, VVAR1: vRawType, Val: vAList, VVAR0: vTable, Vtt: vTType] : ((VVAR0 = vtable(Val, Vt) & VVAR1 = vrawType(Vtt)) => (vwelltypedtable(Vtt, VVAR0) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(VVAR1, Vt))))).
tff('rawType0', axiom, ![VVAR0: vTType, VVAR1: vRawType, VVAR2: vRawType] : ((VVAR0 = vttempty & VVAR1 = vrawType(VVAR0) & VVAR2 = vrtempty) => VVAR1 = VVAR2)).
tff('rawType1', axiom, ![Va: vAName, Vft: vFType, VVAR2: vRawType, VVAR3: vRawType, VVAR4: vRawType, VVAR1: vTType, VVAR0: vCType, Vtt: vTType] : ((VVAR1 = vttcons(VVAR0, Vtt) & VVAR3 = vrawType(VVAR1) & VVAR2 = vrawType(Vtt) & VVAR0 = vctype(Va, Vft) & VVAR4 = vrtcons(Vft, VVAR2)) => VVAR3 = VVAR4)).
tff('welltypedRawtable0', axiom, ![VVAR0: vRawTable, Vrt: vRawType] : (VVAR0 = vtempty => vwelltypedRawtable(Vrt, VVAR0))).
tff('welltypedRawtable1', axiom, ![VVAR0: vRawTable, Vr: vRow, Vt: vRawTable, Vrt: vRawType] : (VVAR0 = vtcons(Vr, Vt) => (vwelltypedRawtable(Vrt, VVAR0) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt))))).
tff('welltypedRow0', axiom, ![VVAR0: vRawType, VVAR1: vRow] : ((VVAR0 = vrtempty & VVAR1 = vrempty) => vwelltypedRow(VVAR0, VVAR1))).
tff('welltypedRow1', axiom, ![Vv: vFVal, Vrt: vRawType, Vft: vFType, Vr: vRow, VVAR2: vFType, VVAR1: vRow, VVAR0: vRawType] : ((VVAR0 = vrtcons(Vft, Vrt) & VVAR1 = vrcons(Vv, Vr) & VVAR2 = vfieldType(Vv)) => (vwelltypedRow(VVAR0, VVAR1) <=> (VVAR2 = Vft & vwelltypedRow(Vrt, Vr))))).
tff('welltypedRow2', axiom, ![VVAR0: vRawType, VVAR1: vRow, Vrt: vRawType, Vr: vRow] : ((VVAR0 = vrtempty & VVAR1 = vrempty & (Vrt != VVAR0 | Vr != VVAR1) & (![VVAR2: vRawType, Vft0: vFType, Vrt0: vRawType, Vrt] : ((~VVAR2 = vrtcons(Vft0, Vrt0)) | Vrt != VVAR2) | ![VVAR3: vRow, Vv0: vFVal, Vr0: vRow, Vr] : ((~VVAR3 = vrcons(Vv0, Vr0)) | Vr != VVAR3))) => (~vwelltypedRow(Vrt, Vr)))).
tff('EQ-noTable', axiom, ![VVAR0: vOptTable] : (VVAR0 = vnoTable => $true)).
tff('EQ-someTable', axiom, ![VVAR0: vOptTable, VTable0: vTable, VVAR1: vOptTable, VTable1: vTable] : ((VVAR0 = vsomeTable(VTable0) & VVAR1 = vsomeTable(VTable1)) => (VTable0 = VTable1 <=> VVAR0 = VVAR1))).
tff('DIFF-someTable-noTable', axiom, ![VVAR0: vOptTable, VTable0: vTable, VVAR1: vOptTable] : ((VVAR0 = vsomeTable(VTable0) & VVAR1 = vnoTable) => VVAR0 != VVAR1)).
tff('isSomeTable0', axiom, ![VVAR0: vOptTable] : (VVAR0 = vnoTable => (~visSomeTable(VVAR0)))).
tff('isSomeTable1', axiom, ![VVAR0: vOptTable, Vt: vTable] : (VVAR0 = vsomeTable(Vt) => visSomeTable(VVAR0))).
tff('getSomeTable0', axiom, ![VVAR0: vOptTable, Vt: vTable, VVAR1: vTable] : ((VVAR0 = vsomeTable(Vt) & VVAR1 = vgetSomeTable(VVAR0)) => VVAR1 = Vt)).
tff('EQ-emptyStore', axiom, ![VVAR0: vTStore] : (VVAR0 = vemptyStore => $true)).
tff('EQ-bindStore', axiom, ![VTable1: vTable, VTStore1: vTStore, VTName0: vTName, VTStore0: vTStore, VVAR1: vTStore, VVAR0: vTStore, VTName1: vTName, VTable0: vTable] : ((VVAR0 = vbindStore(VTName0, VTable0, VTStore0) & VVAR1 = vbindStore(VTName1, VTable1, VTStore1)) => ((VTName0 = VTName1 & (VTable0 = VTable1 & VTStore0 = VTStore1)) <=> VVAR0 = VVAR1))).
tff('DIFF-bindStore-emptyStore', axiom, ![VTName0: vTName, VTStore0: vTStore, VVAR1: vTStore, VVAR0: vTStore, VTable0: vTable] : ((VVAR0 = vbindStore(VTName0, VTable0, VTStore0) & VVAR1 = vemptyStore) => VVAR0 != VVAR1)).
tff('lookupStore0', axiom, ![VVAR0: vTStore, VVAR1: vOptTable, Vn: vTName, VVAR2: vOptTable] : ((VVAR0 = vemptyStore & VVAR1 = vlookupStore(Vn, VVAR0) & VVAR2 = vnoTable) => VVAR1 = VVAR2)).
tff('lookupStore1', axiom, ![Vt: vTable, VTS: vTStore, VVAR2: vOptTable, VVAR1: vOptTable, Vm: vTName, VVAR0: vTStore, Vn: vTName] : ((VVAR0 = vbindStore(Vm, Vt, VTS) & VVAR1 = vlookupStore(Vn, VVAR0) & VVAR2 = vsomeTable(Vt) & Vn = Vm) => VVAR1 = VVAR2)).
tff('lookupStore2', axiom, ![Vt: vTable, VTS: vTStore, VVAR2: vOptTable, VVAR1: vOptTable, Vm: vTName, VVAR0: vTStore, Vn: vTName] : ((VVAR0 = vbindStore(Vm, Vt, VTS) & VVAR1 = vlookupStore(Vn, VVAR0) & VVAR2 = vlookupStore(Vn, VTS) & Vn != Vm) => VVAR1 = VVAR2)).
tff('EQ-VEquals', axiom, ![VAName0: vAName, VFVal1: vFVal, VVAR1: vPred, VVAR0: vPred, VAName1: vAName, VFVal0: vFVal] : ((VVAR0 = vVEquals(VAName0, VFVal0) & VVAR1 = vVEquals(VAName1, VFVal1)) => ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> VVAR0 = VVAR1))).
tff('EQ-VGreater', axiom, ![VAName0: vAName, VFVal1: vFVal, VVAR1: vPred, VVAR0: vPred, VAName1: vAName, VFVal0: vFVal] : ((VVAR0 = vVGreater(VAName0, VFVal0) & VVAR1 = vVGreater(VAName1, VFVal1)) => ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> VVAR0 = VVAR1))).
tff('DIFF-VGreater-VEquals', axiom, ![VAName0: vAName, VFVal1: vFVal, VVAR1: vPred, VVAR0: vPred, VAName1: vAName, VFVal0: vFVal] : ((VVAR0 = vVGreater(VAName0, VFVal0) & VVAR1 = vVEquals(VAName1, VFVal1)) => VVAR0 != VVAR1)).
tff('EQ-VSmaller', axiom, ![VAName0: vAName, VFVal1: vFVal, VVAR1: vPred, VVAR0: vPred, VAName1: vAName, VFVal0: vFVal] : ((VVAR0 = vVSmaller(VAName0, VFVal0) & VVAR1 = vVSmaller(VAName1, VFVal1)) => ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> VVAR0 = VVAR1))).
tff('DIFF-VSmaller-VGreater', axiom, ![VAName0: vAName, VFVal1: vFVal, VVAR1: vPred, VVAR0: vPred, VAName1: vAName, VFVal0: vFVal] : ((VVAR0 = vVSmaller(VAName0, VFVal0) & VVAR1 = vVGreater(VAName1, VFVal1)) => VVAR0 != VVAR1)).
tff('DIFF-VSmaller-VEquals', axiom, ![VAName0: vAName, VFVal1: vFVal, VVAR1: vPred, VVAR0: vPred, VAName1: vAName, VFVal0: vFVal] : ((VVAR0 = vVSmaller(VAName0, VFVal0) & VVAR1 = vVEquals(VAName1, VFVal1)) => VVAR0 != VVAR1)).
tff('EQ-Ref', axiom, ![VVAR0: vTRef, VTName0: vTName, VVAR1: vTRef, VTName1: vTName] : ((VVAR0 = vRef(VTName0) & VVAR1 = vRef(VTName1)) => (VTName0 = VTName1 <=> VVAR0 = VVAR1))).
tff('EQ-Tvalue', axiom, ![VVAR0: vQuery, VTable0: vTable, VVAR1: vQuery, VTable1: vTable] : ((VVAR0 = vTvalue(VTable0) & VVAR1 = vTvalue(VTable1)) => (VTable0 = VTable1 <=> VVAR0 = VVAR1))).
tff('EQ-SelectAllFrom', axiom, ![VVAR0: vQuery, VTRef0: vTRef, VVAR1: vQuery, VTRef1: vTRef] : ((VVAR0 = vSelectAllFrom(VTRef0) & VVAR1 = vSelectAllFrom(VTRef1)) => (VTRef0 = VTRef1 <=> VVAR0 = VVAR1))).
tff('DIFF-SelectAllFrom-Tvalue', axiom, ![VVAR0: vQuery, VTRef0: vTRef, VVAR1: vQuery, VTable0: vTable] : ((VVAR0 = vSelectAllFrom(VTRef0) & VVAR1 = vTvalue(VTable0)) => VVAR0 != VVAR1)).
tff('EQ-SelectSomeFrom', axiom, ![VAList0: vAList, VVAR1: vQuery, VVAR0: vQuery, VAList1: vAList, VTRef1: vTRef, VTRef0: vTRef] : ((VVAR0 = vSelectSomeFrom(VAList0, VTRef0) & VVAR1 = vSelectSomeFrom(VAList1, VTRef1)) => ((VAList0 = VAList1 & VTRef0 = VTRef1) <=> VVAR0 = VVAR1))).
tff('DIFF-SelectSomeFrom-SelectAllFrom', axiom, ![VAList0: vAList, VVAR1: vQuery, VVAR0: vQuery, VTRef1: vTRef, VTRef0: vTRef] : ((VVAR0 = vSelectSomeFrom(VAList0, VTRef0) & VVAR1 = vSelectAllFrom(VTRef1)) => VVAR0 != VVAR1)).
tff('DIFF-SelectSomeFrom-Tvalue', axiom, ![VAList0: vAList, VVAR1: vQuery, VVAR0: vQuery, VTable0: vTable, VTRef0: vTRef] : ((VVAR0 = vSelectSomeFrom(VAList0, VTRef0) & VVAR1 = vTvalue(VTable0)) => VVAR0 != VVAR1)).
tff('EQ-SelectAllFromWhere', axiom, ![VPred0: vPred, VPred1: vPred, VVAR1: vQuery, VVAR0: vQuery, VTRef1: vTRef, VTRef0: vTRef] : ((VVAR0 = vSelectAllFromWhere(VTRef0, VPred0) & VVAR1 = vSelectAllFromWhere(VTRef1, VPred1)) => ((VTRef0 = VTRef1 & VPred0 = VPred1) <=> VVAR0 = VVAR1))).
tff('DIFF-SelectAllFromWhere-SelectSomeFrom', axiom, ![VAList0: vAList, VPred0: vPred, VVAR1: vQuery, VVAR0: vQuery, VTRef1: vTRef, VTRef0: vTRef] : ((VVAR0 = vSelectAllFromWhere(VTRef0, VPred0) & VVAR1 = vSelectSomeFrom(VAList0, VTRef1)) => VVAR0 != VVAR1)).
tff('DIFF-SelectAllFromWhere-SelectAllFrom', axiom, ![VPred0: vPred, VVAR1: vQuery, VVAR0: vQuery, VTRef1: vTRef, VTRef0: vTRef] : ((VVAR0 = vSelectAllFromWhere(VTRef0, VPred0) & VVAR1 = vSelectAllFrom(VTRef1)) => VVAR0 != VVAR1)).
tff('DIFF-SelectAllFromWhere-Tvalue', axiom, ![VPred0: vPred, VVAR1: vQuery, VVAR0: vQuery, VTable0: vTable, VTRef0: vTRef] : ((VVAR0 = vSelectAllFromWhere(VTRef0, VPred0) & VVAR1 = vTvalue(VTable0)) => VVAR0 != VVAR1)).
tff('EQ-SelectSomeFromWhere', axiom, ![VAList0: vAList, VPred0: vPred, VPred1: vPred, VVAR1: vQuery, VVAR0: vQuery, VAList1: vAList, VTRef1: vTRef, VTRef0: vTRef] : ((VVAR0 = vSelectSomeFromWhere(VAList0, VTRef0, VPred0) & VVAR1 = vSelectSomeFromWhere(VAList1, VTRef1, VPred1)) => ((VAList0 = VAList1 & (VTRef0 = VTRef1 & VPred0 = VPred1)) <=> VVAR0 = VVAR1))).
tff('DIFF-SelectSomeFromWhere-SelectAllFromWhere', axiom, ![VAList0: vAList, VPred0: vPred, VPred1: vPred, VVAR1: vQuery, VVAR0: vQuery, VTRef1: vTRef, VTRef0: vTRef] : ((VVAR0 = vSelectSomeFromWhere(VAList0, VTRef0, VPred0) & VVAR1 = vSelectAllFromWhere(VTRef1, VPred1)) => VVAR0 != VVAR1)).
tff('DIFF-SelectSomeFromWhere-SelectSomeFrom', axiom, ![VAList0: vAList, VPred0: vPred, VVAR1: vQuery, VVAR0: vQuery, VAList1: vAList, VTRef1: vTRef, VTRef0: vTRef] : ((VVAR0 = vSelectSomeFromWhere(VAList0, VTRef0, VPred0) & VVAR1 = vSelectSomeFrom(VAList1, VTRef1)) => VVAR0 != VVAR1)).
tff('DIFF-SelectSomeFromWhere-SelectAllFrom', axiom, ![VAList0: vAList, VPred0: vPred, VVAR1: vQuery, VVAR0: vQuery, VTRef1: vTRef, VTRef0: vTRef] : ((VVAR0 = vSelectSomeFromWhere(VAList0, VTRef0, VPred0) & VVAR1 = vSelectAllFrom(VTRef1)) => VVAR0 != VVAR1)).
tff('DIFF-SelectSomeFromWhere-Tvalue', axiom, ![VAList0: vAList, VPred0: vPred, VVAR1: vQuery, VVAR0: vQuery, VTable0: vTable, VTRef0: vTRef] : ((VVAR0 = vSelectSomeFromWhere(VAList0, VTRef0, VPred0) & VVAR1 = vTvalue(VTable0)) => VVAR0 != VVAR1)).
tff('EQ-Union', axiom, ![VQuery3: vQuery, VQuery2: vQuery, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery] : ((VVAR0 = vUnion(VQuery0, VQuery1) & VVAR1 = vUnion(VQuery2, VQuery3)) => ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> VVAR0 = VVAR1))).
tff('DIFF-Union-SelectSomeFromWhere', axiom, ![VAList0: vAList, VPred0: vPred, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vUnion(VQuery0, VQuery1) & VVAR1 = vSelectSomeFromWhere(VAList0, VTRef0, VPred0)) => VVAR0 != VVAR1)).
tff('DIFF-Union-SelectAllFromWhere', axiom, ![VPred0: vPred, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vUnion(VQuery0, VQuery1) & VVAR1 = vSelectAllFromWhere(VTRef0, VPred0)) => VVAR0 != VVAR1)).
tff('DIFF-Union-SelectSomeFrom', axiom, ![VAList0: vAList, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vUnion(VQuery0, VQuery1) & VVAR1 = vSelectSomeFrom(VAList0, VTRef0)) => VVAR0 != VVAR1)).
tff('DIFF-Union-SelectAllFrom', axiom, ![VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vUnion(VQuery0, VQuery1) & VVAR1 = vSelectAllFrom(VTRef0)) => VVAR0 != VVAR1)).
tff('DIFF-Union-Tvalue', axiom, ![VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VTable0: vTable, VQuery0: vQuery] : ((VVAR0 = vUnion(VQuery0, VQuery1) & VVAR1 = vTvalue(VTable0)) => VVAR0 != VVAR1)).
tff('EQ-Intersection', axiom, ![VQuery3: vQuery, VQuery2: vQuery, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery] : ((VVAR0 = vIntersection(VQuery0, VQuery1) & VVAR1 = vIntersection(VQuery2, VQuery3)) => ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> VVAR0 = VVAR1))).
tff('DIFF-Intersection-Union', axiom, ![VQuery3: vQuery, VQuery2: vQuery, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery] : ((VVAR0 = vIntersection(VQuery0, VQuery1) & VVAR1 = vUnion(VQuery2, VQuery3)) => VVAR0 != VVAR1)).
tff('DIFF-Intersection-SelectSomeFromWhere', axiom, ![VAList0: vAList, VPred0: vPred, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vIntersection(VQuery0, VQuery1) & VVAR1 = vSelectSomeFromWhere(VAList0, VTRef0, VPred0)) => VVAR0 != VVAR1)).
tff('DIFF-Intersection-SelectAllFromWhere', axiom, ![VPred0: vPred, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vIntersection(VQuery0, VQuery1) & VVAR1 = vSelectAllFromWhere(VTRef0, VPred0)) => VVAR0 != VVAR1)).
tff('DIFF-Intersection-SelectSomeFrom', axiom, ![VAList0: vAList, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vIntersection(VQuery0, VQuery1) & VVAR1 = vSelectSomeFrom(VAList0, VTRef0)) => VVAR0 != VVAR1)).
tff('DIFF-Intersection-SelectAllFrom', axiom, ![VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vIntersection(VQuery0, VQuery1) & VVAR1 = vSelectAllFrom(VTRef0)) => VVAR0 != VVAR1)).
tff('DIFF-Intersection-Tvalue', axiom, ![VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VTable0: vTable, VQuery0: vQuery] : ((VVAR0 = vIntersection(VQuery0, VQuery1) & VVAR1 = vTvalue(VTable0)) => VVAR0 != VVAR1)).
tff('EQ-Difference', axiom, ![VQuery3: vQuery, VQuery2: vQuery, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery] : ((VVAR0 = vDifference(VQuery0, VQuery1) & VVAR1 = vDifference(VQuery2, VQuery3)) => ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> VVAR0 = VVAR1))).
tff('DIFF-Difference-Intersection', axiom, ![VQuery3: vQuery, VQuery2: vQuery, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery] : ((VVAR0 = vDifference(VQuery0, VQuery1) & VVAR1 = vIntersection(VQuery2, VQuery3)) => VVAR0 != VVAR1)).
tff('DIFF-Difference-Union', axiom, ![VQuery3: vQuery, VQuery2: vQuery, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery] : ((VVAR0 = vDifference(VQuery0, VQuery1) & VVAR1 = vUnion(VQuery2, VQuery3)) => VVAR0 != VVAR1)).
tff('DIFF-Difference-SelectSomeFromWhere', axiom, ![VAList0: vAList, VPred0: vPred, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vDifference(VQuery0, VQuery1) & VVAR1 = vSelectSomeFromWhere(VAList0, VTRef0, VPred0)) => VVAR0 != VVAR1)).
tff('DIFF-Difference-SelectAllFromWhere', axiom, ![VPred0: vPred, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vDifference(VQuery0, VQuery1) & VVAR1 = vSelectAllFromWhere(VTRef0, VPred0)) => VVAR0 != VVAR1)).
tff('DIFF-Difference-SelectSomeFrom', axiom, ![VAList0: vAList, VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vDifference(VQuery0, VQuery1) & VVAR1 = vSelectSomeFrom(VAList0, VTRef0)) => VVAR0 != VVAR1)).
tff('DIFF-Difference-SelectAllFrom', axiom, ![VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VQuery0: vQuery, VTRef0: vTRef] : ((VVAR0 = vDifference(VQuery0, VQuery1) & VVAR1 = vSelectAllFrom(VTRef0)) => VVAR0 != VVAR1)).
tff('DIFF-Difference-Tvalue', axiom, ![VQuery1: vQuery, VVAR1: vQuery, VVAR0: vQuery, VTable0: vTable, VQuery0: vQuery] : ((VVAR0 = vDifference(VQuery0, VQuery1) & VVAR1 = vTvalue(VTable0)) => VVAR0 != VVAR1)).
tff('isValue0', axiom, ![VVAR0: vQuery, Vt: vTable] : (VVAR0 = vTvalue(Vt) => visValue(VVAR0))).
tff('isValue1', axiom, ![VVAR0: vQuery, Vn: vTRef] : (VVAR0 = vSelectAllFrom(Vn) => (~visValue(VVAR0)))).
tff('isValue2', axiom, ![VVAR0: vQuery, Val: vAList, Vtr: vTRef] : (VVAR0 = vSelectSomeFrom(Val, Vtr) => (~visValue(VVAR0)))).
tff('isValue3', axiom, ![VVAR0: vQuery, Vtr: vTRef, Vp: vPred] : (VVAR0 = vSelectAllFromWhere(Vtr, Vp) => (~visValue(VVAR0)))).
tff('isValue4', axiom, ![VVAR0: vQuery, Val: vAList, Vtr: vTRef, Vp: vPred] : (VVAR0 = vSelectSomeFromWhere(Val, Vtr, Vp) => (~visValue(VVAR0)))).
tff('isValue5', axiom, ![VVAR0: vQuery, Vq1: vQuery, Vq2: vQuery] : (VVAR0 = vUnion(Vq1, Vq2) => (~visValue(VVAR0)))).
tff('isValue6', axiom, ![VVAR0: vQuery, Vsql1: vQuery, Vsql2: vQuery] : (VVAR0 = vIntersection(Vsql1, Vsql2) => (~visValue(VVAR0)))).
tff('isValue7', axiom, ![VVAR0: vQuery, Vsql1: vQuery, Vsql2: vQuery] : (VVAR0 = vDifference(Vsql1, Vsql2) => (~visValue(VVAR0)))).
tff('EQ-noTType', axiom, ![VVAR0: vOptTType] : (VVAR0 = vnoTType => $true)).
tff('EQ-someTType', axiom, ![VVAR0: vOptTType, VTType0: vTType, VVAR1: vOptTType, VTType1: vTType] : ((VVAR0 = vsomeTType(VTType0) & VVAR1 = vsomeTType(VTType1)) => (VTType0 = VTType1 <=> VVAR0 = VVAR1))).
tff('DIFF-someTType-noTType', axiom, ![VVAR0: vOptTType, VTType0: vTType, VVAR1: vOptTType] : ((VVAR0 = vsomeTType(VTType0) & VVAR1 = vnoTType) => VVAR0 != VVAR1)).
tff('isSomeTType0', axiom, ![VVAR0: vOptTType] : (VVAR0 = vnoTType => (~visSomeTType(VVAR0)))).
tff('isSomeTType1', axiom, ![VVAR0: vOptTType, Vt: vTType] : (VVAR0 = vsomeTType(Vt) => visSomeTType(VVAR0))).
tff('getSomeTType0', axiom, ![VVAR0: vOptTType, Vt: vTType, VVAR1: vTType] : ((VVAR0 = vsomeTType(Vt) & VVAR1 = vgetSomeTType(VVAR0)) => VVAR1 = Vt)).
tff('EQ-emptyContext', axiom, ![VVAR0: vTTContext] : (VVAR0 = vemptyContext => $true)).
tff('EQ-bindContext', axiom, ![VTTContext0: vTTContext, VTTContext1: vTTContext, VTName0: vTName, VTType0: vTType, VTType1: vTType, VVAR1: vTTContext, VVAR0: vTTContext, VTName1: vTName] : ((VVAR0 = vbindContext(VTName0, VTType0, VTTContext0) & VVAR1 = vbindContext(VTName1, VTType1, VTTContext1)) => ((VTName0 = VTName1 & (VTType0 = VTType1 & VTTContext0 = VTTContext1)) <=> VVAR0 = VVAR1))).
tff('DIFF-bindContext-emptyContext', axiom, ![VTTContext0: vTTContext, VTName0: vTName, VTType0: vTType, VVAR1: vTTContext, VVAR0: vTTContext] : ((VVAR0 = vbindContext(VTName0, VTType0, VTTContext0) & VVAR1 = vemptyContext) => VVAR0 != VVAR1)).
tff('lookupContext0', axiom, ![VVAR0: vTTContext, VVAR1: vOptTType, Vtn: vTName, VVAR2: vOptTType] : ((VVAR0 = vemptyContext & VVAR1 = vlookupContext(Vtn, VVAR0) & VVAR2 = vnoTType) => VVAR1 = VVAR2)).
tff('lookupContext1', axiom, ![Vtm: vTName, VVAR2: vOptTType, VVAR1: vOptTType, Vtn: vTName, VVAR0: vTTContext, VTTC: vTTContext, Vtt: vTType] : ((VVAR0 = vbindContext(Vtm, Vtt, VTTC) & VVAR1 = vlookupContext(Vtn, VVAR0) & VVAR2 = vsomeTType(Vtt) & Vtn = Vtm) => VVAR1 = VVAR2)).
tff('lookupContext2', axiom, ![Vtm: vTName, VVAR2: vOptTType, VVAR1: vOptTType, Vtn: vTName, VVAR0: vTTContext, VTTC: vTTContext, Vtt: vTType] : ((VVAR0 = vbindContext(Vtm, Vtt, VTTC) & VVAR1 = vlookupContext(Vtn, VVAR0) & VVAR2 = vlookupContext(Vtn, VTTC) & Vtn != Vtm) => VVAR1 = VVAR2)).
tff('EQ-noFType', axiom, ![VVAR0: vOptFType] : (VVAR0 = vnoFType => $true)).
tff('EQ-someFType', axiom, ![VVAR0: vOptFType, VFType0: vFType, VVAR1: vOptFType, VFType1: vFType] : ((VVAR0 = vsomeFType(VFType0) & VVAR1 = vsomeFType(VFType1)) => (VFType0 = VFType1 <=> VVAR0 = VVAR1))).
tff('DIFF-someFType-noFType', axiom, ![VVAR0: vOptFType, VFType0: vFType, VVAR1: vOptFType] : ((VVAR0 = vsomeFType(VFType0) & VVAR1 = vnoFType) => VVAR0 != VVAR1)).
tff('isSomeFType0', axiom, ![VVAR0: vOptFType] : (VVAR0 = vnoFType => (~visSomeFType(VVAR0)))).
tff('isSomeFType1', axiom, ![VVAR0: vOptFType, Va: vFType] : (VVAR0 = vsomeFType(Va) => visSomeFType(VVAR0))).
tff('getSomeFType0', axiom, ![VVAR0: vOptFType, Va: vFType, VVAR1: vFType] : ((VVAR0 = vsomeFType(Va) & VVAR1 = vgetSomeFType(VVAR0)) => VVAR1 = Va)).
tff('findColType0', axiom, ![VVAR0: vTType, VVAR1: vOptFType, Van: vAName, VVAR2: vOptFType] : ((VVAR0 = vttempty & VVAR1 = vfindColType(Van, VVAR0) & VVAR2 = vnoFType) => VVAR1 = VVAR2)).
tff('findColType1', axiom, ![Va: vAName, Vttr: vTType, Vft: vFType, Van: vAName, VVAR2: vOptFType, VVAR3: vOptFType, VVAR1: vTType, VVAR0: vCType] : ((VVAR0 = vctype(Va, Vft) & VVAR1 = vttcons(VVAR0, Vttr) & VVAR2 = vfindColType(Van, VVAR1) & VVAR3 = vsomeFType(Vft) & Van = Va) => VVAR2 = VVAR3)).
tff('findColType2', axiom, ![Va: vAName, Vttr: vTType, Vft: vFType, Van: vAName, VVAR2: vOptFType, VVAR3: vOptFType, VVAR1: vTType, VVAR0: vCType] : ((VVAR0 = vctype(Va, Vft) & VVAR1 = vttcons(VVAR0, Vttr) & VVAR2 = vfindColType(Van, VVAR1) & VVAR3 = vfindColType(Van, Vttr) & Van != Va) => VVAR2 = VVAR3)).
tff('projectType0', axiom, ![VVAR2: vOptTType, VVAR3: vOptTType, VVAR1: vTType, VVAR0: vAList, Vtt: vTType] : ((VVAR0 = vaempty & VVAR1 = vttempty & VVAR2 = vprojectType(VVAR0, Vtt) & VVAR3 = vsomeTType(VVAR1)) => VVAR2 = VVAR3)).
tff('projectType1', axiom, ![Va: vAName, VVAR5: vTType, VVAR7: vOptTType, Vft: vOptFType, VVAR2: vAList, VVAR3: vFType, VVAR4: vCType, VVAR1: vOptTType, VVAR6: vTType, VVAR8: vOptTType, VVAR0: vOptFType, Vtt: vTType, Valr: vAList, Vtprest: vOptTType] : ((VVAR5 = vgetSomeTType(Vtprest) & VVAR4 = vctype(Va, VVAR3) & VVAR2 = vacons(Va, Valr) & VVAR6 = vttcons(VVAR4, VVAR5) & VVAR8 = vsomeTType(VVAR6) & VVAR0 = vfindColType(Va, Vtt) & VVAR3 = vgetSomeFType(Vft) & VVAR1 = vprojectType(Valr, Vtt) & VVAR7 = vprojectType(VVAR2, Vtt) & Vft = VVAR0 & Vtprest = VVAR1 & (visSomeFType(Vft) & visSomeTType(Vtprest))) => VVAR7 = VVAR8)).
tff('projectType2', axiom, ![Va: vAName, Vft: vOptFType, VVAR2: vAList, VVAR3: vOptTType, VVAR4: vOptTType, VVAR1: vOptTType, VVAR0: vOptFType, Vtt: vTType, Valr: vAList, Vtprest: vOptTType] : ((VVAR4 = vnoTType & VVAR2 = vacons(Va, Valr) & VVAR0 = vfindColType(Va, Vtt) & VVAR1 = vprojectType(Valr, Vtt) & VVAR3 = vprojectType(VVAR2, Vtt) & Vft = VVAR0 & Vtprest = VVAR1 & (~(visSomeFType(Vft) & visSomeTType(Vtprest)))) => VVAR3 = VVAR4)).
tff('ctypeIn0', axiom, ![VVAR0: vTType, Va: vAName, Vft: vFType] : (VVAR0 = vttempty => (~vctypeIn(Va, Vft, VVAR0)))).
tff('ctypeIn1', axiom, ![Va: vAName, Vft2: vFType, Vttr: vTType, Vft: vFType, Va2: vAName, VVAR1: vTType, VVAR0: vCType] : ((VVAR0 = vctype(Va2, Vft2) & VVAR1 = vttcons(VVAR0, Vttr)) => (vctypeIn(Va, Vft, VVAR1) <=> ((Va = Va2 & Vft = Vft2) | vctypeIn(Va, Vft, Vttr))))).
tff('checkPValidity0', axiom, ![Va: vAName, Vfv: vFVal, VVAR1: vFType, VVAR0: vPred, Vtt: vTType] : ((VVAR0 = vVEquals(Va, Vfv) & VVAR1 = vfieldType(Vfv)) => (vcheckPValidity(VVAR0, Vtt) <=> vctypeIn(Va, VVAR1, Vtt)))).
tff('checkPValidity1', axiom, ![Va: vAName, Vfv: vFVal, VVAR1: vFType, VVAR0: vPred, Vtt: vTType] : ((VVAR0 = vVGreater(Va, Vfv) & VVAR1 = vfieldType(Vfv)) => (vcheckPValidity(VVAR0, Vtt) <=> vctypeIn(Va, VVAR1, Vtt)))).
tff('checkPValidity2', axiom, ![Va: vAName, Vfv: vFVal, VVAR1: vFType, VVAR0: vPred, Vtt: vTType] : ((VVAR0 = vVSmaller(Va, Vfv) & VVAR1 = vfieldType(Vfv)) => (vcheckPValidity(VVAR0, Vtt) <=> vctypeIn(Va, VVAR1, Vtt)))).
tff('T-TTContext-Duplicate', axiom, ![Vx: vTName, VTx: vTType, Vy: vTName, Ve: vQuery, VC: vTTContext, VTy: vTType, VT: vTType, VVAR2: vTTContext, VVAR1: vTTContext, VVAR0: vTTContext] : ((VVAR0 = vbindContext(Vy, VTy, VC) & VVAR1 = vbindContext(Vx, VTx, VVAR0) & VVAR2 = vbindContext(Vx, VTx, VC) & Vx = Vy & vtcheck(VVAR1, Ve, VT)) => vtcheck(VVAR2, Ve, VT))).
tff('T-TTContext-Swap', axiom, ![Vx: vTName, VTx: vTType, Vy: vTName, Ve: vQuery, VC: vTTContext, VTy: vTType, VT: vTType, VVAR2: vTTContext, VVAR3: vTTContext, VVAR1: vTTContext, VVAR0: vTTContext] : ((VVAR0 = vbindContext(Vy, VTy, VC) & VVAR1 = vbindContext(Vx, VTx, VVAR0) & VVAR2 = vbindContext(Vx, VTx, VC) & VVAR3 = vbindContext(Vy, VTy, VVAR2) & Vx != Vy & vtcheck(VVAR1, Ve, VT)) => vtcheck(VVAR3, Ve, VT))).
tff('T-Tvalue', axiom, ![Vrt: vRawTable, VTT: vTType, VVAR1: vQuery, Val: vAList, VVAR0: vTable, VTTC: vTTContext] : ((VVAR0 = vtable(Val, Vrt) & VVAR1 = vTvalue(VVAR0) & vwelltypedtable(VTT, VVAR0)) => vtcheck(VTTC, VVAR1, VTT))).
tff('T-SelectAllFrom', axiom, ![VTT: vTType, VVAR2: vTRef, VVAR3: vQuery, VVAR1: vOptTType, Vtn: vTName, VVAR0: vOptTType, VTTC: vTTContext] : ((VVAR0 = vlookupContext(Vtn, VTTC) & VVAR1 = vsomeTType(VTT) & VVAR2 = vRef(Vtn) & VVAR3 = vSelectAllFrom(VVAR2) & VVAR0 = VVAR1) => vtcheck(VTTC, VVAR3, VTT))).
tff('T-SelectSomeFrom', axiom, ![VVAR5: vQuery, VTT: vTType, VVAR2: vOptTType, VVAR3: vOptTType, VVAR4: vTRef, VVAR1: vOptTType, Vtn: vTName, Val: vAList, VVAR0: vOptTType, VTT1: vTType, VTTC: vTTContext] : ((VVAR4 = vRef(Vtn) & VVAR1 = vsomeTType(VTT1) & VVAR5 = vSelectSomeFrom(Val, VVAR4) & VVAR2 = vprojectType(Val, VTT1) & VVAR3 = vsomeTType(VTT) & VVAR0 = vlookupContext(Vtn, VTTC) & VVAR0 = VVAR1 & VVAR2 = VVAR3) => vtcheck(VTTC, VVAR5, VTT))).
tff('T-SelectAllFromWhere', axiom, ![Vp: vPred, VTT: vTType, VVAR2: vTRef, VVAR3: vQuery, VVAR1: vOptTType, Vtn: vTName, VVAR0: vOptTType, VTTC: vTTContext] : ((VVAR0 = vlookupContext(Vtn, VTTC) & VVAR1 = vsomeTType(VTT) & VVAR2 = vRef(Vtn) & VVAR3 = vSelectAllFromWhere(VVAR2, Vp) & VVAR0 = VVAR1 & vcheckPValidity(Vp, VTT)) => vtcheck(VTTC, VVAR3, VTT))).
tff('T-SelectSomeFromWhere', axiom, ![Vp: vPred, VVAR5: vQuery, VTT: vTType, VVAR2: vOptTType, VVAR3: vOptTType, VVAR4: vTRef, VVAR1: vOptTType, Vtn: vTName, Val: vAList, VVAR0: vOptTType, VTT1: vTType, VTTC: vTTContext] : ((VVAR4 = vRef(Vtn) & VVAR1 = vsomeTType(VTT1) & VVAR2 = vprojectType(Val, VTT1) & VVAR3 = vsomeTType(VTT) & VVAR0 = vlookupContext(Vtn, VTTC) & VVAR5 = vSelectSomeFromWhere(Val, VVAR4, Vp) & VVAR0 = VVAR1 & vcheckPValidity(Vp, VTT1) & VVAR2 = VVAR3) => vtcheck(VTTC, VVAR5, VTT))).
tff('T-Union', axiom, ![Vq1: vQuery, VTT: vTType, VVAR0: vQuery, VTTC: vTTContext, Vq2: vQuery] : ((VVAR0 = vUnion(Vq1, Vq2) & vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, VVAR0, VTT))).
tff('T-Intersection', axiom, ![Vq1: vQuery, VTT: vTType, VVAR0: vQuery, VTTC: vTTContext, Vq2: vQuery] : ((VVAR0 = vIntersection(Vq1, Vq2) & vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, VVAR0, VTT))).
tff('T-Difference', axiom, ![Vq1: vQuery, VTT: vTType, VVAR0: vQuery, VTTC: vTTContext, Vq2: vQuery] : ((VVAR0 = vDifference(Vq1, Vq2) & vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, VVAR0, VTT))).
tff('false-goal', conjecture, ($true => $false)).
