module stlc.SubstLemma

import stlc.Syntax
import stlc.Context
import stlc.Types
import stlc.Gensym
import stlc.AlphaEquivalence
import stlc.Subst

goal
~e2 == var(~y)
~C |- ~e : ~T
bind(~x, ~T, ~C) |- ~e2 : ~T2
============================== T-subst-var
~C |- subst(~x, ~e, ~e2) : ~T2


local {
	consts
		e1app : Exp
		e2app : Exp
	
	axioms
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e1app : ~T2
	============================== T-subst-IH-app1
	~C |- subst(~x, ~e, e1app) : ~T2
	
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- e2app : ~T2
	============================== T-subst-IH-app2
	~C |- subst(~x, ~e, e2app) : ~T2
	
	goal
	~e2 == app(e1app, e2app)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- ~e2 : ~T2
	============================== T-subst-app
	~C |- subst(~x, ~e, ~e2) : ~T2
}

goal
~e2 == abs(~y, ~S, ~e1)
~x == ~y
~C |- ~e : ~T
bind(~x, ~T, ~C) |- ~e2 : ~T2
============================== T-subst-abs-1
~C |- subst(~x, ~e, ~e2) : ~T2


local {
	const eabs : Exp
	
	axiom
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- eabs : ~T2
	============================== T-subst-IH-abs
	~C |- subst(~x, ~e, eabs) : ~T2

	goal
	~e2 == abs(~y, ~S, eabs)
	~x != ~y
	!isFreeVar(~y, ~e)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- ~e2 : ~T2
	================================================= T-subst-abs-2
	~C |- subst(~x, ~e, ~e2) : ~T2
}


local {
	const eabs : Exp
	
	axiom
	~e2 == abs(~y, ~S, ~e1)
	~x != ~y
	!isFreeVar(~y, ~e)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- ~e2 : ~T2
	================================================= T-subst-abs-2
	~C |- subst(~x, ~e, ~e2) : ~T2
	
	//necessary axioms on alpha equivalence
	axioms
	============================ alpha-equiv-refl
	alphaEquivalent(~e, ~e)


	alphaEquivalent(~e1, ~e2)
	============================ alpha-equiv-sym
	alphaEquivalent(~e2, ~e1)

 
	alphaEquivalent(~e1, ~e2)
	alphaEquivalent(~e2, ~e3)
	============================ alpha-equiv-trans
	alphaEquivalent(~e1, ~e3)


	====================================================================== alpha-equiv-subst-abs
	alphaEquivalent(abs(~x, ~S, ~e), abs(~y, ~S, subst(~x, var(~y), ~e)))


	~C |- ~e : ~T
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-typing
	~C |- ~e1 : ~T
	
	//auxiliary lemma which is needed in this case, but can also be proven
	goal
	~fresh == gensym(app(app(~e, ~e1), var(~x)))
	============================================= fresh-unequal-var
	~x != ~fresh

	axiom
	~fresh == gensym(app(app(~e, ~e1), var(~x)))
	============================================= fresh-unequal-var
	~x != ~fresh
		
	axiom //not needed
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- eabs : ~T2
	============================== T-subst-IH-abs
	~C |- subst(~x, ~e, eabs) : ~T2

	goal
	~e2 == abs(~y, ~S, eabs)
	~x != ~y
	isFreeVar(~y, ~e)
	~C |- ~e : ~T
	bind(~x, ~T, ~C) |- ~e2 : ~T2
	================================================= T-subst-abs-3
	~C |- subst(~x, ~e, ~e2) : ~T2
}

// substitution lemma becomes an axiom after the proof
axiom
~C |- ~e : ~T
bind(~x, ~T, ~C) |- ~e2 : ~T2
============================== T-subst
~C |- subst(~x, ~e, ~e2) : ~T2


