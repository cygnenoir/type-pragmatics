module stlc.Types

import stlc.Syntax
import stlc.Context

constructors
	arrow : Typ Typ -> Typ


axioms

lookup(~x, ~C) == someType(~T)
============================== T-var
~C |- var(~x) : ~T

bind(~x, ~S, ~C) |- ~e : ~T
===================================== T-abs
~C |- abs(~x, ~S, ~e) : arrow(~S, ~T)

~C |- ~e1 : arrow(~S, ~T)
~C |- ~e2 : ~S
========================= T-app
~C |- app(~e1, ~e2) : ~T



~C |- ~e : ~T
=============================== T-inv
OR
=> exists ~x
     ~e == var(~x)
     lookup(~x, ~C) == someType(~T)
=> exists ~x, ~e2, ~T1, ~T2
     ~e == abs(~x, ~T1, ~e2)
     ~T == arrow(~T1, ~T2)
     bind(~x, ~T1, ~C) |- ~e2 : ~T2
=> exists ~e1, ~e2, ~S
     ~e == app(~e1, ~e2)
     ~C |- ~e1 : arrow(~S, ~T)
     ~C |- ~e2 : ~S
