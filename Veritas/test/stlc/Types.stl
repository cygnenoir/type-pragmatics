module stlc.Types

import stlc.Syntax
import stlc.Context
import stlc.Subst
import stlc.AlphaEquivalence

constructors
	arrow : Typ Typ -> Typ


axioms

lookup(~x, ~C) == someType(~T)
============================== T-var
~C |- var(~x) : ~T

bind(~x, ~S, ~C) |- ~e : ~T
===================================== T-abs
~C |- abs(~x, ~S, ~e) : arrow(~S, ~T)

~C |- ~e1 : arrow(~S, ~T)
~C |- ~e2 : ~S
========================= T-app
~C |- app(~e1, ~e2) : ~T



~C |- ~e : ~T
=============================== T-inv
OR
=> exists ~x
     ~e == var(~x)
     lookup(~x, ~C) == someType(~T)
=> exists ~x, ~e2, ~T1, ~T2
     ~e == abs(~x, ~T1, ~e2)
     ~T == arrow(~T1, ~T2)
     bind(~x, ~T1, ~C) |- ~e2 : ~T2
=> exists ~e1, ~e2, ~S
     ~e == app(~e1, ~e2)
     ~C |- ~e1 : arrow(~S, ~T)
     ~C |- ~e2 : ~S

//Auxiliary lemmas for on contexts

//Proof by structural induction 

//proof for Weakening without using T-Weak-FreeVar

goal
~e == var(~y)
lookup(~x, ~C) == noType
~C |- ~e : ~T
=========================== T-Weak-var
bind(~x, ~S, ~C) |- ~e : ~T

local {
	const eabs : Exp

	axiom
	lookup(~x, ~C) == noType
	~C |- eabs : ~T
	============================== T-Weak-abs-IH
	bind(~x, ~S, ~C) |- eabs : ~T
	
	goal
	~x != ~y
	~e == abs(~y, ~S1, eabs)
	lookup(~x, ~C) == noType
	~C |- ~e : ~T
	============================= T-Weak-abs-1
	bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	const eabs : Exp
	
	axiom
	~x != ~y
	~e == abs(~y, ~S1, ~e1)
	lookup(~x, ~C) == noType
	~C |- ~e : ~T
	============================= T-Weak-abs-1
	bind(~x, ~S, ~C) |- ~e : ~T
	
	
	//necessary axioms on alpha equivalence
	axioms
	============================ alpha-equiv-refl
	alphaEquivalent(~e, ~e)


	alphaEquivalent(~e1, ~e2)
	============================ alpha-equiv-sym
	alphaEquivalent(~e2, ~e1)

 
	alphaEquivalent(~e1, ~e2)
	alphaEquivalent(~e2, ~e3)
	============================ alpha-equiv-trans
	alphaEquivalent(~e1, ~e3)

 	!isFreeVar(~y, ~e)
	====================================================================== alpha-equiv-subst-abs
	alphaEquivalent(abs(~x, ~S, ~e), abs(~y, ~S, subst(~x, var(~y), ~e)))


	~C |- ~e : ~T
	alphaEquivalent(~e, ~e1)
	========================= alpha-equiv-typing
	~C |- ~e1 : ~T

	//NOT needed!
	axiom
	lookup(~x, ~C) == noType
	~C |- eabs : ~T
	============================== T-Weak-abs-IH
	bind(~x, ~S, ~C) |- eabs : ~T

	goal
	~x == ~y
	~e == abs(~y, ~S1, eabs)
	lookup(~x, ~C) == noType
	~C |- ~e : ~T
	============================ T-Weak-abs-2
	bind(~x, ~S, ~C) |- ~e : ~T
}

local {
	consts
		e1app : Exp
		e2app : Exp
		
	axioms
	lookup(~x, ~C) == noType
	~C |- e1app : ~T
	=========================== T-Weak-app-IH1
	bind(~x, ~S, ~C) |- e1app : ~T
	
	lookup(~x, ~C) == noType
	~C |- e2app : ~T
	=========================== T-Weak-app-IH2
	bind(~x, ~S, ~C) |- e2app : ~T
	
	
	goal
	~e == app(e1app, e2app)
	lookup(~x, ~C) == noType
	~C |- ~e : ~T
	=========================== T-Weak-app
	bind(~x, ~S, ~C) |- ~e : ~T
}


axiom
lookup(~x, ~C) == noType
~C |- ~e : ~T
=========================== T-Weak
bind(~x, ~S, ~C) |- ~e : ~T



//Proof by structural induction, Strenghthening

goal
~e == var(~y)
!isFreeVar(~x, ~e)
bind(~x, ~S, ~C) |- ~e : ~T
=========================== T-Strong-var
~C |- ~e : ~T

local {
	const eabs : Exp
	
	axiom
	!isFreeVar(~x, eabs)
	bind(~x, ~S, ~C) |- eabs : ~T
	=========================== T-Strong-abs-IH
	~C |- eabs : ~T

	goal
	~e == abs(~y, ~S1, eabs)
	!isFreeVar(~x, ~e)
	bind(~x, ~S, ~C) |- ~e : ~T
	=========================== T-Strong-abs
	~C |- ~e : ~T
}

local {
	consts
		e1app : Exp
		e2app : Exp

	axioms 
	!isFreeVar(~x, e1app)
	bind(~x, ~S, ~C) |- e1app : ~T
	=========================== T-Strong-app-IH1
	~C |- e1app : ~T
	
	!isFreeVar(~x, e2app)
	bind(~x, ~S, ~C) |- e2app : ~T
	=========================== T-Strong-app-IH2
	~C |- e2app : ~T
	
	goal
	~e == app(e1app, e2app)
	!isFreeVar(~x, ~e)
	bind(~x, ~S, ~C) |- ~e : ~T
	=========================== T-Strong-app
	~C |- ~e : ~T
}

axiom
!isFreeVar(~x, ~e)
bind(~x, ~S, ~C) |- ~e : ~T
=========================== T-Strong
~C |- ~e : ~T
