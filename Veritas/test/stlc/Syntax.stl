module stlc.Syntax

open data Var

data Typ
	= tvar(Var)
	| tfun(Typ, Typ)

data Exp
  = var(Var)
  | abs(Var, Typ, Exp)
  | app(Exp, Exp)

function
isValue : Exp -> Bool
isValue(abs(x, S, e)) = true
isValue(var(x)) = false
isValue(app(e1, e2)) = false

function
isFreeVar : Var Exp -> Bool
isFreeVar(v, var(x))       = x == v
isFreeVar(v, abs(x, T, e)) = (x != v) && (isFreeVar(v, e)) 
isFreeVar(v, app(e1, e2))  = isFreeVar(v, e1) || isFreeVar(v, e2)


function
foo : Exp Exp -> Exp
foo(var(x), e2) = e2
foo(e1, var(x)) = e1
foo(var(x), var(y)) = var(x)
foo(abs(x,T,e1), app(e2, e3)) = e1
foo(e1, e2) = app(e1, e2)

goal
~y = ~y
------------ ABC
isFreeVar(~x, foo(var(~x), var(~x)))

// axiom
// isFreeVar(~v, ~e)
// ================= isFreeVar-inv
// OR
// => exists ~x
//      ~e = var(~x)
//      ~x = ~v
// => exists ~x, ~T, ~e1
//      ~e = abs(~x, ~T, ~e1)
//      ~x != ~v
//      isFreeVar(~v, ~e1)
// => exists ~e1, ~e2
//      ~e = app(~e1, ~e2)
//      isFreeVar(~v, ~e1)
// => exists ~e1, ~e2
//      ~e = app(~e1, ~e2)
//      isFreeVar(~v, ~e2)
