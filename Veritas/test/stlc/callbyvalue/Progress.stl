module stlc.callbyvalue.Progress

import stlc.Syntax
import stlc.Context
import stlc.Subst {names}
import stlc.SubstLemma
import stlc.callbyvalue.Reduction
import stlc.Types

// Prove by induction on typing relation. Cases: T-var, T-abs, T-app

goal
~ein == var(~x)
empty |- ~ein : ~T
!isValue(~ein)
=========================== T-Progress-T-var
exists ~eout
	reduce(~ein) == someExp(~eout)

local {
	consts
		e1 : Exp
	
	axiom
	~ein == e1	 
	empty |- ~ein : ~T
	!isValue(~ein)
	=========================== T-Progress-T-abs-IH
	exists ~eout
		reduce(~ein) == someExp(~eout)

	goal
	~ein == abs(~x, ~S, e1)
	~Tin == arrow(~T1, ~T2)
	empty |- ~ein : ~Tin
	!isValue(~ein)
	=========================== T-Progress-T-abs
	exists ~eout
		reduce(~ein) == someExp(~eout)
}


local {
	consts
		e1 : Exp
		e2 : Exp
	
	axiom	 
	~ein == e1
	empty |- ~ein : ~T
	!isValue(~ein)
	=========================== T-Progress-T-app-IH1
	exists ~eout
		reduce(~ein) == someExp(~eout)

	axiom // NEEDED! (as expected)
	~ein == e2	 
	empty |- ~ein : ~T
	!isValue(~ein)
	=========================== T-Progress-T-app-IH2
	exists ~eout
		reduce(~ein) == someExp(~eout)

	goal
	~ein == app(e1, e2)
	empty |- ~ein : ~T
	!isValue(~ein)
	=========================== T-Progress-T-app
	exists ~eout
		reduce(~ein) == someExp(~eout)
}

axiom
empty |- ~ein : ~T
!isValue(~ein)
=========================== T-Progress
exists ~eout
	reduce(~ein) == someExp(~eout)
