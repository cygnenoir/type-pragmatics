module sql.Progress

import sql.Syntax
import sql.Semantics
import sql.TypeSystem

//prove progress by structural induction on the sql command

goal
~sql == TValue(~t)
~cin == conf(~sql, ~TS)
!isValue(~sql)
~TS |- ~sql : ~TT
==================================== SQL-Progress-T-Value
exists ~cout
	reduce(~cin) = someConf(~cout)


//final progress theorem
//design decision: do not include a premise with "store only contains well-typed tables"
// this is not necessary with the current type system design since the typing rules require 
// that all tables that are ever looked up are well-typed
//consequence: the table store can contain senseless tables as long as the given SQL
// command does not look them up
//alternative: introduce such a premise, and then maybe remove the well-typedness premises
// from the typing rules (?)
axiom 
~cin == conf(~sql, ~TS)
!isValue(~sql)
~TS |- ~sql : ~TT
==================================== SQL-Progress
exists ~cout
	reduce(~cin) = someConf(~cout)