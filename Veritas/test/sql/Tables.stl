module sql.Tables

// explanation:
// FType: type of a single field (underspecified)
// AName: name of attribute (underspecified)
// AList: list of attribute names
// CType: type of a single column (pair AName, FType)
// TType: type of a table (table schema) - list of CType


sorts
	FType AName AList CType TType
	
constructors
	ctype : AName FType -> CType
	aempty : AList
	acons : AName AList -> AList
	ttempty : TType
	ttcons : CType TType -> TType

//explanation:
// FVal: Value for a field (underspecified)
// Row: table row, list of field values (with at least one cell/field per construction!)
// RawTable: table matrix (list of rows), without "header" (attribute list)
// Table: full table with "header" (attribute list) 
	
sorts
	FVal Row RawTable Table 

constructors
	rempty : Row
	rcons : FVal Row -> Row
	tempty : RawTable
	tcons : Row RawTable -> RawTable
	table : AList RawTable -> Table

function
getRaw : Table -> RawTable
getRaw(table(al, rt)) = rt

function 
getAL : Table -> AList
getAL(table(al, rt)) = al

// function that assigns a field type to every field value  (underspecified)	
function
fieldType : FVal -> FType

// function that compares whether first field value is smaller than second field value 
// (underspecified)
function
le : FVal FVal -> Bool

// function that compares whether first field value is greater than second field value 
// (underspecified)
function
ge : FVal FVal -> Bool

// check whether a table corresponds to a given type (functional notation)
// does not yet check for whether the table type contains only unique attribute names!!
// (but semantics should be possible to define in a sensible way without that requirement...)
	
function 
correspondingAList : TType -> AList
correspondingAList(ttempty) = aempty
correspondingAList(ttcons(ctype(a, f), tt)) = acons(a, correspondingAList(tt))	
	
function
welltypedtable : TType Table -> Bool
welltypedtable(tt, table(al, t)) = (correspondingAList(tt) == al) && welltypedRawtable(tt, t)

function
welltypedRawtable : TType RawTable -> Bool
welltypedRawtable(tt, tempty) = true
welltypedRawtable(tt, tcons(r, t)) = welltypedRow(tt, r) && welltypedRawtable(tt, t)

function
welltypedRow : TType Row -> Bool
welltypedRow(ttempty, rempty) = true
welltypedRow(ttcons(ctype(name, type), tt), rcons(v, r)) = (fieldType(v) == type) && welltypedRow(tt, r)
welltypedRow(tt, r) = false
	

//a few tests for well-typedness
goal
fieldType(~x) == ~xt
~tt == ttempty
============================================================================ test1
welltypedtable(~tt, table(aempty, tcons(rempty, tempty)))

goal
fieldType(~x) == ~xt
fieldType(~y) == ~yt
~tt == ttcons(ctype(~a, ~xt), ttcons(ctype(~b, ~yt), ttempty))
============================================================================ test21
!welltypedtable(~tt, table(acons(~a, acons(~b, aempty)), tcons(rcons(~x, rempty), tempty)))

goal
fieldType(~x) == ~xt
fieldType(~y) == ~yt
~tt == ttcons(ctype(~a, ~xt), ttcons(ctype(~b, ~yt), ttempty))
==================================================================================== test22
welltypedtable(~tt, table(acons(~a, acons(~b, aempty)), tcons(rcons(~x, rcons(~y, rempty)), tempty)))

 
goal
fieldType(~x1) == ~xt
fieldType(~x2) == ~xt
fieldType(~y1) == ~yt
fieldType(~y2) == ~yt
~al == acons(~a, acons(~b, aempty))
~tt == ttcons(ctype(~a, ~xt), ttcons(ctype(~b, ~yt), ttempty))
============================================================================ test23
welltypedtable(~tt, table(~al, tcons(rcons(~x1, rcons(~y1, rempty)), 
	tcons(rcons(~x2, rcons(~y2, rempty)), tempty))))
	
goal
fieldType(~x1) == ~xt
fieldType(~x2) == ~xt
fieldType(~y1) == ~yt
fieldType(~y2) == ~yt
~al == acons(~a, acons(~b, aempty))
~tt == ttcons(ctype(~a, ~xt), ttcons(ctype(~b, ~yt), ttempty))
============================================================================ test24
!welltypedtable(~tt, table(~al, tcons(rcons(~x1, rcons(~y1, rempty)), 
	tcons(rcons(~x2, rempty), tempty))))


goal
fieldType(~x) == ~xt
fieldType(~y) == ~yt
fieldType(~z) == ~zt
~al == acons(~a, acons(~b, acons(~c, aempty)))
~tt == ttcons(ctype(~a, ~xt), ttcons(ctype(~b, ~yt), ttcons(ctype(~c, ~zt), ttempty)))
=============================================================================== test3
welltypedtable(~tt, table(~al, tcons(rcons(~x, rcons(~y, rcons(~z, rempty))), tempty)))


goal
fieldType(~x) == ~xt
fieldType(~y) == ~yt
~xt != ~yt 
fieldType(~z) == ~zt
~al == acons(~a, acons(~b, acons(~c, aempty)))
~tt == ttcons(ctype(~a, ~xt), ttcons(ctype(~b, ~yt), ttcons(ctype(~c, ~zt), ttempty)))
================================================================================ test31
!welltypedtable(~tt, table(~al, tcons(rcons(~x, rcons(~x, rcons(~z, rempty))), tempty)))

goal
fieldType(~x1) == ~xt
fieldType(~x2) == ~xt
fieldType(~y1) == ~yt
fieldType(~y2) == ~yt
fieldType(~z1) == ~zt
fieldType(~z2) == ~zt
~al == acons(~a, acons(~b, acons(~c, aempty)))
~tt == ttcons(ctype(~a, ~xt), ttcons(ctype(~b, ~yt), ttcons(ctype(~c, ~zt), ttempty)))
============================================================================ test32
welltypedtable(~tt, table(~al, 
	tcons(rcons(~x1, rcons(~y2, rcons(~z2, rempty))), 
	tcons(rcons(~x2, rcons(~y1, rcons(~z1, rempty))), tempty))))
	
	
goal
fieldType(~x1) == ~xt
fieldType(~x2) == ~xt
fieldType(~y1) == ~yt
fieldType(~y2) == ~yt
fieldType(~z1) == ~zt
fieldType(~z2) == ~zt
~al == acons(~a, acons(~b, acons(~c, aempty)))
~tt == ttcons(ctype(~a, ~xt), ttcons(ctype(~b, ~yt), ttcons(ctype(~c, ~zt), ttempty)))
============================================================================ test33
!welltypedtable(~tt, table(~al, 
	tcons(rcons(~x1, rcons(~y2, rcons(~z2, rempty))), 
	tcons(rcons(~x2, rcons(~y1, rempty)), tempty))))
	
// goal
// fieldType(~x1) == ~xt
// fieldType(~x2) == ~xt
// fieldType(~y1) == ~yt
// fieldType(~y2) == ~yt
// fieldType(~z1) == ~zt
// fieldType(~z2) == ~zt
// ~al == acons(~a, acons(~b, aone(~c)))
// ~tt == ttcons(ctype(~a, ~xt), ttcons(ctype(~b, ~yt), ttone(ctype(~c, ~zt))))
// ============================================================================ test34
// welltypedtable(~tt, table(~al, 
// 	tcons(rcons(~x1, rcons(~y2, rone(~z2))), 
// 	tcons(rcons(~x2, rcons(~y1, rone(~z1))), 
// 	tcons(rcons(~x2, rcons(~y2, rone(~z1))), tempty)))))
// 	
// goal
// fieldType(~x1) == ~xt
// fieldType(~x2) == ~xt
// fieldType(~y1) == ~yt
// fieldType(~y2) == ~yt
// fieldType(~z1) == ~zt
// fieldType(~z2) == ~zt
// ~al == acons(~a, acons(~b, aone(~c)))
// ~tt == ttcons(ctype(~a, ~xt), ttcons(ctype(~b, ~yt), ttone(ctype(~c, ~zt))))
// ============================================================================ test35
// welltypedtable(~tt, table(~al, 
// 	tcons(rcons(~x1, rcons(~y2, rone(~z2))), 
// 	tcons(rcons(~x2, rcons(~y1, rone(~z1))), 
// 	tcons(rcons(~x2, rcons(~y2, rone(~z1))), 
// 	tcons(rcons(~x1, rcons(~y1, rone(~z1))),
// 	tcons(rcons(~x1, rcons(~y2, rone(~z1))),
// 	tcons(rcons(~x2, rcons(~y2, rone(~z2))), tempty))))))))
