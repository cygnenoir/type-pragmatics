module sql.Tables

sorts
	FType RType AName CType TType
	
constructors
	rtone : FType -> RType
	rtmany : FType RType -> RType
	ctype : AName FType -> CType
	ttone : CType -> TType
	ttmany : CType TType -> TType

	
function 
correspondingRType : TType -> RType
correspondingRType(ttone(ctype(a, f))) = rtone(f)
correspondingRType(ttmany(ctype(a, f), tt)) = rtmany(f, correspondingRType(tt))	

	
sorts
	FVar RVar RawTable Table

constructors
	rone : FVar -> RVar
	rmany : FVar RVar -> RVar
	tempty : RawTable
	tmany : RVar RawTable -> RawTable
	table : TType RawTable -> Table
	
function
fieldType : FVar -> FType

// well-typed table (functional notation)
function
welltypedrow : RVar RType -> Bool
welltypedrow(rone(f), rtone(ft)) = fieldType(f) == ft
welltypedrow(rmany(f, r), rtmany(ft, rt)) = 
	rone(f, rtone(ft)) && welltypedrow(r, rt)
	
function
welltypedtable : Table -> Bool
welltypedtable(table(tt, tempty)) = true
welltypedtable(table(tt, tmany(r, tempty))) = 
	welltypedrow(r, correspondingRType(tt))
welltypedtable(table(tt, tmany(r, t))) =
	welltypedtable(table(tt, tmany(r, tempty))) && welltypedtable(table(tt, tmany(t)))
	

//typing rules for well-typed table

// axioms
// fieldType(~f) = ~FT
// ======================= T-rone
// rone(~f) : rtone(~FT)
// 
// rone(~f) : rtone(~FT) 
// ~r : ~RT
// ================================= T-rmany
// rmany(~f, ~r) : rtmany(~FT, ~RT)
// 
// ~r : ~RT
// correspondingRType(~T) = ~RT
// ============================= T-tone
// tone(~r) : ~T
// 
// tone(~r) : ~T
// ~t : ~T
// ==================== T-tmany
// tmany(~r, ~t) : ~T
	
