module sql.PreservationProjection

import sql.Syntax
import sql.Semantics
import sql.TContext
import sql.TypeSystem
import sql.TypeSystemInv
import sql.TStore
import sql.Tables
import sql.TableAux
import sql.SoundnessAuxDefs

// proof of ProjectEmptyCol-RTEmpty
strategy induct-projectemptycol-rtempty {
	// by structural induction ~rt
	
	goal
	~rt = tempty
	================================================ ProjectEmptyCol-RTEmpty-1
	welltypedRawtable(ttempty, projectEmptyCol(~rt))
	
	local {
		consts
			r : Row
			rest : RawTable
		
		axiom
		~rt = rest
		================================================ ProjectEmptyCol-RTEmpty-2-IH
		welltypedRawtable(ttempty, projectEmptyCol(~rt))
		
		goal
		~rt = tcons(r, rest)
		================================================ ProjectEmptyCol-RTEmpty-2
		welltypedRawtable(ttempty, projectEmptyCol(~rt))
	}
	
	hide-all
	axiom
	true
	================================================ ProjectEmptyCol-RTEmpty-ind
	welltypedRawtable(ttempty, projectEmptyCol(~rt))
	
} // qed ProjectEmptyCol-RTEmpty

lemma verify-with induct-projectemptycol-rtempty
true
================================================ ProjectEmptyCol-RTEmpty
welltypedRawtable(ttempty, projectEmptyCol(~rt))

// proof of DropFirstCol-Preservation
strategy induction-dropfirstcol-pres  {
	// by structural induction on ~rt
	
	goal
	~rt = tempty
	welltypedRawtable(ttcons(~a, ~ft, ~TT), ~rt)
	===================================================== DropFirstCol-Preservation-1
	welltypedRawtable(~TT, dropFirstColRaw(~rt))
	
	local {
		consts
			r : Row
			rt : RawTable
		
		axiom
		welltypedRawtable(ttcons(~a, ~ft, ~TT), rt)
		===================================================== DropFirstCol-Preservation-2-IH
		welltypedRawtable(~TT, dropFirstColRaw(rt))
		
		goal
		welltypedRawtable(ttcons(~a, ~ft, ~TT), tcons(r, rt))
		===================================================== DropFirstCol-Preservation-2
		welltypedRawtable(~TT, dropFirstColRaw(tcons(r, rt)))
	}
	
	hide-all
	axiom
	welltypedRawtable(ttcons(~a, ~ft, ~TT), ~rt)
	===================================================== DropFirstCol-Preservation-ind
	welltypedRawtable(~TT, dropFirstColRaw(~rt))
	
} // qed DropFirstCol-Preservation

lemma verify-with induction-dropfirstcol-pres 
welltypedRawtable(ttcons(~a, ~ft, ~TT), ~rt)
===================================================== DropFirstCol-Preservation
welltypedRawtable(~TT, dropFirstColRaw(~rt))


lemma 40
================================================================= AttachColToFrontRaw-Aux 
exists ~f, ~rthead, ~rtrest
	~r = rcons(~f, rempty)
	~rt = tcons(~rthead, ~rtrest)
	attachColToFrontRaw(tcons(~r, ~col), ~rt) = tcons(rcons(~f, ~rthead), attachColToFrontRaw(~col, ~rtrest))

lemma
~r = rcons(~f, rempty)
~rt = tcons(~rthead, ~rtrest)
welltypedRawtable(~TT, ~rt)
welltypedRawtable(ttcons(~a, ~colType, ttempty), tcons(~r, ~col))
welltypedRawtable(ttcons(~a, ~colType, ~TT), attachColToFrontRaw(~col, ~rtrest))
================================================================================================================ AttachCol-WelltypedRawtable-Aux
welltypedRawtable(ttcons(~a, ~colType, ~TT), tcons(rcons(~f, ~rthead), attachColToFrontRaw(~col, ~rtrest)))


// proof of AttachCol-Preserves-Typing
strategy induction-attachcol-preserves-typing {
	// by structural induction on ~col
	
	goal
	~col = tempty
	welltypedRawtable(~TT, ~rt)
	welltypedRawtable(ttcons(~a, ~colType, ttempty), ~col)
	======================================================================== AttachCol-Preserves-Typing-1
	welltypedRawtable(ttcons(~a, ~colType, ~TT), attachColToFrontRaw(~col, ~rt))
	
	local {
		consts
			r : Row
			col : RawTable
		
		axiom
		welltypedRawtable(~TT, ~rt)
		welltypedRawtable(ttcons(~a, ~colType, ttempty), col)
		======================================================================== AttachCol-Preserves-Typing-2-IH
		welltypedRawtable(ttcons(~a, ~colType, ~TT), attachColToFrontRaw(col, ~rt))
		
		//This proof previously worked without modifying the axiom set!
		//stopped working when correction of inversion lemma encoding was introduced!
		//TODO refine this!
		// hide-all
		// include{AttachCol-WelltypedRawtable-Aux, getSome0, DIFF-tempty-tcons, 
		// projectEmptyCol-INV, EQ-tcons, welltypedRawtable1, AttachColToFrontRaw-Aux, 
		// AttachCol-Preserves-Typing-2-IH}
		
		goal 60
		welltypedRawtable(~TT, ~rt)
		welltypedRawtable(ttcons(~a, ~colType, ttempty), tcons(r, col))
		======================================================================== AttachCol-Preserves-Typing-2
		welltypedRawtable(ttcons(~a, ~colType, ~TT), attachColToFrontRaw(tcons(r, col), ~rt))
	}
	
	hide-all
	axiom
	welltypedRawtable(~TT, ~rt)
	welltypedRawtable(ttcons(~a, ~colType, ttempty), ~col)
	======================================================================== AttachCol-Preserves-Typing-ind
	welltypedRawtable(ttcons(~a, ~colType, ~RT), attachColToFrontRaw(~col, ~rt))
} // qed AttachCol-Preserves-Typing

lemma verify-with induction-attachcol-preserves-typing
welltypedRawtable(~TT, ~rt)
welltypedRawtable(ttcons(~a, ~colType, ttempty), ~col)
======================================================================== AttachCol-Preserves-Typing
welltypedRawtable(ttcons(~a, ~colType, ~TT), attachColToFrontRaw(~col, ~rt))


// proof of ProjectFirstRaw-Preservation (auxiliary lemma needed in proof of FindCol Preservation)
strategy induction-projectfirstraw-pres {
	// by structural induction on ~rt
	
	goal
	~rt = tempty
	welltypedRawtable(ttcons(~a, ~colType, ~TT), ~rt)
	=================================================================== ProjectFirstRaw-Preservation-1
	welltypedRawtable(ttcons(~a, ~colType, ttempty), projectFirstRaw(~rt))
	
	local {
		consts
			r : Row
			rt : RawTable
		
		hide-all
		
		axiom
		welltypedRawtable(ttcons(~a, ~colType, ~TT), rt)
		================================================================= ProjectFirstRaw-Preservation-2-IH
		welltypedRawtable(ttcons(~a, ~colType, ttempty), projectFirstRaw(rt))
		
		// include {EQ-ctype, EQ-aempty, EQ-acons, EQ-ttempty, EQ-ttcons, EQ-rtempty, 
		// EQ-rtcons, DIFF-aempty-acons, DIFF-ttempty-ttcons, DIFF-rtempty-rtcons,
		// EQ-rempty, EQ-rcons, EQ-tempty, EQ-tcons, EQ-table, DIFF-rempty-rcons,
		// DIFF-tempty-tcons, welltypedRawtable0, welltypedRawtable1, welltypedRow0,
		// welltypedRow1, welltypedRow2, projectFirstRaw0, projectFirstRaw1, projectFirstRaw2,
		// projectFirstRaw-INV}
		
		goal
		welltypedRawtable(ttcons(~a, ~colType, ~TT), tcons(r, rt))
		============================================================================ ProjectFirstRaw-Preservation-2
		welltypedRawtable(ttcons(~a, ~colType, ttempty), projectFirstRaw(tcons(r, rt)))
	}
	
	hide-all
	axiom
	welltypedRawtable(ttcons(~a, ~colType, ~TT), ~rt)
	============================================================================== ProjectFirstRaw-Preservation-ind
	welltypedRawtable(ttcons(~a, ~colType, ttempty), projectFirstRaw(~rt))
	
} // qed ProjectFirstRaw-Preservation

// proof of FindCol-Preservation
strategy induct-findCol-Preservation {
	// by induction on recursive structure of findCol
		
	goal
	~al = aempty
	~t = table(~al, ~rt)
	welltypedtable(~TT, ~t)
	findCol(~a, ~al, ~rt) = someRawTable(~col)
	findColType(~a, ~TT) = someFType(~colType)
	============================================================== FindCol-Preservation-1
	welltypedRawtable(ttcons(~a, ~colType, ttempty), ~col)

	local {
		consts
			a : Name
			a2 : Name
			al : AttrL
			rt : RawTable
		
		axiom
		findCol(a, al, dropFirstColRaw(rt)) = someRawTable(~col)
		welltypedtable(~TT, table(al, dropFirstColRaw(rt)))
		findColType(a, ~TT) = someFType(~colType)
		============================================================== FindCol-Preservation-2-IH
		welltypedRawtable(ttcons(a, ~colType, ttempty), ~col)
		
		lemma verify-with induction-projectfirstraw-pres
		welltypedRawtable(ttcons(~a, ~colType, ~TT), ~rt)
		============================================================================== ProjectFirstRaw-Preservation
		welltypedRawtable(ttcons(~a, ~colType, ttempty), projectFirstRaw(~rt))
		
		
		goal
		welltypedtable(~TT, table(acons(a2, al), rt))
		findCol(a, acons(a2, al), rt) = someRawTable(~col)
		findColType(a, ~TT) = someFType(~colType)
		============================================================== FindCol-Preservation-2
		welltypedRawtable(ttcons(a, ~colType, ttempty), ~col)
	}
	
	hide-all
	axiom
	// ~t = table(~al, ~rt)
	welltypedtable(~TT, table(~al2, ~rt))
	isSomeRawTable(findCol(~a, ~al2, ~rt))
	isSomeFType(findColType(~a, ~TT))
	================================================== FindCol-Preservation-ind
	welltypedRawtable(ttcons(~a, getFType(findColType(~a, ~TT)), ttempty), getRawTable(findCol(~a, ~al2, ~rt)))
	
} //qed FindCol-Preservation

lemma verify-with induct-findCol-Preservation
// ~t = table(~al, ~rt)
welltypedtable(~TT, table(~al2, ~rt))
isSomeRawTable(findCol(~a, ~al2, ~rt))
isSomeFType(findColType(~a, ~TT))
================================================== FindCol-Preservation
welltypedRawtable(ttcons(~a, getFType(findColType(~a, ~TT)), ttempty), getRawTable(findCol(~a, ~al2, ~rt)))

// proof of project-preservation
strategy struc-induction-project-preservation {
	// proof of Project-Preservation by structural induction on ~al

	goal
	~al = aempty
	welltypedtable(~TT, table(~al2, ~rt))
	projectCols(~al, ~al2, ~rt) == someRawTable(~pt)
	projectTypeAttrL(~al, ~TT) == someTType(~PT)
	===================================== Project-Preservation-aempty
	~TTC |- tvalue(table(~al, ~pt)) : ~PT
	
	local {
		consts
			a : Name
			alrest : AttrL
		
		// proof not possible with timeout 300, when equations not inlined!
		axiom
		//~al = alrest
		welltypedtable(~TT, table(~al2, ~rt))
		isSomeRawTable(projectCols(alrest, ~al2, ~rt))
		isSomeTType(projectTypeAttrL(alrest, ~TT))
		===================================== Project-Preservation-acons-IH
		~TTC |- tvalue(table(alrest, getRawTable(projectCols(alrest, ~al2, ~rt)))) : getTType(projectTypeAttrL(alrest, ~TT))
		
		goal 100
		//~al = acons(a, alrest)
		welltypedtable(~TT, table(~al2, ~rt))
		isSomeRawTable(projectCols(acons(a, alrest), ~al2, ~rt))
		isSomeTType(projectTypeAttrL(acons(a, alrest), ~TT))
		======================================================================================= Project-Preservation-acons
		~TTC |- tvalue(table(acons(a, alrest), getRawTable(projectCols(acons(a, alrest), ~al2, ~rt)))) : getTType(projectTypeAttrL(acons(a, alrest), ~TT))
	}
	
	//if induction successful, we proved Project-Preservation and can abbreviate (for now:)
	hide-all
	axiom
	welltypedtable(~TT, table(~al2, ~rt))
	projectCols(~al, ~al2, ~rt) = someRawTable(~pt)
	projectTypeAttrL(~al, ~TT) == someTType(~PT)
	===================================== Project-Preservation-ind
	~TTC |- tvalue(table(~al, ~pt)) : ~PT	
	
} // qed Project-Preservation

lemma verify-with struc-induction-project-preservation
welltypedtable(~TT, table(~al2, ~rt))
projectCols(~al, ~al2, ~rt) = someRawTable(~pt)
projectTypeAttrL(~al, ~TT) == someTType(~PT)
============================================ Project-Preservation
~TTC |- tvalue(table(~al, ~pt)) : ~PT
