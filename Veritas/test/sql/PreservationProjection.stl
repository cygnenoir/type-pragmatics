module sql.PreservationProjection

import sql.BasicFunctions
import sql.Syntax
import sql.Semantics
import sql.TypeSystem
import sql.TStore
import sql.Tables
import sql.TableAux
import sql.SoundnessAuxDefs

// proof of ProjectEmptyCol-RTEmpty
local {
	// by structural induction ~rt
	
	goal
	~rt = tempty
	================================================ ProjectEmptyCol-RTEmpty-1
	welltypedRawtable(rtempty, projectEmptyCol(~rt))
	
	local {
		consts
			r : Row
			rest : RawTable
		
		axiom
		~rt = rest
		================================================ ProjectEmptyCol-RTEmpty-2-IH
		welltypedRawtable(rtempty, projectEmptyCol(~rt))
		
		goal
		~rt = tcons(r, rest)
		================================================ ProjectEmptyCol-RTEmpty-2
		welltypedRawtable(rtempty, projectEmptyCol(~rt))
	}
} // qed ProjectEmptyCol-RTEmpty

axiom
true
================================================ ProjectEmptyCol-RTEmpty
welltypedRawtable(rtempty, projectEmptyCol(~rt))

// proof of DropFirstCol-Preservation
local {
	// by structural induction on ~rt
	
	goal
	~rt = tempty
	welltypedRawtable(rtcons(~ft, ~RT), ~rt)
	===================================================== DropFirstCol-Preservation-1
	welltypedRawtable(~RT, dropFirstColRaw(~rt))
	
	local {
		consts
			r : Row
			rt : RawTable
		
		axiom
		welltypedRawtable(rtcons(~ft, ~RT), rt)
		===================================================== DropFirstCol-Preservation-2-IH
		welltypedRawtable(~RT, dropFirstColRaw(rt))
		
		goal
		// ~rt = tcons(r, rt)
		welltypedRawtable(rtcons(~ft, ~RT), tcons(r, rt))
		===================================================== DropFirstCol-Preservation-2
		welltypedRawtable(~RT, dropFirstColRaw(tcons(r, rt)))
		// OR
		// =>	r = rempty
		// 	welltypedRawtable(~RT, dropFirstColRaw(tcons(r, rt)))
		// =>	welltypedRawtable(~RT, dropFirstColRaw(tcons(r, rt)))
			// exists ~f, ~r
				// r = rcons(~f, ~r)
				// dropFirstColRaw(tcons(rcons(~f, ~r), rt)) = tcons(~r, dropFirstColRaw(rt))
				// welltypedRow(~RT, ~r)
				// welltypedRawtable(rtcons(~ft, ~RT), rt)
				// welltypedRawtable(~RT, dropFirstColRaw(rt))
				// welltypedRawtable(~RT, tcons(~r, dropFirstColRaw(rt)))
				// welltypedRawtable(~RT, dropFirstColRaw(tcons(r, rt)))
		// welltypedRawtable(~RT, dropFirstColRaw(tcons(r, rt)))
	}
} // qed DropFirstCol-Preservation

axiom 
welltypedRawtable(rtcons(~ft, ~RT), ~rt)
===================================================== DropFirstCol-Preservation
welltypedRawtable(~RT, dropFirstColRaw(~rt))


axiom // TODO prove
welltypedRawtable(~RT, ~rt)
welltypedRawtable(rtcons(~colType, rtempty), ~col)
======================================================================== AttachCol-Preserves-Typing
welltypedRawtable(rtcons(~colType, ~RT), attachColToFrontRaw(~col, ~rt))


// proof of FindCol-Preservation
local {
	// by induction on recursive structure of findCol
	
	local {
		consts
			rt : RawTable
		
		goal
		~al = aempty
		~rt = rt
		~t = table(~al, ~rt)
		welltypedtable(~TT, ~t)
		findCol(~a, ~t) = some(~col)
		findColType(~a, ~TT) = some(~colType)
		============================================================== FindCol-Preservation-1
		welltypedRawtable(rtcons(~colType, rtempty), ~col)
	}

	local {
		consts
			a : AName
			al : AList
			rt : RawTable
		
		axiom
		findCol(~a, table(al, dropFirstColRaw(rt))) = some(~col)
		welltypedtable(~TT, table(al, dropFirstColRaw(rt)))
		findColType(~a, ~TT) = some(~colType)
		============================================================== FindCol-Preservation-2-IH
		welltypedRawtable(rtcons(~colType, rtempty), ~col)
		
		axiom
		welltypedRawtable(rtcons(~colType, ~RT), ~rt)
		============================================================================== ProjectFirstRaw-Preservation
		welltypedRawtable(rtcons(~colType, rtempty), projectFirstRaw(~rt))
		
		
		goal
		welltypedtable(~TT, table(acons(a, al), rt))
		findCol(~a, table(acons(a, al), rt)) = some(~col)
		findColType(~a, ~TT) = some(~colType)
		============================================================== FindCol-Preservation-2
		welltypedRawtable(rtcons(~colType, rtempty), ~col)
		// OR
		// =>	~a = a
		// 	welltypedRawtable(rtcons(~colType, rtempty), ~col)
		// 	// ~col = projectFirstRaw(rt)
		// 	// welltypedRawtable(rawType(~TT), rt)
		// 	// exists ~RTrest
		// 	// 	rawType(~TT) = rtcons(~colType, ~RTrest)
		// 	// 	welltypedRawtable(rtcons(~colType, ~TTrest), rt)
		// 		// welltypedRawtable(ttcons(ctype(~ay, ~colType), ~TTrest), rt)
		// 		// welltypedRawtable(ttcons(ctype(~ax, ~colType), ttempty), ~col)
		// =>	~a != a
		// 	exists ~TTrest, ~fa, ~ft
		// 		~TT = ttcons(ctype(~fa, ~ft), ~TTrest)
		// 		findCol(~a, table(al, dropFirstColRaw(rt))) = some(~col)
		// 		findColType(~a, ~TTrest) = some(~colType)
		// 		rawType(~TT) = rtcons(~ft, rawType(~TTrest))
		// 		welltypedRawtable(rawType(~TTrest), dropFirstColRaw(rt))
		// 		welltypedtable(~TTrest, table(al, dropFirstColRaw(rt)))
		// 		// welltypedtable(~TTrest, table(al, dropFirstColRaw(rt)))
		// 	// welltypedRawtable(rtcons(~colType, rtempty), ~col)
	}
}

axiom
// ~t = table(~al, ~rt)
welltypedtable(~TT, ~t)
findCol(~a, ~t) = some(~col)
findColType(~a, ~TT) = some(~colType)
================================================== FindCol-Preservation
welltypedRawtable(rtcons(~colType, rtempty), ~col)


// proof of Project-Preservation
local {
	// by structural induction on ~al

	goal
	~al = aempty
	welltypedtable(~TT, ~t)
	project(~al, ~t) == some(~pt)
	projectType(~al, ~TT) == some(~PT)
	===================================== Project-Preservation-aempty
	~TTC |- TValue(table(~al, ~pt)) : ~PT
	
	local {
		consts
			a : AName
			alrest : AList
		
		axiom
		~al = alrest
		welltypedtable(~TT, ~t)
		project(~al, ~t) == some(~pt)
		projectType(~al, ~TT) == some(~PT)
		===================================== Project-Preservation-acons-IH
		~TTC |- TValue(table(~al, ~pt)) : ~PT
		
		goal
		~al = acons(a, alrest)
		welltypedtable(~TT, ~t)
		project(~al, ~t) == some(~pt)
		projectType(~al, ~TT) == some(~PT)
		===================================== Project-Preservation-acons
		~TTC |- TValue(table(~al, ~pt)) : ~PT
		// exists ~col, ~colType, ~ptrest, ~PTrest
		// 	findColType(a, ~TT) = some(~colType)
		// 	projectType(alrest, ~TT) == some(~PTrest)
		// 	findCol(a, ~t) = some(~col)
		// 	project(alrest, ~t) = some(~ptrest)
		// 	welltypedRawtable(rawType(~PTrest), ~ptrest)
		// 	welltypedRawtable(rtcons(~colType, rtempty), ~col)
		// 	welltypedRawtable(~PT, ~pt)
		// 	correspondingAList(~PTrest) == alrest
		// 	correspondingAList(~PT) == acons(a, alrest)
			// ~TTC |- TValue(table(alrest, ~ptrest)) : ~PTrest
			// ~PT = ttcons(ctype(a, ~colType), ~PTrest)
			// ~pt = attachColToFrontRaw(~col, ~ptrest)
	}
} // qed Project-Preservation


axiom
welltypedtable(~TT, ~t)
project(~al, ~t) = some(~pt)
projectType(~al, ~TT) == some(~PT)
===================================== Project-Preservation
~TTC |- TValue(table(~al, ~pt)) : ~PT
