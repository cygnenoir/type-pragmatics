module sql.PreservationProjection

import sql.BasicFunctions
import sql.Syntax
import sql.Semantics
import sql.TypeSystem
import sql.TStore
import sql.Tables
import sql.TableAux
import sql.SoundnessAuxDefs

// proof of ProjectEmptyCol-TTEmpty
local {
	// by structural induction ~rt
	
	goal
	~rt = tempty
	================================================ ProjectEmptyCol-TTEmpty-1
	welltypedRawtable(ttempty, projectEmptyCol(~rt))
	
	local {
		consts
			r : Row
			rest : RawTable
		
		axiom
		~rt = rest
		================================================ ProjectEmptyCol-TTEmpty-2-IH
		welltypedRawtable(ttempty, projectEmptyCol(~rt))
		
		goal
		~rt = tcons(r, rest)
		================================================ ProjectEmptyCol-TTEmpty-2
		welltypedRawtable(ttempty, projectEmptyCol(~rt))
	}
} // qed ProjectEmptyCol-TTEmpty

axiom
true
================================================ ProjectEmptyCol-TTEmpty
welltypedRawtable(ttempty, projectEmptyCol(~rt))



// proof of FindCol-Preservation
local {
	// by structural induction on ~al, ~rt, and ~TT
	
	goal
	~al = aempty
	~rt = tempty
	~TT = ttempty
	~t = table(~al, ~rt)
	welltypedtable(~TT, ~t)
	findCol(~a, ~t) = some(~col)
	findColType(~a, ~TT) = some(~colType)
	============================================================== FindCol-Preservation-1
	welltypedRawtable(ttcons(ctype(~ax, ~colType), ttempty), ~col)
	
	
}

axiom
// ~t = table(~al, ~rt)
welltypedtable(~TT, ~t)
findCol(~a, ~t) = some(~col)
findColType(~a, ~TT) = some(~colType)
============================================================== FindCol-Preservation
welltypedRawtable(ttcons(ctype(~ax, ~colType), ttempty), ~col)


axiom // TODO prove
welltypedRawtable(~TT, ~rt)
~ct = ctype(~ax, ~colType)
welltypedRawtable(ttcons(~ct, ttempty), ~col)
=================================================================== AttachCol-Preserves-Typing
welltypedRawtable(ttcons(~ct, ~tt), attachColToFrontRaw(~col, ~rt))


// proof of Project-Preservation
local {
	// by structural induction on ~al

	goal
	~al = aempty
	welltypedtable(~TT, ~t)
	project(~al, ~t) == some(~pt)
	projectType(~al, ~TT) == some(~PT)
	===================================== Project-Preservation-aempty
	~TTC |- TValue(table(~al, ~pt)) : ~PT
	
	local {
		consts
			a : AName
			alrest : AList
		
		axiom
		~al = alrest
		welltypedtable(~TT, ~t)
		project(~al, ~t) == some(~pt)
		projectType(~al, ~TT) == some(~PT)
		===================================== Project-Preservation-acons-IH
		~TTC |- TValue(table(~al, ~pt)) : ~PT
		
		goal
		~al = acons(a, alrest)
		welltypedtable(~TT, ~t)
		project(~al, ~t) == some(~pt)
		projectType(~al, ~TT) == some(~PT)
		===================================== Project-Preservation-acons
		~TTC |- TValue(table(~al, ~pt)) : ~PT
		// exists ~col, ~colType, ~ptrest, ~PTrest
		// 	findColType(a, ~TT) = some(~colType)
		// 	projectType(alrest, ~TT) == some(~PTrest)
		// 	findCol(a, ~t) = some(~col)
		// 	project(alrest, ~t) = some(~ptrest)
		// 	welltypedRawtable(~PTrest, ~ptrest)
		// 	welltypedRawtable(ttcons(ctype(~ax, ~colType), ttempty), ~col)
		// 	welltypedRawtable(~PT, ~pt)
		// 	correspondingAList(~PTrest) == alrest
		// 	correspondingAList(~PT) == acons(a, alrest)
			// ~TTC |- TValue(table(alrest, ~ptrest)) : ~PTrest
			// ~PT = ttcons(ctype(a, ~colType), ~PTrest)
			// ~pt = attachColToFrontRaw(~col, ~ptrest)
	}
} // qed Project-Preservation


axiom
welltypedtable(~TT, ~t)
project(~al, ~t) = some(~pt)
projectType(~al, ~TT) == some(~PT)
===================================== Project-Preservation
~TTC |- TValue(table(~al, ~pt)) : ~PT
