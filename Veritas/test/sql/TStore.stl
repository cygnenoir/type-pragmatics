module sql.TStore

import sql.Tables

sorts
	TStore TName OptTable
	
constructors
	empty : TStore
	bind : TName Table TStore -> TStore
	
	noTable : OptTable
	someTable : Table -> OptTable
	
function
isSomeTable : OptTable -> Bool
isSomeTable(noTable) = false
isSomeTable(someTable(t)) = true

partial function
getSomeTable : OptTable -> Table
getSomeType(someTable(tt)) = tt

function
lookup : TName TStore -> OptTable
lookup(n, empty) = noTable
lookup(n, bind(m, t, TS)) = 
	if (n == m)
	then someTable(t)
	else lookup(n, TS)
	
axioms
~x == ~y
bind(~x, ~Tx, bind(~y, ~Ty, ~C)) |- ~e : ~T
=========================================== T-TStore-Duplicate
bind(~x, ~Tx, ~C) |- ~e : ~T

~x != ~y
bind(~x, ~Tx, bind(~y, ~Ty, ~C)) |- ~e : ~T
=========================================== T-TStore-Swap
bind(~y, ~Ty, bind(~x, ~Tx, ~C)) |- ~e : ~T