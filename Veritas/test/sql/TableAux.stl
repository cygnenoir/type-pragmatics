module sql.TableAux

import sql.Tables

//some auxiliary functions on raw tables (all not knowing anything about table types!)
//the functions are intended to be used with well-typed tables!!

function 
rowIn : Row RawTable -> Bool
rowIn(r1, tempty) = false
rowIn(r1, tmany(r2, rt)) = (r1 == r2) || rowIn(r1, rt)

//projects a raw table to its first column
//returns a raw table with exactly one column or tempty	
function
projectFirstRaw : RawTable -> RawTable
projectFirstRaw(tempty) = tempty
//if table is welltyped, recursion would not be needed in the next case:
projectFirstRaw(tmany(rone(f), rt)) = tmany(rone(f), projectFirstRaw(rt))
projectFirstRaw(tmany(rmany(f, r), rt)) = tmany(rone(f), projectFirstRaw(rt))


//drops the first column of a raw table
//returns a raw table with one column less than before or tempty
function
dropFirstColRaw : RawTable -> RawTable
dropFirstColRaw(tempty) = tempty
//in the next case, all rows should have only one field, so we abbreviate:
dropFirstColRaw(tmany(rone(f), rt)) = tempty
dropFirstColRaw(tmany(rmany(f, r), rt)) = tmany(r, dropFirstColRaw(rt)) 

//attaches a raw table with one column to the front of another raw table
//returns a raw table with one column more
//assumes that both tables have the same row count!
//has to be partial, not every case is covered!
partial function
attachColToFrontRaw : RawTable RawTable -> RawTable
//second arg t should be tempty normally!
attachColToFrontRaw(tempty, t) = tempty
attachColToFrontRaw(tmany(rone(f), rt1), tmany(r, rt2)) = 
	tmany(rmany(f, r), attachColToFrontRaw(rt1, rt2))



//definition: union removes duplicate rows
//(but only between the two tables, not within a table!)
//preserves row order of the two original raw tables
function
rawUnion : RawTable RawTable -> RawTable
rawUnion(tempty, rt2) = rt2
rawUnion(rt1, tempty) = rt1
rawUnion(tmany(r1, tempty), rt2) = 
	if (!rowIn(r1, rt2))
	then tmany(r1, rt2)
	else rt2
rawUnion(tmany(r1, rt1), rt2) =
	let urt1rt2 = rawUnion(rt1, rt2) in
		if (!rowIn(r1, rt2))
		then tmany(r1, urt1rt2)
		else urt1rt2
		
//preserves order of rows in first argument
function
rawIntersection : RawTable RawTable -> RawTable
rawIntersection(tempty, rt2) = tempty
rawIntersection(rt1, tempty) = tempty
rawIntersection(tmany(r1, tempty), rt2) = 
	if (rowIn(r1, rt2))
	then tmany(r1, tempty)
	else tempty
rawIntersection(tmany(r1, rt1), rt2) =
	let urt1rt2 = rawIntersection(rt1, rt2) in
		if (rowIn(r1, rt2))
		then tmany(r1, urt1rt2)
		else urt1rt2
		
function
rawDifference : RawTable RawTable -> RawTable
rawDifference(tempty, rt2) = tempty
rawDifference(rt1, tempty) = rt1
rawDifference(tmany(r1, tempty), rt2) =
	if (!rowIn(r1, rt2))
	then tmany(r1, tempty)
	else tempty
rawDifference(tmany(r1, rt1), rt2) =
	let drt1rt2 = rawDifference(rt1, rt2) in
		if (!rowIn(r1, rt2))
		then tmany(r1, drt1rt2)
		else drt1rt2
		
//some tests of the raw table functions
goal
~rt = tmany(rmany(~x1, rmany(~y2, rone(~z2))), 
	tmany(rmany(~x2, rmany(~y1, rone(~z1))), 
	tmany(rmany(~x2, rmany(~y2, rone(~z1))), 
	tmany(rmany(~x1, rmany(~y1, rone(~z1))),
	tmany(rmany(~x1, rmany(~y2, rone(~z1))),
	tmany(rmany(~x2, rmany(~y2, rone(~z2))), tempty))))))
~r = rmany(~x1, rmany(~y2, rone(~z1)))
========================================================== test-rowIn
rowIn(~r, ~rt)

local {
	consts x1 : FVal
		x2 : FVal
	
	goal 
	~rt == tmany(rmany(x1, rone(x2)), tempty)
	~r == rmany(x1, rone(x1))
	========================================= test-notrowIn0
	!rowIn(~r, ~rt)
	
}

local {
	
	consts 
		x1 : FVal
		x2 : FVal
		y1 : FVal
		y2 : FVal
		z1 : FVal
		z2 : FVal

	goal
	~rt == tmany(rmany(x1, rmany(y2, rone(z2))), 
		tmany(rmany(x2, rmany(y1, rone(z1))), tempty))
	~r == rmany(x1, rmany(y2, rone(z1)))
	========================================================== test-notrowIn1
	!rowIn(~r, ~rt)
}


local {
	
	consts 
		x1 : FVal
		x2 : FVal
		y1 : FVal
		y2 : FVal
		z1 : FVal
		z2 : FVal

	goal
	~rt == tmany(rmany(x1, rmany(y2, rone(z2))), 
		tmany(rmany(x2, rmany(y1, rone(z1))), 
		tmany(rmany(x2, rmany(y2, rone(z1))), 
		tmany(rmany(x1, rmany(y1, rone(z1))),
		tmany(rmany(x2, rmany(y2, rone(z2))), tempty)))))
	~r == rmany(x1, rmany(y2, rone(z1)))
	========================================================== test-notrowIn2
	!rowIn(~r, ~rt)
}


goal
~rt = tmany(rmany(~x1, rmany(~y2, rone(~z2))), 
	tmany(rmany(~x2, rmany(~y1, rone(~z1))), 
	tmany(rmany(~x2, rmany(~y2, rone(~z1))), 
	tmany(rmany(~x1, rmany(~y1, rone(~z1))),
	tmany(rmany(~x1, rmany(~y2, rone(~z1))),
	tmany(rmany(~x2, rmany(~y2, rone(~z2))), tempty))))))
~prt = tmany(rone(~x1),
	tmany(rone(~x2),
	tmany(rone(~x2),
	tmany(rone(~x1),
	tmany(rone(~x1),
	tmany(rone(~x2), tempty))))))
========================================================== test-projectFirstRaw
projectFirstRaw(~rt) == ~prt

goal
~prt = tmany(rone(~x1),
	tmany(rone(~x2),
	tmany(rone(~x2),
	tmany(rone(~x1),
	tmany(rone(~x1),
	tmany(rone(~x2), tempty))))))
==================================== test-projectFirstRaw1
projectFirstRaw(~prt) == ~prt

goal
~rt = tmany(rmany(~x1, rmany(~y2, rone(~z2))), 
	tmany(rmany(~x2, rmany(~y1, rone(~z1))), 
	tmany(rmany(~x2, rmany(~y2, rone(~z1))), 
	tmany(rmany(~x1, rmany(~y1, rone(~z1))),
	tmany(rmany(~x1, rmany(~y2, rone(~z1))),
	tmany(rmany(~x2, rmany(~y2, rone(~z2))), tempty))))))
~drt = tmany(rmany(~y2, rone(~z2)),
	tmany(rmany(~y1, rone(~z1)),
	tmany(rmany(~y2, rone(~z1)),
	tmany(rmany(~y1, rone(~z1)),
	tmany(rmany(~y2, rone(~z1)),
	tmany(rmany(~y2, rone(~z2)), tempty))))))
========================================================== test-dropFirstColRaw
dropFirstColRaw(~rt) == ~drt

goal
~prt = tmany(rone(~x1),
	tmany(rone(~x2), tempty))
~drt = tmany(rmany(~y2, rone(~z2)),
	tmany(rmany(~y1, rone(~z1)), tempty))
~rt = tmany(rmany(~x1, rmany(~y2, rone(~z2))), 
	tmany(rmany(~x2, rmany(~y1, rone(~z1))), tempty))
========================================================== test-attachColToFrontRaw1
attachColToFrontRaw(~prt, ~drt) == ~rt

goal
~prt = tmany(rone(~x1),
	tmany(rone(~x2),
	tmany(rone(~x2), tempty)))
~drt = tmany(rmany(~y2, rone(~z2)),
	tmany(rmany(~y1, rone(~z1)),
	tmany(rmany(~y2, rone(~z1)), tempty)))
~rt = tmany(rmany(~x1, rmany(~y2, rone(~z2))), 
	tmany(rmany(~x2, rmany(~y1, rone(~z1))), 
	tmany(rmany(~x2, rmany(~y2, rone(~z1))), tempty)))
========================================================== test-attachColToFrontRaw3
attachColToFrontRaw(~prt, ~drt) == ~rt

goal
~prt = tmany(rone(~x1),
	tmany(rone(~x2),
	tmany(rone(~x2),
	tmany(rone(~x1), tempty))))
~drt = tmany(rmany(~y2, rone(~z2)),
	tmany(rmany(~y1, rone(~z1)),
	tmany(rmany(~y2, rone(~z1)),
	tmany(rmany(~y1, rone(~z1)), tempty))))
~rt = tmany(rmany(~x1, rmany(~y2, rone(~z2))), 
	tmany(rmany(~x2, rmany(~y1, rone(~z1))), 
	tmany(rmany(~x2, rmany(~y2, rone(~z1))), 
	tmany(rmany(~x1, rmany(~y1, rone(~z1))), tempty))))
========================================================== test-attachColToFrontRaw4
attachColToFrontRaw(~prt, ~drt) == ~rt

goal
~prt = tmany(rmany(~y2, rone(~z2)),
	tmany(rmany(~y1, rone(~z1)),
	tmany(rmany(~y2, rone(~z1)),
	tmany(rmany(~y1, rone(~z1)), tempty))))
~drt = tmany(rmany(~y2, rone(~z2)),
	tmany(rmany(~y1, rone(~z1)),
	tmany(rmany(~y2, rone(~z1)),
	tmany(rmany(~y1, rone(~z1)), tempty))))
~rt = tmany(rmany(~y2, rone(~z2)), 
	tmany(rmany(~y1, rone(~z1)), 
	tmany(rmany(~y2, rone(~z1)), 
	tmany(rmany(~y1, rone(~z1)), tempty))))
========================================================== test-rawUnion1
rawUnion(~prt, ~drt) == ~rt

// goal
// ~prt = tmany(rmany(~y2, rone(~z2)), tempty)
// ~drt = tmany(rmany(~y1, rone(~z1)),
// 	tmany(rmany(~y2, rone(~z1)),
// 	tmany(rmany(~y1, rone(~z1)), tempty)))
// ~rt = tmany(rmany(~y2, rone(~z2)), 
// 	tmany(rmany(~y1, rone(~z1)), 
// 	tmany(rmany(~y2, rone(~z1)), 
// 	tmany(rmany(~y1, rone(~z1)), tempty))))
// ~z1 != ~z2
// ~y1 != ~y2
// ~x1 != ~x2
// ========================================================== test-rawUnion2
// rawUnion(~prt, ~drt) == ~rt

local {
	consts 
		y1 : FVal
		y2 : FVal
		z1 : FVal
		z2 : FVal
	goal
	~prt = tmany(rmany(y2, rone(z2)), tempty)
	~drt = tmany(rmany(y1, rone(z1)),
		tmany(rmany(y2, rone(z1)),
		tmany(rmany(y1, rone(z1)), tempty)))
	~rt = tmany(rmany(y2, rone(z2)), 
		tmany(rmany(y1, rone(z1)), 
		tmany(rmany(y2, rone(z1)), 
		tmany(rmany(y1, rone(z1)), tempty))))
	========================================================== test-rawUnion2
	rawUnion(~prt, ~drt) == ~rt
}

// goal
// ~prt = tmany(rmany(~y2, rone(~z2)), 
// 	tmany(rmany(~y2, rone(~z1)), tempty))
// ~drt = tmany(rmany(~y1, rone(~z1)),
// 	tmany(rmany(~y2, rone(~z1)),
// 	tmany(rmany(~y1, rone(~z1)), tempty)))
// ~rt = tmany(rmany(~y2, rone(~z2)), 
// 	tmany(rmany(~y1, rone(~z1)), 
// 	tmany(rmany(~y2, rone(~z1)), 
// 	tmany(rmany(~y1, rone(~z1)), tempty))))
// ~z1 != ~z2
// ~y1 != ~y2
// ~x1 != ~x2
// ========================================================== test-rawUnion3
// rawUnion(~prt, ~drt) == ~rt

local {
	
	consts 
		y1 : FVal
		y2 : FVal
		z1 : FVal
		z2 : FVal
		
	goal
	~prt = tmany(rmany(y2, rone(z2)), 
		tmany(rmany(y2, rone(z1)), tempty))
	~drt = tmany(rmany(y1, rone(z1)),
		tmany(rmany(y2, rone(z1)),
		tmany(rmany(y1, rone(z1)), tempty)))
	~rt = tmany(rmany(y2, rone(z2)), 
		tmany(rmany(y1, rone(z1)), 
		tmany(rmany(y2, rone(z1)), 
		tmany(rmany(y1, rone(z1)), tempty))))
	========================================================== test-rawUnion3
	rawUnion(~prt, ~drt) == ~rt
}

goal
~prt = tmany(rmany(~y2, rone(~z2)),
	tmany(rmany(~y1, rone(~z1)),
	tmany(rmany(~y2, rone(~z1)),
	tmany(rmany(~y1, rone(~z1)), tempty))))
~drt = tmany(rmany(~y2, rone(~z2)),
	tmany(rmany(~y1, rone(~z1)),
	tmany(rmany(~y2, rone(~z1)),
	tmany(rmany(~y1, rone(~z1)), tempty))))
~rt = tmany(rmany(~y2, rone(~z2)), 
	tmany(rmany(~y1, rone(~z1)), 
	tmany(rmany(~y2, rone(~z1)), 
	tmany(rmany(~y1, rone(~z1)), tempty))))
========================================================== test-rawIntersection1
rawIntersection(~prt, ~drt) == ~rt

// goal
// ~prt = tmany(rmany(~y2, rone(~z2)), tempty)
// ~drt = tmany(rmany(~y1, rone(~z1)),
// 	tmany(rmany(~y2, rone(~z1)),
// 	tmany(rmany(~y1, rone(~z1)), tempty)))
// ~z1 != ~z2
// ~y1 != ~y2
// ~x1 != ~x2
// ========================================================== test-rawIntersection2
// rawIntersection(~prt, ~drt) == tempty

local {
	
	consts 
		y1 : FVal
		y2 : FVal
		z1 : FVal
		z2 : FVal
		
	goal
	~prt = tmany(rmany(y2, rone(z2)), tempty)
	~drt = tmany(rmany(y1, rone(z1)),
		tmany(rmany(y2, rone(z1)),
		tmany(rmany(y1, rone(z1)), tempty)))
	========================================================== test-rawIntersection2
	rawIntersection(~prt, ~drt) == tempty
}

// goal
// ~prt = tmany(rmany(~y2, rone(~z2)), 
// 	tmany(rmany(~y2, rone(~z1)), tempty))
// ~drt = tmany(rmany(~y1, rone(~z1)),
// 	tmany(rmany(~y2, rone(~z1)),
// 	tmany(rmany(~y1, rone(~z1)), tempty)))
// ~rt = tmany(rmany(~y2, rone(~z1)), tempty)
// ~z1 != ~z2
// ~y1 != ~y2
// ~x1 != ~x2
// ========================================================== test-rawIntersection3
// rawIntersection(~prt, ~drt) == ~rt

// requires 120 timeout! (needs between 70-80 seconds to prove!)
local {
	
	consts 
		y1 : FVal
		y2 : FVal
		z1 : FVal
		z2 : FVal

	goal
	~prt = tmany(rmany(y2, rone(z2)), 
		tmany(rmany(y2, rone(z1)), tempty))
	~drt = tmany(rmany(y1, rone(z1)),
		tmany(rmany(y2, rone(z1)),
		tmany(rmany(y1, rone(z1)), tempty)))
	~rt = tmany(rmany(y2, rone(z1)), tempty)
	========================================================== test-rawIntersection3
	rawIntersection(~prt, ~drt) == ~rt
}

goal
~prt = tmany(rmany(~y2, rone(~z2)),
	tmany(rmany(~y1, rone(~z1)),
	tmany(rmany(~y2, rone(~z1)),
	tmany(rmany(~y1, rone(~z1)), tempty))))
~drt = tmany(rmany(~y2, rone(~z2)),
	tmany(rmany(~y1, rone(~z1)),
	tmany(rmany(~y2, rone(~z1)),
	tmany(rmany(~y1, rone(~z1)), tempty))))
========================================================== test-rawDifference1
rawDifference(~prt, ~drt) == tempty

local {
	
	consts 
		y1 : FVal
		y2 : FVal
		z1 : FVal
		z2 : FVal
		
	goal
	~prt = tmany(rmany(y2, rone(z2)), tempty)
	~drt = tmany(rmany(y1, rone(z1)),
		tmany(rmany(y2, rone(z1)),
		tmany(rmany(y1, rone(z1)), tempty)))
	========================================================== test-rawDifference2
	rawDifference(~prt, ~drt) == ~prt
}


local {
	
	consts 
		y1 : FVal
		y2 : FVal
		z1 : FVal
		z2 : FVal

	goal
	~prt = tmany(rmany(y2, rone(z2)), 
		tmany(rmany(y2, rone(z1)), tempty))
	~drt = tmany(rmany(y1, rone(z1)),
		tmany(rmany(y2, rone(z1)),
		tmany(rmany(y1, rone(z1)), tempty)))
	~rt = tmany(rmany(y2, rone(z2)), tempty)
	========================================================== test-rawDifference3
	rawDifference(~prt, ~drt) == ~rt
}

