
fof('progress-projection-acons-IH', axiom, (![VTTC,Vtn,VTS,VTT1,VTT2,Vt] : ((vStoreContextConsistent(VTS,VTTC) & ((vclookup(Vtn,VTTC)=vsome(VTT1)) & ((vlookup(Vtn,VTS)=vsome(Vt)) & (vprojectType(var,VTT1)=vsome(VTT2))))) => (?[Vrt] : (vproject(var,Vt)=vsome(Vrt)))))).
fof('EQ-none', axiom, (((vnone=vnone) => $true) & ($true => (vnone=vnone)))).
fof('EQ-some', axiom, (![VA0,VA1] : (((vsome(VA0)=vsome(VA1)) => (VA0=VA1)) & ((VA0=VA1) => (vsome(VA0)=vsome(VA1)))))).
fof('DIFF-none-some', axiom, (![VA0] : (vnone!=vsome(VA0)))).
fof('isSome0', axiom, (![VOpt0] : ((VOpt0=vnone) => (~visSome(VOpt0))))).
fof('isSome1', axiom, (![Va,VOpt0] : ((VOpt0=vsome(Va)) => visSome(VOpt0)))).
fof('getSome0', axiom, (![VOpt0,RESULT,Va] : ((VOpt0=vsome(Va)) => ((RESULT=vgetSome(VOpt0)) => (RESULT=Va))))).
fof('isSome-INV-1', axiom, (![Vopt] : (visSome(Vopt) => (?[Va] : ((Vopt=vsome(Va)) & (vgetSome(Vopt)=Va)))))).
fof('isSome-INV-2', axiom, (![Vopt,Va,Vb] : (((Vopt=vsome(Va)) & (vgetSome(Vopt)=Vb)) => (Va=Vb)))).
fof('EQ-ctype', axiom, (![VAName0,VFType0,VAName1,VFType1] : (((vctype(VAName0,VFType0)=vctype(VAName1,VFType1)) => ((VAName0=VAName1) & (VFType0=VFType1))) & (((VAName0=VAName1) & (VFType0=VFType1)) => (vctype(VAName0,VFType0)=vctype(VAName1,VFType1)))))).
fof('EQ-aempty', axiom, (((vaempty=vaempty) => $true) & ($true => (vaempty=vaempty)))).
fof('EQ-acons', axiom, (![VAName0,VAList0,VAName1,VAList1] : (((vacons(VAName0,VAList0)=vacons(VAName1,VAList1)) => ((VAName0=VAName1) & (VAList0=VAList1))) & (((VAName0=VAName1) & (VAList0=VAList1)) => (vacons(VAName0,VAList0)=vacons(VAName1,VAList1)))))).
fof('EQ-ttempty', axiom, (((vttempty=vttempty) => $true) & ($true => (vttempty=vttempty)))).
fof('EQ-ttcons', axiom, (![VCType0,VTType0,VCType1,VTType1] : (((vttcons(VCType0,VTType0)=vttcons(VCType1,VTType1)) => ((VCType0=VCType1) & (VTType0=VTType1))) & (((VCType0=VCType1) & (VTType0=VTType1)) => (vttcons(VCType0,VTType0)=vttcons(VCType1,VTType1)))))).
fof('EQ-rtempty', axiom, (((vrtempty=vrtempty) => $true) & ($true => (vrtempty=vrtempty)))).
fof('EQ-rtcons', axiom, (![VFType0,VRawType0,VFType1,VRawType1] : (((vrtcons(VFType0,VRawType0)=vrtcons(VFType1,VRawType1)) => ((VFType0=VFType1) & (VRawType0=VRawType1))) & (((VFType0=VFType1) & (VRawType0=VRawType1)) => (vrtcons(VFType0,VRawType0)=vrtcons(VFType1,VRawType1)))))).
fof('DIFF-aempty-acons', axiom, (![VAName0,VAList0] : (vaempty!=vacons(VAName0,VAList0)))).
fof('DIFF-ttempty-ttcons', axiom, (![VCType0,VTType0] : (vttempty!=vttcons(VCType0,VTType0)))).
fof('DIFF-rtempty-rtcons', axiom, (![VFType0,VRawType0] : (vrtempty!=vrtcons(VFType0,VRawType0)))).
fof('EQ-rempty', axiom, (((vrempty=vrempty) => $true) & ($true => (vrempty=vrempty)))).
fof('EQ-rcons', axiom, (![VFVal0,VRow0,VFVal1,VRow1] : (((vrcons(VFVal0,VRow0)=vrcons(VFVal1,VRow1)) => ((VFVal0=VFVal1) & (VRow0=VRow1))) & (((VFVal0=VFVal1) & (VRow0=VRow1)) => (vrcons(VFVal0,VRow0)=vrcons(VFVal1,VRow1)))))).
fof('EQ-tempty', axiom, (((vtempty=vtempty) => $true) & ($true => (vtempty=vtempty)))).
fof('EQ-tcons', axiom, (![VRow0,VRawTable0,VRow1,VRawTable1] : (((vtcons(VRow0,VRawTable0)=vtcons(VRow1,VRawTable1)) => ((VRow0=VRow1) & (VRawTable0=VRawTable1))) & (((VRow0=VRow1) & (VRawTable0=VRawTable1)) => (vtcons(VRow0,VRawTable0)=vtcons(VRow1,VRawTable1)))))).
fof('EQ-table', axiom, (![VAList0,VRawTable0,VAList1,VRawTable1] : (((vtable(VAList0,VRawTable0)=vtable(VAList1,VRawTable1)) => ((VAList0=VAList1) & (VRawTable0=VRawTable1))) & (((VAList0=VAList1) & (VRawTable0=VRawTable1)) => (vtable(VAList0,VRawTable0)=vtable(VAList1,VRawTable1)))))).
fof('DIFF-rempty-rcons', axiom, (![VFVal0,VRow0] : (vrempty!=vrcons(VFVal0,VRow0)))).
fof('DIFF-tempty-tcons', axiom, (![VRow0,VRawTable0] : (vtempty!=vtcons(VRow0,VRawTable0)))).
fof('lookup0', axiom, (![Vn,VTName0,VTStore0,RESULT] : (((VTName0=Vn) & (VTStore0=vempty)) => ((RESULT=vlookup(VTName0,VTStore0)) => (RESULT=vnone))))).
fof('lookup1', axiom, (![VTS,Vn,Vm,VTName0,VTStore0,RESULT,Vt] : (((VTName0=Vn) & (VTStore0=vbind(Vm,Vt,VTS))) => ((Vn=Vm) => ((RESULT=vlookup(VTName0,VTStore0)) => (RESULT=vsome(Vt))))))).
fof('lookup2', axiom, (![Vt,Vm,VTName0,VTStore0,RESULT,Vn,VTS] : (((VTName0=Vn) & (VTStore0=vbind(Vm,Vt,VTS))) => ((~(Vn=Vm)) => ((RESULT=vlookup(VTName0,VTStore0)) => (RESULT=vlookup(Vn,VTS))))))).
fof('lookup-INV', axiom, (![VTName0,VTStore0,RESULT] : ((vlookup(VTName0,VTStore0)=RESULT) => ((?[Vn] : ((VTName0=Vn) & ((VTStore0=vempty) & (RESULT=vnone)))) | ((?[VTS,Vn,Vm,Vt] : ((VTName0=Vn) & ((VTStore0=vbind(Vm,Vt,VTS)) & ((Vn=Vm) & (RESULT=vsome(Vt)))))) | (?[Vt,Vm,Vn,VTS] : ((VTName0=Vn) & ((VTStore0=vbind(Vm,Vt,VTS)) & ((~(Vn=Vm)) & (RESULT=vlookup(Vn,VTS))))))))))).
fof('clookup0', axiom, (![Vtn,VTName0,VTTContext0,RESULT] : (((VTName0=Vtn) & (VTTContext0=vcempty)) => ((RESULT=vclookup(VTName0,VTTContext0)) => (RESULT=vnone))))).
fof('clookup1', axiom, (![VTTC,Vtn,Vtm,VTName0,VTTContext0,RESULT,Vtt] : (((VTName0=Vtn) & (VTTContext0=vcbind(Vtm,Vtt,VTTC))) => ((Vtn=Vtm) => ((RESULT=vclookup(VTName0,VTTContext0)) => (RESULT=vsome(Vtt))))))).
fof('clookup2', axiom, (![Vtt,Vtm,VTName0,VTTContext0,RESULT,Vtn,VTTC] : (((VTName0=Vtn) & (VTTContext0=vcbind(Vtm,Vtt,VTTC))) => ((~(Vtn=Vtm)) => ((RESULT=vclookup(VTName0,VTTContext0)) => (RESULT=vclookup(Vtn,VTTC))))))).
fof('clookup-INV', axiom, (![VTName0,VTTContext0,RESULT] : ((vclookup(VTName0,VTTContext0)=RESULT) => ((?[Vtn] : ((VTName0=Vtn) & ((VTTContext0=vcempty) & (RESULT=vnone)))) | ((?[VTTC,Vtn,Vtm,Vtt] : ((VTName0=Vtn) & ((VTTContext0=vcbind(Vtm,Vtt,VTTC)) & ((Vtn=Vtm) & (RESULT=vsome(Vtt)))))) | (?[Vtt,Vtm,Vtn,VTTC] : ((VTName0=Vtn) & ((VTTContext0=vcbind(Vtm,Vtt,VTTC)) & ((~(Vtn=Vtm)) & (RESULT=vclookup(Vtn,VTTC))))))))))).
fof('findColType0', axiom, (![Van,VAName0,VTType0,RESULT] : (((VAName0=Van) & (VTType0=vttempty)) => ((RESULT=vfindColType(VAName0,VTType0)) => (RESULT=vnone))))).
fof('findColType1', axiom, (![Vttr,Van,Va,VAName0,VTType0,RESULT,Vft] : (((VAName0=Van) & (VTType0=vttcons(vctype(Va,Vft),Vttr))) => ((Van=Va) => ((RESULT=vfindColType(VAName0,VTType0)) => (RESULT=vsome(Vft))))))).
fof('findColType2', axiom, (![Vft,Va,VAName0,VTType0,RESULT,Van,Vttr] : (((VAName0=Van) & (VTType0=vttcons(vctype(Va,Vft),Vttr))) => ((~(Van=Va)) => ((RESULT=vfindColType(VAName0,VTType0)) => (RESULT=vfindColType(Van,Vttr))))))).
fof('findColType-INV', axiom, (![VAName0,VTType0,RESULT] : ((vfindColType(VAName0,VTType0)=RESULT) => ((?[Van] : ((VAName0=Van) & ((VTType0=vttempty) & (RESULT=vnone)))) | ((?[Vttr,Van,Va,Vft] : ((VAName0=Van) & ((VTType0=vttcons(vctype(Va,Vft),Vttr)) & ((Van=Va) & (RESULT=vsome(Vft)))))) | (?[Vft,Va,Van,Vttr] : ((VAName0=Van) & ((VTType0=vttcons(vctype(Va,Vft),Vttr)) & ((~(Van=Va)) & (RESULT=vfindColType(Van,Vttr))))))))))).
fof('projectType0', axiom, (![Vtt,VAList0,VTType0,RESULT] : (((VAList0=vaempty) & (VTType0=Vtt)) => ((RESULT=vprojectType(VAList0,VTType0)) => (RESULT=vsome(vttempty)))))).
fof('projectType1', axiom, (![Valr,Vtt,VAList0,VTType0,RESULT,Va,Vft,Vtprest] : (((VAList0=vacons(Va,Valr)) & (VTType0=Vtt)) => (((Vft=vfindColType(Va,Vtt)) & ((Vtprest=vprojectType(Valr,Vtt)) & (visSome(Vft) & visSome(Vtprest)))) => ((RESULT=vprojectType(VAList0,VTType0)) => (RESULT=vsome(vttcons(vctype(Va,vgetSome(Vft)),vgetSome(Vtprest))))))))).
fof('projectType2', axiom, (![Va,Valr,Vtt,Vft,Vtprest,VAList0,VTType0,RESULT] : (((VAList0=vacons(Va,Valr)) & (VTType0=Vtt)) => (((Vft=vfindColType(Va,Vtt)) & ((Vtprest=vprojectType(Valr,Vtt)) & (~(visSome(Vft) & visSome(Vtprest))))) => ((RESULT=vprojectType(VAList0,VTType0)) => (RESULT=vnone)))))).
fof('projectType-INV', axiom, (![VAList0,VTType0,RESULT] : ((vprojectType(VAList0,VTType0)=RESULT) => ((?[Vtt] : ((VAList0=vaempty) & ((VTType0=Vtt) & (RESULT=vsome(vttempty))))) | ((?[Valr,Vtt,Va,Vft,Vtprest] : ((VAList0=vacons(Va,Valr)) & ((VTType0=Vtt) & ((Vft=vfindColType(Va,Vtt)) & ((Vtprest=vprojectType(Valr,Vtt)) & (visSome(Vft) & (visSome(Vtprest) & (RESULT=vsome(vttcons(vctype(Va,vgetSome(Vft)),vgetSome(Vtprest))))))))))) | (?[Va,Valr,Vtt,Vft,Vtprest] : ((VAList0=vacons(Va,Valr)) & ((VTType0=Vtt) & ((Vft=vfindColType(Va,Vtt)) & ((Vtprest=vprojectType(Valr,Vtt)) & ((~(visSome(Vft) & visSome(Vtprest))) & (RESULT=vnone)))))))))))).
fof('StoreContext-Lookup-WT', axiom, (![VTS,Vtn,VTTC,Vtt,Vt] : ((vStoreContextConsistent(VTS,VTTC) & ((vlookup(Vtn,VTS)=vsome(Vt)) & (vclookup(Vtn,VTTC)=vsome(Vtt)))) => vwelltypedtable(Vtt,Vt)))).
fof('project0', axiom, (![Val,VAList0,VTable0,RESULT,Vrt] : (((VAList0=vaempty) & (VTable0=vtable(Val,Vrt))) => ((RESULT=vproject(VAList0,VTable0)) => (RESULT=vsome(vprojectEmptyCol(Vrt))))))).
fof('project1', axiom, (![Va,Valr,Vt,VAList0,VTable0,RESULT,Vcol,Vrest] : (((VAList0=vacons(Va,Valr)) & (VTable0=Vt)) => (((Vcol=vfindCol(Va,Vt)) & ((Vrest=vproject(Valr,Vt)) & (visSome(Vcol) & visSome(Vrest)))) => ((RESULT=vproject(VAList0,VTable0)) => (RESULT=vattachColToFrontRaw(vgetSome(Vcol),vgetSome(Vrest)))))))).
fof('project2', axiom, (![Va,Valr,Vt,Vcol,Vrest,VAList0,VTable0,RESULT] : (((VAList0=vacons(Va,Valr)) & (VTable0=Vt)) => (((Vcol=vfindCol(Va,Vt)) & ((Vrest=vproject(Valr,Vt)) & (~(visSome(Vcol) & visSome(Vrest))))) => ((RESULT=vproject(VAList0,VTable0)) => (RESULT=vnone)))))).
fof('project-INV', axiom, (![VAList0,VTable0,RESULT] : ((vproject(VAList0,VTable0)=RESULT) => ((?[Val,Vrt] : ((VAList0=vaempty) & ((VTable0=vtable(Val,Vrt)) & (RESULT=vsome(vprojectEmptyCol(Vrt)))))) | ((?[Va,Valr,Vt,Vcol,Vrest] : ((VAList0=vacons(Va,Valr)) & ((VTable0=Vt) & ((Vcol=vfindCol(Va,Vt)) & ((Vrest=vproject(Valr,Vt)) & (visSome(Vcol) & (visSome(Vrest) & (RESULT=vattachColToFrontRaw(vgetSome(Vcol),vgetSome(Vrest)))))))))) | (?[Va,Valr,Vt,Vcol,Vrest] : ((VAList0=vacons(Va,Valr)) & ((VTable0=Vt) & ((Vcol=vfindCol(Va,Vt)) & ((Vrest=vproject(Valr,Vt)) & ((~(visSome(Vcol) & visSome(Vrest))) & (RESULT=vnone)))))))))))).
fof('progress-attachColToFrontRaw', axiom, (![VTT1,Va,Var,Vt,Vcrt,Vrt] : ((vwelltypedtable(VTT1,Vt) & ((vfindCol(Va,Vt)=vsome(Vcrt)) & (vproject(Var,Vt)=vsome(Vrt)))) => (?[Vrt2] : (vattachColToFrontRaw(Vcrt,Vrt)=vsome(Vrt2)))))).
fof('progress-findCol', axiom, (![VTT1,VTT2,Va,Vt] : ((vwelltypedtable(VTT1,Vt) & (vfindColType(Va,VTT1)=vsome(VTT2))) => (?[Vc] : (vfindCol(Va,Vt)=vsome(Vc)))))).
fof('progress-projection-acons', conjecture, (![VTTC,Vtn,VTS,VTT1,VTT2,Va,Vt] : ((vStoreContextConsistent(VTS,VTTC) & ((vclookup(Vtn,VTTC)=vsome(VTT1)) & ((vlookup(Vtn,VTS)=vsome(Vt)) & (vprojectType(vacons(Va,var),VTT1)=vsome(VTT2))))) => (?[Vrt] : (vproject(vacons(Va,var),Vt)=vsome(Vrt)))))).