module sql.Preservation

import sql.BasicFunctions
import sql.Syntax
import sql.Semantics
import sql.TypeSystem
import sql.TStore
import sql.Tables


goal 
~sqli == TValue(~t)
~cin == conf(~sqli, ~TS)
~cout == conf(~sqlo, ~TS)
reduce(~cin) = some(~cout)
~TS |- ~sqli : ~TT
================================ SQL-Preservation-T-TValue
~TS |- ~sqlo : ~TT

goal 
~sqli == SelectAll(~tn)
~cin == conf(~sqli, ~TS)
~cout == conf(~sqlo, ~TS)
reduce(~cin) = some(~cout)
~TS |- ~sqli : ~TT
================================ SQL-Preservation-T-SelectAll
~TS |- ~sqlo : ~TT

goal 
~sqli == SelectFrom1(~TT, ~tn)
~cin == conf(~sqli, ~TS)
~cout == conf(~sqlo, ~TS)
reduce(~cin) = some(~cout)
~TS |- ~sqli : ~TT
================================ SQL-Preservation-T-SelectFrom1
~TS |- ~sqlo : ~TT


goal 
~sqli == SelectAllFromWhere1(~tn, ~p)
~cin == conf(~sqli, ~TS)
~cout == conf(~sqlo, ~TS)
reduce(~cin) = some(~cout)
~TS |- ~sqli : ~TT
================================ SQL-Preservation-T-SelectAllFromWhere1
~TS |- ~sqlo : ~TT


goal 
~sqli == SelectFromWhere1(~TT, ~tn, ~p)
~cin == conf(~sqli, ~TS)
~cout == conf(~sqlo, ~TS)
reduce(~cin) = some(~cout)
~TS |- ~sqli : ~TT
================================ SQL-Preservation-T-SelectFromWhere1
~TS |- ~sqlo : ~TT

local {
	consts sql1 : SQLExp
		sql2 : SQLExp
		TS : TStore
		TT : TType
	
	axiom 
	~cin == conf(sql1, TS)
	~cout == conf(~sqlo, TS)
	reduce(~cin) = some(~cout)
	TS |- ~sqli : TT
	================================ SQL-Preservation-T-Union-IH1
	TS |- ~sqlo : TT
	
	axiom 
	~cin == conf(sql2, TS)
	~cout == conf(~sqlo, TS)
	reduce(~cin) = some(~cout)
	TS |- ~sqli : TT
	================================ SQL-Preservation-T-Union-IH2
	TS |- ~sqlo : TT
		
	goal 
	~sqli == Union(sql1, sql2)
	~cin == conf(~sqli, TS)
	~cout == conf(~sqlo, TS)
	reduce(~cin) = some(~cout)
	TS |- ~sqli : TT
	================================ SQL-Preservation-T-Union
	TS |- ~sqlo : TT
}

local {
	consts sql1 : SQLExp
		sql2 : SQLExp
		TS : TStore
		TT : TType
	
	axiom 
	~cin == conf(sql1, TS)
	~cout == conf(~sqlo, TS)
	reduce(~cin) = some(~cout)
	TS |- ~sqli : TT
	================================ SQL-Preservation-T-Intersection-IH1
	TS |- ~sqlo : TT
	
	axiom 
	~cin == conf(sql2, TS)
	~cout == conf(~sqlo, TS)
	reduce(~cin) = some(~cout)
	TS |- ~sqli : TT
	================================ SQL-Preservation-T-Intersection-IH2
	TS |- ~sqlo : TT
		
	goal 
	~sqli == Intersection(sql1, sql2)
	~cin == conf(~sqli, TS)
	~cout == conf(~sqlo, TS)
	reduce(~cin) = some(~cout)
	TS |- ~sqli : TT
	================================ SQL-Preservation-T-Intersection
	TS |- ~sqlo : TT
}


local {
	consts sql1 : SQLExp
		sql2 : SQLExp
		TS : TStore
		TT : TType
	
	axiom 
	~cin == conf(sql1, TS)
	~cout == conf(~sqlo, TS)
	reduce(~cin) = some(~cout)
	TS |- ~sqli : TT
	================================ SQL-Preservation-T-Difference-IH1
	TS |- ~sqlo : TT
	
	axiom 
	~cin == conf(sql2, TS)
	~cout == conf(~sqlo, TS)
	reduce(~cin) = some(~cout)
	TS |- ~sqli : TT
	================================ SQL-Preservation-T-Difference-IH2
	TS |- ~sqlo : TT
		
	goal 
	~sqli == Difference(sql1, sql2)
	~cin == conf(~sqli, TS)
	~cout == conf(~sqlo, TS)
	reduce(~cin) = some(~cout)
	TS |- ~sqli : TT
	================================ SQL-Preservation-T-Difference
	TS |- ~sqlo : TT
}

//final preservation theorem
//for now: restricted to the case where table store does not change!
axiom
~cin == conf(~sqli, ~TS)
~cout == conf(~sqlo, ~TS)
reduce(~cin) = some(~cout)
~TS |- ~sqli : ~TT
================================ SQL-Preservation
~TS |- ~sqlo : ~TT