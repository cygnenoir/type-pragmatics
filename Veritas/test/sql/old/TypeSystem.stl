module sql.TypeSystem

import sql.Tables
import sql.TStore
import sql.Syntax
import sql.TContext

sorts
	OptFType
	
constructors
	noFType : OptFType
	someFType : FType -> OptFType
	
function
isSomeFType : OptFType -> Bool
isSomeFType(noFType) = false
isSomeFType(someFType(a)) = true

partial function
getFType : OptFType -> FType
getFType(someFType(a)) = a
	
function
findColType : Name TType -> OptFType
findColType(an, ttempty) = noFType
findColType(an, ttcons(ctype(a, ft), ttr)) =
	if (an == a)
	then someFType(ft)
	else findColType(an, ttr)

function
selectTypeAttrL : AttrL TType -> OptTType
selectTypeAttrL(aempty, tt) = someTType(ttempty)
selectTypeAttrL(acons(a, alr), tt) =
	let ft = findColType(a, tt) in
		let tprest = selectTypeAttrL(alr, tt) in
			if (isSomeFType(ft) && isSomeTType(tprest))
			then someTType(ttcons(ctype(a, getFType(ft)), getSomeTType(tprest)))
			else noTType
			
// function
// ctypeIn : Name FType TType -> Bool
// ctypeIn(a, ft, ttempty) = false
// ctypeIn(a, ft, ttcons(ctype(a2, ft2), ttr)) = ((a == a2) && (ft == ft2)) || ctypeIn(a, ft, ttr) 

// function
// tcheckPred : Pred TType -> Bool
// tcheckPred(VEquals(a, fv), tt) = ctypeIn(a, fieldType(fv), tt)
// tcheckPred(VGreater(a, fv), tt) = ctypeIn(a, fieldType(fv), tt)
// tcheckPred(VSmaller(a, fv), tt) = ctypeIn(a, fieldType(fv), tt)

//axioms on behavior of table type context
axioms
~x == ~y
bindContext(~x, ~Tx, bindContext(~y, ~Ty, ~C)) |- ~e : ~T
================================================ T-TTContext-Duplicate
bindContext(~x, ~Tx, ~C) |- ~e : ~T

~x != ~y
bindContext(~x, ~Tx, bindContext(~y, ~Ty, ~C)) |- ~e : ~T
================================================ T-TTContext-Swap
bindContext(~y, ~Ty, bindContext(~x, ~Tx, ~C)) |- ~e : ~T

 
axioms
//a table value with a well-typed table is typable
welltypedtable(~TT, table(~al, ~rt))
====================================== T-tvalue
~TTC |- tvalue(table(~al, ~rt)) : ~TT

lookupContext(~tn, ~TTC) == someTType(~TT)
=============================================== T-SelectAllFrom
~TTC |- SelectAllFrom(Ref(~tn)) : ~TT

lookupContext(~tn, ~TTC) == someTType(~TT1)
selectTypeAttrL(~al, ~TT1) == someTType(~TT)
================================================ T-SelectSomeFrom
~TTC |- SelectSomeFrom(~al, Ref(~tn)) : ~TT

// lookupContext(~tn, ~TTC) == someTType(~TT)
// tcheckPred(~p, ~TT)
// ================================================ T-SelectAllFromWhere
// ~TTC |- SelectAllFromWhere(Ref(~tn), ~p) : ~TT
// 
// lookupContext(~tn, ~TTC) == someTType(~TT1)
// tcheckPred(~p, ~TT1)
// selectTypeAttrL(~al, ~TT1) == someTType(~TT)
// ================================================ T-SelectSomeFromWhere
// ~TTC |- SelectSomeFromWhere(~al, Ref(~tn), ~p) : ~TT
// 
// ~TTC |- ~q1 : ~TT
// ~TTC |- ~q2 : ~TT
// ============================================ T-Union
// ~TTC |- Union(~q1, ~q2) : ~TT
// 
// ~TTC |- ~q1 : ~TT
// ~TTC |- ~q2 : ~TT
// ============================================ T-Intersection
// ~TTC |- Intersection(~q1, ~q2) : ~TT
// 
// ~TTC |- ~q1 : ~TT
// ~TTC |- ~q2 : ~TT
// ============================================ T-Difference
// ~TTC |- Difference(~q1, ~q2) : ~TT

