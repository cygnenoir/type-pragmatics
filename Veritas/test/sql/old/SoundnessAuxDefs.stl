module sql.SoundnessAuxDefs

import sql.Tables
import sql.TStore
import sql.Syntax
import sql.TContext
import sql.TypeSystem

// determines whether a given TTContext is consistent with a given TStore
// and whether the table in the store is well-typed with regard to the table type in the context
// design decision: require bindings to appear in exactly the SAME ORDER! (simpler?)
function
StoreContextConsistent : TStore TTContext -> Bool
StoreContextConsistent(emptyStore, emptyContext) = true
StoreContextConsistent(bindStore(tn1, t, tsr), bindContext(tn2, tt, ttcr)) = 
	((tn1 == tn2) && welltypedtable(tt, t))
	&& StoreContextConsistent(tsr, ttcr)
StoreContextConsistent(ts, ttc) = false 

// proof of StoreContext-Lookup-WT
strategy induction-StoreContext-Lookup-WT {
	// by structural induction on ~TS and ~TTC
	
	goal
	~TS = emptyStore
	~TTC = emptyContext
	StoreContextConsistent(~TS, ~TTC)
	lookupStore(~tn, ~TS) = someTable(~t)
	lookupContext(~tn, ~TTC) == someTType(~tt)
	================================= StoreContext-Lookup-WT-1
	welltypedtable(~tt, ~t)

	local {
		consts
			ctn : TName
			ctt : TType
			cttc : TTContext
		
		goal
		~TS = emptyStore
		~TTC = bindContext(ctn, ctt, cttc)
		StoreContextConsistent(~TS, ~TTC)
		lookupStore(~tn, ~TS) = someTable(~t)
		lookupContext(~tn, ~TTC) == someTType(~tt)
		================================= StoreContext-Lookup-WT-2
		welltypedtable(~tt, ~t)
	}

	local {
		consts
			ctn : TName
			ct : Table
			cts : TStore
		
		goal
		~TS = bindContext(ctn, ct, cts)
		~TTC = emptyContext
		StoreContextConsistent(~TS, ~TTC)
		lookupStore(~tn, ~TS) = someTable(~t)
		lookupContext(~tn, ~TTC) == someTType(~tt)
		================================= StoreContext-Lookup-WT-3
		welltypedtable(~tt, ~t)
	}
	
	local {
		consts
			ctn1 : TName
			ct : Table
			cts : TStore
			ctn2 : TName
			ctt : TType
			cttc : TTContext
		
		axiom
		~TS = cts
		~TTC = cttc
		StoreContextConsistent(~TS, ~TTC)
		lookupStore(~tn, ~TS) = someTable(~t)
		lookupContext(~tn, ~TTC) == someTType(~tt)
		================================= StoreContext-Lookup-WT-4-IH
		welltypedtable(~tt, ~t)
		
		goal
		~TS = bindStore(ctn1, ct, cts)
		~TTC = bindContext(ctn2, ctt, cttc)
		StoreContextConsistent(~TS, ~TTC)
		lookupStore(~tn, ~TS) = someTable(~t)
		lookupContext(~tn, ~TTC) == someTType(~tt)
		================================= StoreContext-Lookup-WT-4
		welltypedtable(~tt, ~t)
	}
	
	hide-all
	axiom
	StoreContextConsistent(~TS, ~TTC)
	lookupStore(~tn, ~TS) = someTable(~t)
	lookupContext(~tn, ~TTC) == someTType(~tt)
	================================= StoreContext-Lookup-WT-ind
	welltypedtable(~tt, ~t)
	
} // qed StoreContext-Lookup-WT

lemma verify-with induction-StoreContext-Lookup-WT
StoreContextConsistent(~TS, ~TTC)
lookupStore(~tn, ~TS) = someTable(~t)
lookupContext(~tn, ~TTC) == someTType(~tt)
================================= StoreContext-Lookup-WT
welltypedtable(~tt, ~t)
