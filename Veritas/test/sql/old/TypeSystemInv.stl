module sql.TypeSystemInv

import sql.Syntax
import sql.TypeSystem
import sql.Tables
import sql.TContext

axiom
~TTC |- ~q : ~TT
==================================================== T-inv
OR
=> exists ~al, ~rt
		~q = Tvalue(table(~al, ~rt))
		welltypedtable(~TT, table(~al, ~rt))
=> exists ~tn
		~q == SelectAllFrom(Ref(~tn))
		lookupContext(~tn, ~TTC) == someTType(~TT)
=> exists ~tn, ~TT1, ~al
		~q == SelectSomeFrom(~al, Ref(~tn))
		lookupContext(~tn, ~TTC) == someTType(~TT1)
		projectType(~al, ~TT1) == someTType(~TT)	
// => exists ~tn, ~p
// 		~q == SelectAllFromWhere(Ref(~tn), ~p)
// 		lookupContext(~tn, ~TTC) == someTType(~TT)
// 		checkPValidity(~p, ~TT)	
// => exists ~al, ~tn, ~p, ~TT1
// 		~q == SelectSomeFromWhere(~al, Ref(~tn), ~p)
// 		lookupContext(~tn, ~TTC) == someTType(~TT1)
// 		checkPValidity(~p, ~TT1)
// 		projectType(~al, ~TT1) == someTType(~TT)
// => exists ~q1, ~q2
// 		~q == Union(~q1, ~q2)
// 		~TTC |- ~q1 : ~TT
// 		~TTC |- ~q2 : ~TT
// => exists ~q1, ~q2
// 		~q == Intersection(~q1, ~q2)
// 		~TTC |- ~q1 : ~TT
// 		~TTC |- ~q2 : ~TT
// => exists ~q1, ~q2
// 		~q == Difference(~q1, ~q2)
// 		~TTC |- ~q1 : ~TT
// 		~TTC |- ~q2 : ~TT
		
//variant of inversion lemma in several different lemmas 
//(seems to be helpful for progress proof)
lemma
~q == Tvalue(table(~al, ~rt))
~TTC |- ~q : ~TT
==================================================== T-inv-Tvalue
welltypedtable(~TT, table(~al, ~rt))


lemma
~q == SelectAllFrom(Ref(~tn))	
~TTC |- ~q : ~TT
==================================================== T-inv-Selectallfrom		
lookupContext(~tn, ~TTC) == someTType(~TT)


lemma
~q == SelectSomeFrom(~al, Ref(~tn))
~TTC |- ~q : ~TT
==================================================== T-inv-Selectsomefrom
exists ~TT1
	lookupContext(~tn, ~TTC) == someTType(~TT1)
	projectType(~al, ~TT1) == someTType(~TT)
	
		
// ~q == SelectAllFromWhere(Ref(~tn), ~p)
// ~TTC |- ~q : ~TT
// ==================================================== T-inv-SelectAllFromWhere
// lookupContext(~tn, ~TTC) == someTType(~TT)
// checkPValidity(~p, ~TT)	
// 		
// ~q == SelectSomeFromWhere(~al, Ref(~tn), ~p)
// ~TTC |- ~q : ~TT
// ==================================================== T-inv-SelectSomeFromWhere
// exists ~TT1
// 	lookupContext(~tn, ~TTC) == someTType(~TT1)
// 	checkPValidity(~p, ~TT1)
// 	projectType(~al, ~TT1) == someTType(~TT)
// 		

// goal
// ~q == Union(~q1, ~q2)
// ~TTC |- ~q : ~TT
// ==================================================== T-inv-Union		
// ~TTC |- ~q1 : ~TT
// ~TTC |- ~q2 : ~TT
// 

// 
// ~q == Intersection(~q1, ~q2)
// ~TTC |- ~q : ~TT
// ==================================================== T-inv-Intersection
// ~TTC |- ~q1 : ~TT
// ~TTC |- ~q2 : ~TT
// 
// ~q == Difference(~q1, ~q2)
// ~TTC |- ~q : ~TT
// ==================================================== T-inv-Difference
// ~TTC |- ~q1 : ~TT
// ~TTC |- ~q2 : ~TT