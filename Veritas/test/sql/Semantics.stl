module sql.Semantics

import sql.Syntax
import sql.TStore
import sql.Tables

sorts
	SQLConf

constructors
	conf : SQLExp TStore -> SQLConf
	
function
getSQL : SQLConf -> SQLExp
getSQL(conf(sql, ts)) = sql
	
sorts
	OptConf

constructors
	noConf : OptConf
	someConf : SQLConf -> OptConf

function
isSomeConf : OptConf -> Bool
isSomeConf(noConf) = false
isSomeConf(someConf(c)) = true

partial function
getSomeConf : OptConf -> SQLConf
getSomeConf(someConf(c)) = c

//redundant, but clearer to read 
sorts
	OptTable

constructors
	noTable : OptTable
	someTable : Table -> OptTable

function
isSomeTable : OptTable -> Bool
isSomeTable(noTable) = false
isSomeTable(someTable(c)) = true

partial function
getSomeTable : OptTable -> Table
getSomeTable(someTable(c)) = c

// all these functions assume that the given tables are well-typed
function
projection : TType Table -> OptTable

function
selection : Table SQLPred -> OptTable

//definition: union removes duplicate rows
//(but only between the two tables, not within a table!)
//union only possible if schemas of tables are exactly equal (including column order!)
function
union : Table Table -> OptTable
union(table(tt1, rt1), table(tt2, rt2)) =
	if (tt1 == tt2)
	then someTable(table(tt1, rawUnion(rt1, rt2)))
	else noTable

function
intersection : Table Table -> OptTable
intersection(table(tt1, rt1), table(tt2, rt2)) =
	if (tt1 == tt2)
	then someTable(table(tt1, rawIntersection(rt1, rt2)))
	else noTable

function
difference : Table Table -> OptTable
union(table(tt1, rt1), table(tt2, rt2)) =
	if (tt1 == tt2)
	then someTable(table(tt1, rawDifference(rt1, rt2)))
	else noTable

function 
reduce : SQLConf -> OptConf
reduce(conf(TValue(t), ts)) = noConf 
reduce(conf(SelectAll(tn), ts)) = 
	let ltn = lookup(tn, ts) in
		if (isSomeType(ltn))
		then someConf(conf(TValue(tn),ts))
		else noConf
reduce(conf(SelectFrom1(tt, tn), ts)) =
	let ltn = lookup(tn, ts) in
		if (isSomeType(ltn))
		then someConf(conf(TValue(projection(tt, getSomeType(ltn))), ts))
		else noConf
reduce(conf(SelectAllFromWhere1(tn, p), ts)) =
	let ltn = lookup(tn, ts) in
		if (isSomeType(ltn))
		then someConf(conf(TValue(selection(getSomeType(ltn), p)), ts))
		else noConf
reduce(conf(SelectFromWhere1(tt, tn, p), ts)) =
	let ltn = lookup(tn, ts) in
		if (isSomeType(ltn))
		then someConf(conf(SelectFrom1(tt, tn, selection(getSomeType(ltn), p)), ts))
		else noConf
reduce(conf(Union(TValue(t1), TValue(t2)), ts)) =
	let tunion = union(t1, t2) in
		if (isSomeTable(tunion))
		then someConf(conf(TValue(getSomeTable(tunion), ts)))
		else noConf
reduce(conf(Union(TValue(t), sql2), ts)) =
	let sql2reduce = reduce(conf(sql2, ts)) in
		if (isSomeConf(sql2reduce))
		then someConf(conf(Union(TValue(t), getSQL(getSomeConf(sql2reduce))), ts))
		else noConf
reduce(conf(Union(sql1, sql2), ts)) =
	let sql1reduce = reduce(conf(sql1, ts)) in
		if (isSomeConf(sql1reduce))
		then someConf(conf(Union(getSQL(getSomeConf(sql1reduce)), sql2), ts))
		else noConf
reduce(conf(Intersection(TValue(t1), TValue(t2)), ts)) =
	let tintersection = intersection(t1, t2) in
		if (isSomeTable(tintersection))
		then someConf(conf(TValue(getSomeTable(tintersection), ts)))
		else noConf
reduce(conf(Intersection(TValue(t), sql2), ts)) =
	let sql2reduce = reduce(conf(sql2, ts)) in
		if (isSomeConf(sql2reduce))
		then someConf(conf(Intersection(TValue(t), getSQL(getSomeConf(sql2reduce))), ts))
		else noConf
reduce(conf(Intersection(sql1, sql2), ts)) =
	let sql1reduce = reduce(conf(sql1, ts)) in
		if (isSomeConf(sql1reduce))
		then someConf(conf(Intersection(getSQL(getSomeConf(sql1reduce)), sql2), ts))
		else noConf
reduce(conf(Difference(TValue(t1), TValue(t2)), ts)) =
	let tdifference = difference(t1, t2) in
		if (isSomeTable(tdifference))
		then someConf(conf(TValue(getSomeTable(tdifference), ts)))
		else noConf
reduce(conf(Difference(TValue(t), sql2), ts)) =
	let sql2reduce = reduce(conf(sql2, ts)) in
		if (isSomeConf(sql2reduce))
		then someConf(conf(Difference(TValue(t), getSQL(getSomeConf(sql2reduce))), ts))
		else noConf
reduce(conf(Difference(sql1, sql2), ts)) =
	let sql1reduce = reduce(conf(sql1, ts)) in
		if (isSomeConf(sql1reduce))
		then someConf(conf(Difference(getSQL(getSomeConf(sql1reduce)), sql2), ts))
		else noConf
	