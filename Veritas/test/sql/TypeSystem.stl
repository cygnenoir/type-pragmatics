module sql.TypeSystem

import sql.Tables
import sql.TStore
import sql.Syntax
import sql.TContext

data OptFType =
	noFType |
	someFType(FType)
	
function
isSomeFType : OptFType -> Bool
isSomeFType(noFType) = false
isSomeFType(someFType(a)) = true

partial function
getFType : OptFType -> FType
getFType(someFType(a)) = a
	
function
findColType : Name TType -> OptFType
findColType(an, ttempty) = noFType
findColType(an, ttcons(a, ft, ttr)) =
	if (an == a)
	then someFType(ft)
	else findColType(an, ttr)

function
selectType : Select TType -> OptTType
selectType(all(), tt) = someTType(tt)
selectType(some(al), tt) = selectTypeAttrL(al, tt)

function
selectTypeAttrL : AttrL TType -> OptTType
selectTypeAttrL(aempty, tt) = someTType(ttempty)
selectTypeAttrL(acons(a, alr), tt) =
	let ft = findColType(a, tt) in
		let tprest = selectTypeAttrL(alr, tt) in
			if (isSomeFType(ft) && isSomeTType(tprest))
			then someTType(ttcons(a, getFType(ft), getSomeTType(tprest)))
			else noTType

function
typeOfExp : Exp TType -> OptFType
typeOfExp(constant(fv), tt) = someFType(fieldType(fv))
typeOfExp(lookup(a), ttempty) = noFType
typeOfExp(lookup(a), ttcons(a2, ft, tt)) = 
	if a == a2
	then someFType(ft)
	else typeOfExp(lookup(a), tt)

function
tcheckPred : Pred TType -> Bool
tcheckPred(ptrue, tt) = true
tcheckPred(and(p1, p2), tt) = tcheckPred(p1, tt) && tcheckPred(p2, tt)
tcheckPred(not(p), tt) = tcheckPred(p, tt)
tcheckPred(eq(e1, e2), tt) =
	let t1 = typeOfExp(e1, tt) in
	let t2 = typeOfExp(e2, tt) in
	(isSomeFType(t1) && isSomeFType(t2) && (getFType(t1) == getFType(t2)))
tcheckPred(gt(e1, e2), tt) =
	let t1 = typeOfExp(e1, tt) in
	let t2 = typeOfExp(e2, tt) in
	(isSomeFType(t1) && isSomeFType(t2) && (getFType(t1) == getFType(t2)))
tcheckPred(lt(e1, e2), tt) =
	let t1 = typeOfExp(e1, tt) in
	let t2 = typeOfExp(e2, tt) in
	(isSomeFType(t1) && isSomeFType(t2) && (getFType(t1) == getFType(t2)))

//axioms on behavior of table type context
axioms
~x == ~y
bindContext(~x, ~Tx, bindContext(~y, ~Ty, ~C)) |- ~e : ~T
================================================ T-TTContext-Duplicate
bindContext(~x, ~Tx, ~C) |- ~e : ~T

~x != ~y
bindContext(~x, ~Tx, bindContext(~y, ~Ty, ~C)) |- ~e : ~T
================================================ T-TTContext-Swap
bindContext(~y, ~Ty, bindContext(~x, ~Tx, ~C)) |- ~e : ~T

 
axioms
//a table value with a well-typed table is typable
welltypedtable(~TT, table(~al, ~rt))
====================================== T-tvalue
~TTC |- tvalue(table(~al, ~rt)) : ~TT

lookupContext(~tn, ~TTC) == someTType(~TT)
tcheckPred(~p, ~TT)
selectType(~sel, ~TT) == someTType(~TTr)
=============================================== T-SelectFromWhere
~TTC |- selectFromWhere(~sel, ~tn, ~p) : ~TTr

~TTC |- ~q1 : ~TT
~TTC |- ~q2 : ~TT
============================================ T-Union
~TTC |- Union(~q1, ~q2) : ~TT

~TTC |- ~q1 : ~TT
~TTC |- ~q2 : ~TT
============================================ T-Intersection
~TTC |- Intersection(~q1, ~q2) : ~TT

~TTC |- ~q1 : ~TT
~TTC |- ~q2 : ~TT
============================================ T-Difference
~TTC |- Difference(~q1, ~q2) : ~TT

