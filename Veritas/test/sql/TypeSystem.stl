module sql.TypeSystem

import sql.BasicFunctions
import sql.Tables
import sql.TStore
import sql.Syntax

sorts
	TTContext
	
constructors
	cempty : TTContext
	cbind : TName TType TTContext -> TTContext
	
function
clookup : TName TTContext -> Opt
clookup(tn, cempty) = none
clookup(tn, cbind(tm, tt, TTC)) =
	if (tn == tm)
	then some(tt)
	else clookup(tn, TTC) 
	
axioms
~x == ~y
cbind(~x, ~Tx, cbind(~y, ~Ty, ~C)) |- ~e : ~T
================================================ T-TTContext-Duplicate
cbind(~x, ~Tx, ~C) |- ~e : ~T

~x != ~y
cbind(~x, ~Tx, cbind(~y, ~Ty, ~C)) |- ~e : ~T
================================================ T-TTContext-Swap
cbind(~y, ~Ty, cbind(~x, ~Tx, ~C)) |- ~e : ~T

function
dropFirstColType : TType -> TType
dropFirstColType(ttempty) = ttempty
dropFirstColtType(ttcons(ct, tt)) = tt
	
function
findColType : AName TType -> Opt // Opt[FType]
findColType(an, ttempty) = none
findColType(an, ttcons(ctype(a, ft), ttr)) =
	if (an == a)
	then some(ft)
	else findColType(an, ttr)

function
projectType : AList TType -> Opt // Opt[TType]
projectType(aempty, tt) = some(ttempty)
projectType(acons(a, alr), tt) =
	let ft = findColType(a, tt) in
		let tprest = projectType(alr, tt) in
			if (isSome(ft) && isSome(tprest))
			then some(ttcons(ctype(a, getSome(ft)), getSome(tprest)))
			else none

 
axioms
//a table value with a well-typed table is typable
welltypedtable(~TT, table(~al, ~rt))
====================================== T-Tvalue
~TTC |- Tvalue(table(~al, ~rt)) : ~TT

clookup(~tn, ~TTC) == some(~TT)
=============================================== T-Selectallfrom
~TTC |- Selectallfrom(Ref(~tn)) : ~TT

clookup(~tn, ~TTC) == some(~TT1)
projectType(~al, ~TT1) == some(~TT)
================================================ T-Selectsomefrom
~TTC |- Selectsomefrom(~al, Ref(~tn)) : ~TT

// lookup(~tn, ~TS) == some(table(~TT, ~rt))
// welltypedtable(table(~TT, ~rt))
// checkPValidity(~p, ~TT)
// ================================================ T-SelectAllFromWhere1
// ~TS |- SelectAllFromWhere1(~tn, ~p) : ~TT
// 
// lookup(~tn, ~TS) == some(table(~TT1, ~rt))
// welltypedtable(table(~TT1, ~rt))
// checkPValidity(~p, ~TT1)
// typePartOf(~TT, ~TT1)
// ================================================ T-SelectFromWhere1
// ~TS |- SelectFromWhere1(~TT, ~tn, ~p) : ~TT
// 
// ~TTC |- ~q1 : ~TT
// ~TTC |- ~q2 : ~TT
// ============================================ T-Union
// ~TTC |- Union(~q1, ~q2) : ~TT
// 
// ~TS |- ~sql1 : ~TT
// ~TS |- ~sql2 : ~TT
// ============================================ T-Intersection
// ~TS |- Intersection(~sql1, ~sql2) : ~TT
// 
// ~TS |- ~sql1 : ~TT
// ~TS |- ~sql2 : ~TT
// ============================================ T-Difference
// ~TS |- Difference(~sql1, ~sql2) : ~TT



