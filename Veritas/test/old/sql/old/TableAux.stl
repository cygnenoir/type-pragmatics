module old.sql.TableAux

import old.sql.Tables

//some auxiliary functions on raw tables (all not knowing anything about table types!)
//the functions are intended to be used with well-typed tables!!

function 
rowIn : Row RawTable -> Bool
rowIn(r1, tempty) = false
rowIn(r1, tcons(r2, rt)) = (r1 == r2) || rowIn(r1, rt)

//projects a raw table to its first column
//returns a raw table with exactly one column or tempty	
function
projectFirstRaw : RawTable -> RawTable
projectFirstRaw(tempty) = tempty
projectFirstRaw(tcons(rempty, rt)) = tcons(rempty, projectFirstRaw(rt))
projectFirstRaw(tcons(rcons(f, r), rt)) = tcons(rcons(f, rempty), projectFirstRaw(rt))


//drops the first column of a raw table
//returns a raw table with one column less than before or tempty
function
dropFirstColRaw : RawTable -> RawTable
dropFirstColRaw(tempty) = tempty
dropFirstColRaw(tcons(rempty, rt)) = tcons(rempty, dropFirstColRaw(rt))
dropFirstColRaw(tcons(rcons(f, r), rt)) = tcons(r, dropFirstColRaw(rt)) 

sorts OptRawTable

constructors
	noRawTable : OptRawTable
	someRawTable : RawTable -> OptRawTable

function
isSomeRawTable : OptRawTable -> Bool
isSomeRawTable(noRawTable) = false
isSomeRawTable(someRawTable(t)) = true

partial function
getRawTable : OptRawTable -> RawTable
getRawTable(someRawTable(t)) = t

//attaches a raw table with one column to the front of another raw table
//returns a raw table with one column more
//assumes that both tables have the same row count!
//include empty brackets after tempty such that the parser does not report an error
//is treated exactly like tempty for fof-generation
function
attachColToFrontRaw : RawTable RawTable -> OptRawTable // Opt[RawTable]
attachColToFrontRaw(tempty(), tempty()) = someRawTable(tempty)
attachColToFrontRaw(tcons(rcons(f, rempty), rt1), tcons(r, rt2)) =
	let rest = attachColToFrontRaw(rt1, rt2) in
		if (isSomeRawTable(rest)) 
		then someRawTable(tcons(rcons(f, r), getRawTable(rest)))
		else noRawTable
attachColToFrontRaw(rt1, rt2) = noRawTable

//definition: union removes duplicate rows
//(but only between the two tables, not within a table!)
//preserves row order of the two original raw tables
function
rawUnion : RawTable RawTable -> RawTable
rawUnion(tempty, rt2) = rt2
rawUnion(rt1, tempty) = rt1
rawUnion(tcons(r1, rt1), rt2) =
	let urt1rt2 = rawUnion(rt1, rt2) in
		if (!rowIn(r1, rt2))
		then tcons(r1, urt1rt2)
		else urt1rt2
		
//preserves order of rows in first argument
function
rawIntersection : RawTable RawTable -> RawTable
rawIntersection(tempty, rt2) = tempty
rawIntersection(rt1, tempty) = tempty
rawIntersection(tcons(r1, tempty), rt2) = 
	if (rowIn(r1, rt2))
	then tcons(r1, tempty)
	else tempty
rawIntersection(tcons(r1, rt1), rt2) =
	let urt1rt2 = rawIntersection(rt1, rt2) in
		if (rowIn(r1, rt2))
		then tcons(r1, urt1rt2)
		else urt1rt2
		
function
rawDifference : RawTable RawTable -> RawTable
rawDifference(tempty, rt2) = tempty
rawDifference(rt1, tempty) = rt1
rawDifference(tcons(r1, tempty), rt2) =
	if (!rowIn(r1, rt2))
	then tcons(r1, tempty)
	else tempty
rawDifference(tcons(r1, rt1), rt2) =
	let drt1rt2 = rawDifference(rt1, rt2) in
		if (!rowIn(r1, rt2))
		then tcons(r1, drt1rt2)
		else drt1rt2
		
