module old.stlc.callbyvalue.Preservation

import old.stlc.Syntax
import old.stlc.Subst {names}
import old.stlc.SubstLemma
import old.stlc.callbyvalue.Reduction
import old.stlc.Types


// Prove type preservation by induction on recursive structure of reduction relation
// Each derived rule represents one induction case.

goal
reduce(var(~x)) = someExp(~eout)
~C |- var(~x) : ~T
=================== T-Preservation-T-var
~C |- ~eout : ~T

//Verification succeeded, used lemmas: reduce0, DIFF-noExp-someExp.

local {
	consts
		e1 : Exp
	
	axiom 
	reduce(e1) = someExp(~eout)
	~C |- e1 : ~T
	================================ T-Preservation-T-abs-IH
	~C |- ~eout : ~T

	goal
	reduce(abs(~x, ~S, e1)) = someExp(~eout)
	~C |- abs(~x, ~S, e1) : ~T
	========================================== T-Preservation-T-abs
	~C |- ~eout : ~T
	
	//Verification succeeded, used lemmas: reduce1, DIFF-noExp-someExp.
}

local {
	consts
		e1 : Exp
		e2 : Exp
	
	axiom
	reduce(e1) = someExp(~eout)
	~C |- e1 : ~T
	================================ T-Preservation-T-app-IH1
	~C |- ~eout : ~T

	axiom // NEEDED (as expected!)
	reduce(e2) = someExp(~eout)
	~C |- e2 : ~T
	================================ T-Preservation-T-app-IH2
	~C |- ~eout : ~T

	goal
	reduce(app(e1, e2)) = someExp(~eout)
	~C |- app(e1, e2) : ~T
	================================ T-Preservation-T-app
	~C |- ~eout : ~T
	
	// Verification succeeded, used lemmas: T-subst, reduce3, reduce4, T-Preservation-T-app-IH2, reduce2, 
    // isSomeExp1, EQ-arrow, reduce-INV, EQ-abs, isValue2, isValue0, DIFF-var-abs, T-Preservation-T-app-IH1, T-
    // app, reduce1, reduce5, reduce6, DIFF-noExp-someExp, reduce-CODOM, isSomeExp0, getSomeExp0, EQ-app, 
    // T-inv, DIFF-var-app, DIFF-abs-app. -> 25
}

axiom
reduce(~ein) = someExp(~eout)
~C |- ~ein : ~T
=================== T-Preservation
~C |- ~eout : ~T