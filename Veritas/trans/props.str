module props

imports include/Veritas

signature
	sorts Prop FOF File
	constructors
		// Constructors that are commented are currently not used.
		False : Prop
    	True  : Prop
    	// Atom  : String -> Prop
    	Not   : Prop -> Prop
    	And   : Prop * Prop -> Prop
    	Or    : Prop * Prop -> Prop
    	Impl  : List(Prop) * Prop -> Prop
    	BiImpl  : Prop * Prop -> Prop
    	Eq    : Prop * Prop -> Prop
    	Neq : Prop * Prop -> Prop
    	Var   : String -> Prop
    	Pred  : String * List(Prop) -> Prop //TODO: Make this more typesafe
    	TermApp  : String * List(Prop) -> Prop //TODO: Make this more typesafe 
    	All   : List(Var) * Prop -> Prop
    	Exists : List(Var) * Prop -> Prop
    	
    	Axiom : Type
    	Conjecture : Type
    	Formula : String * Type * Prop -> FOF
    	Formula : String * Prop -> FOF
    	
    	FOFGoal : List(Formula) * Formula -> File
    	RelBool : Sort

rules

	free-prop-vars : v@Meta(_) -> [<strip-annos> v]
	free-prop-vars : Exists(vars, p) -> <diff> (<free-prop-vars> p, <strip-annos> vars)
	free-prop-vars : All(vars, p) -> <diff> (<free-prop-vars> p, <strip-annos> vars)
	free-prop-vars : ExistsJudgment(vars, p) -> <diff> (<free-prop-vars> p, <strip-annos> vars)
	free-prop-vars : ForallJudgment(vars, p) -> <diff> (<free-prop-vars> p, <strip-annos> vars)
	free-prop-vars : c#(xs) -> <map(free-prop-vars); unions> xs
	
	close-prop = close-prop(|[])
	close-prop(|leaveFree) = close-prop(make-all|leaveFree)
	close-prop-existential = close-prop(make-exists|[])
	close-prop-existential(|leaveFree) = close-prop(make-exists|leaveFree)
	close-prop(closer|leaveFree) : prop -> <closer> (bind-vars, prop)
	where
		freevars := <free-prop-vars> prop;
		bind-vars := <diff> (freevars, leaveFree)

	make-and : (True(), p2) -> p2
	make-and : (False(), p2) -> False()
	make-and : (p1, True()) -> p1
	make-and : (p1, False()) -> False()
	make-and : (p, p) -> p
	make-and : (And(p11, p12), p2) -> And(p11, <make-and> (p12, p2))
	make-and : (p1, p2) -> And(p1, p2)
	
	make-or : (True(), p2) -> True()
	make-or : (False(), p2) -> p2
	make-or : (p1, True()) -> True()
	make-or : (p1, False()) -> p1
	make-or : (p, p) -> p
	make-or : (Or(p11, p12), p2) -> Or(p11, <make-or> (p12, p2))
	make-or : (p1, p2) -> Or(p1, p2)
	
	make-impl : (True(), p2) -> p2
	make-impl : (False(), p2) -> True()
	make-impl : (p1, True()) -> True()
	make-impl : (p1, False()) -> <make-not> (p1)
	make-impl : (p, p) -> True()
	make-impl : (Impl(p11, p12), p2) -> Impl(<make-or> (<make-not> (p11), p12), p2)
	make-impl : (p1, p2) -> Impl(p1, p2)
	
	make-biimpl : (p1, p2) -> <make-and> (<make-impl> (p1, p2), <make-impl> (p2, p1))
	
	make-not : True() -> False()
	make-not : False() -> True()
	make-not : Not(p) -> p
	make-not : p -> Not(p)
		
	make-exists : ([], body) -> body
	make-exists : (vars, body) -> Exists(vars, body)
	make-all : ([], body) -> body
	make-all : (vars, body) -> All(vars, body)
	make-termapp : (v, []) -> <make-var> v
	make-termapp : (v, args) -> TermApp(<make-var;?Var(<id>)> v, args)
	make-var = string-as-chars(!['v'|<id>]); !Var(<id>)
	make-meta = string-as-chars(!['V'|<id>]); !Meta(<id>)
	make-eq : (t1{RelBool()}, t2) -> <make-impl> (t2,t1{RelBool()})
	make-eq : (t1{SortRef("Bool")}, t2) -> <make-biimpl> (t2,t1{SortRef("Bool")})
	make-eq : (t1, t2) -> Eq(t1, t2)
	
	make-fresh : v -> w
	where
		i := <Fresh> v;
		rules ( Fresh :+ v -> <inc> i);
		w := <conc-strings> (v, <int-to-string> i)
	make-fresh : v -> w
	where
		rules ( Fresh :+ v -> 0);
		w := <make-fresh> v
