module generate

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/Veritas
  fof-rewriting
  smt-rewriting
  lib/editor-common.generated
  lib/runtime/index/core
  lib/runtime/task/core
  lib/runtime/analysis/core


rules // Incremental code generation of project using compilation library.
      
  // See lib/compilation-library.generated.str for documentation

  generate-files(|base, rulenames) =
  	?files; 
  	names := <generate-file-names(|base)> rulenames; 
  	<zip> (names, files);
  	map(write-file);
  	!names

  
  generate-file-names(|base) : [] -> []
  generate-file-names(|base) : [rule | rest] -> [outfile | <generate-file-names(|base)> rest]
  where
    <get-extension> base => ext;
    <remove-extension> base => basename;
    <conc-strings> (basename, "-", rule) => filename;
    <add-extension> (filename, ext) => outfile
  
  
  write-file : (file, output) -> <id>
  where
    <fopen> (file, "w") => stream;
    <fputs> (output, stream);
    <fclose> stream
    
  //path for putting proofs within a project
  aux-file-path = !"/proofs/"
  
  gen-proofpath = 
  	?path;
  	dir := <dirname> path;
  	base := <base-filename> path;
  	proofpath := <concat-strings> [dir, <aux-file-path>];
  	//ensure that directory exists!
  	try(<mkdir> proofpath);
  	<concat-strings> [proofpath, base]
    
  generate-fof :
  	   (selected, position, ast, path, project-path) -> result
  with
	index-setup(|<language>, project-path);
	task-setup(|project-path);
	proofpath := <gen-proofpath> path; 
    filename := <guarantee-extension(|"fof")> proofpath;
	rulez := <collect-all(?Goals(_,<filter(?TypingRule(_,RuleName(_,<id>),_))>) 
		  <+ ?GoalsWithStrategy(_,_,<filter(?TypingRule(_,RuleName(_,<id>),_))>)
	      <+ ?Lemmas(_,<filter(?TypingRule(_,RuleName(_,<id>),_))>)
	      <+ ?LemmasWithStrategy(_,_,<filter(?TypingRule(_,RuleName(_,<id>),_))>)); concat> ast; 
    goals := <fof-trans <+ error(!"fof-trans failed: ")> ast;
    strings := <map(pp-formula <+ pp-debug(pp-formula))> goals;
    outfiles := <generate-files(|filename,rulez)> strings;
    result := <if <?[]> goals then !None() else !(<Hd> outfiles, <Hd> strings) end> ()
	
  gen-fof-for-folder : 
		(selected, position, ast, path, project-path) -> None()
	where
		dir := <dirname> path;
		filelist := <readdir> dir;
		filteredlist := <filter(\s -> <has-extension(|"stl")> s\)> filelist;
		paths := <map(\s -> <concat-strings> [dir, "/", s]\)> filteredlist;
		res := <analysis-top(parse-file, id, id, id|"Veritas", project-path)> paths;
		<?Result(frlist,_,_,_)> res;
		astlist := <map(?(_,_,_,_,<id>,_,_,_))> frlist;
		pastlist := <zip> (paths, astlist);
		<map(\(p, ast) -> <generate-fof> (selected, position, ast, p, project-path)\)> pastlist
	
  

  open-fof :
  	   (selected, position, ast, path, project-path) -> result
  with
  	rule := <find-at-position(?TypingRule(_,_,_)|position)> ast;
  	rulename := <?TypingRule(_,RuleName(_,<id>),_)> rule;
  	proofpath := <gen-proofpath> path; 
  	[filename] := <generate-file-names(|<guarantee-extension(|"fof")> proofpath)> [rulename];
  	text := <read-text-file <+ !""> filename;
	result := (filename, text)

  find-at-position(s|pos) :
  	term -> <s> term
  where <?[]> pos
        
  find-at-position(s|pos) :
  	term@c#(xs) -> <find-at-position(s|ps) <+ (<s> term)> x
  where <?[p|ps]> pos;
        <index(|<addi> (p, 1))> xs => x
  

  pp-formula =
    ast2abox(|[<parse-pptable-file> "trans/fof-rewriting.pp"]);
    box2text-string(|100)
  
  pp-debug(pp) = bottomup(is-string <+ is-list <+ pp <+ debug(!"pp failed: "))

  generate-smt :
  	   (selected, position, ast, path, project-path) -> (filename, result)
  with
   	index-setup(|<language>, project-path);
	task-setup(|project-path);
	proofpath := <gen-proofpath> path; 
	filename := <guarantee-extension(|"smt2")> proofpath;
    formula := <smt-trans> ast;
    result := <pp-smt> formula
    
  error(s) = debug(s);fail