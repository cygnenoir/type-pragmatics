module names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/relations/-
  lib/runtime/editor/-
  include/Veritas


signature
  constructors
    NablNsModule : Namespace
    NablNsSort   : Namespace
    NablNsSymbol : Namespace
    NablNsAxiom  : Namespace
    NablNsRule   : Namespace


signature
  constructors
    NablProp_module-ref : Property


rules

  nabl-custom-properties(add-properties) =
    ![NablProp_module-ref()] ; add-properties

  module-ref-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  module-ref-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  module-ref-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_module-ref())

  module-ref-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  module-ref-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  module-ref-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_module-ref(), ctx__, [])

  module-ref-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_module-ref(), ctx__, dep*)

  module-ref-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_module-ref()
    , ctx__
    , Eq()
    , expected
    )

  module-ref-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_module-ref(), ctx__, relation, expected)

  create-module-ref-task(|ctx__) =
    fail

  get-module-ref(|) =
    get-property(|NablProp_module-ref())

  store-module-ref(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_module-ref(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-module-ref-task(|ctx__)> term
    where NablProp_module-ref() := kind


rules

  nabl-get-scope =
    ?mod@Module(m, _, _)
    ; ![ NablNsSort()
       , NablNsSymbol()
       , NablNsAxiom()
       , NablNsRule()
       ]

  nabl-get-name :
    mod@Module(m, _, _) -> m

  nabl-name-apply(s) =
    id ; Module(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?mod@Module(m, _, _)
    ; (id
       ; origin-track-forced(
           Module(
             nabl-def(
               ?c-uri1__
             , ?s-uri1__
             | lang__
             , ctx__
             , uniques__
             , uri__
             , uri__
             , NablNsModule()
             , Unique()
             , Current()
             , [ NablNsSort()
               , NablNsSymbol()
               , NablNsAxiom()
               , NablNsRule()
               ]
             , []
             )
           , id
           , id
           )
         |
         ))
    ; where(i-2__ := <nabl-def(
                        ?c-uri2__
                      , ?s-uri2__
                      | lang__
                      , ctx__
                      , uniques__
                      , c-uri1__
                      , s-uri1__
                      , NablNsSort()
                      , Unique()
                      , Current()
                      , []
                      , []
                      )> "Bool")
    ; where(i-3__ := <nabl-def(
                        ?c-uri3__
                      , ?s-uri3__
                      | lang__
                      , ctx__
                      , uniques__
                      , c-uri2__
                      , s-uri2__
                      , NablNsSymbol()
                      , Unique()
                      , Current()
                      , []
                      , []
                      )> "tcheck")
    ; match(child-uris__|c-uri3__)
    ; match(sibl-uris__|s-uri3__)
    ; match(implicits__|[i-2__, i-3__])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?mod@Module(m, _, _)
    ; (where([i-2__, i-3__] := implicits__)
       ; where(id)
       ; id
       ; Module(
           nabl-store-props(
           | ctx__
           , [Prop(NablProp_module-ref(), mod, [])]
           )
         , id
         , id
         ))
    ; fail

  nabl-get-name :
    Import(m, _) -> m

  nabl-name-apply(s) =
    Import(s, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Import(m, _)
    ; origin-track-forced(
        Import(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsModule()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )

  nabl-import-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Import(m, _)
    ; origin-track-forced(
        nabl-import(
        | lang__
        , ctx__
        , uniques__
        , uris__
        , [ <{:
               id
               ; !Wildcard(
                    [ Import(lang__, NablNsSort())
                    , Import(lang__, NablNsSymbol())
                    , Import(lang__, NablNsAxiom())
                    ]
                  , Context(
                      NablNsModule()
                    , m
                    , []
                    , Current()
                    )
                  , Current()
                  , []
                  )
             }>
          ]
        )
      |
      )

  nabl-scoping-site =
    ?Local(_)
    ; nabl-scope(
      | [ NablNsSort()
        , NablNsSymbol()
        , NablNsAxiom()
        , NablNsRule()
        ]
      )

  nabl-get-scope =
    ?Local(_)
    ; ![ NablNsSort()
       , NablNsSymbol()
       , NablNsAxiom()
       , NablNsRule()
       ]

  nabl-scoping-site =
    ?Goals(_)
    ; nabl-scope(|[NablNsRule()])

  nabl-get-scope =
    ?Goals(_) ; ![NablNsRule()]

  nabl-get-name :
    RuleName(_, r) -> r

  nabl-name-apply(s) =
    RuleName(id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?RuleName(_, r)
    ; origin-track-forced(
        RuleName(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsRule()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    SortDef(s) -> s

  nabl-name-apply(s) =
    SortDef(s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?SortDef(s)
    ; origin-track-forced(
        SortDef(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSort()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    DataType(s, _) -> s

  nabl-name-apply(s) =
    DataType(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?DataType(s, _)
    ; origin-track-forced(
        DataType(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSort()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    SortRef(s) -> s

  nabl-name-apply(s) =
    SortRef(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?SortRef(s)
    ; origin-track-forced(
        SortRef(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSort()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    ConstructorDecl(c, _, _) -> c

  nabl-name-apply(s) =
    ConstructorDecl(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?ConstructorDecl(c, _, _)
    ; origin-track-forced(
        ConstructorDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSymbol()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    DataTypeConstructor(c, _) -> c

  nabl-name-apply(s) =
    DataTypeConstructor(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?DataTypeConstructor(c, _)
    ; origin-track-forced(
        DataTypeConstructor(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSymbol()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    FunctionDef(FunctionSig(f, _, _), _) -> f

  nabl-name-apply(s) =
    FunctionDef(FunctionSig(s, id, id), id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?FunctionDef(FunctionSig(f, _, _), _)
    ; origin-track-forced(
        FunctionDef(
          origin-track-forced(
            FunctionSig(
              nabl-def(
                ?c-uri1__
              , ?s-uri1__
              | lang__
              , ctx__
              , uniques__
              , uri__
              , uri__
              , NablNsSymbol()
              , Unique()
              , Current()
              , []
              , []
              )
            , id
            , id
            )
          |
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-scoping-site =
    ?FunctionEq(f, pat, body)
    ; nabl-scope(|[NablNsSymbol()])

  nabl-get-scope =
    ?FunctionEq(f, pat, body)
    ; ![NablNsSymbol()]

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?FunctionPatVar(v)
    ; origin-track-forced(
        FunctionPatVar(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSymbol()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?FunctionPatVar(v)
    ; origin-track-forced(
        FunctionPatVar(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSymbol()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    FunctionPatApp(f, args) -> f

  nabl-name-apply(s) =
    FunctionPatApp(s, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?FunctionPatApp(f, args)
    ; origin-track-forced(
        FunctionPatApp(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSymbol()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )

  nabl-get-name :
    FunctionExpVar(v) -> v

  nabl-name-apply(s) =
    FunctionExpVar(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?FunctionExpVar(v)
    ; origin-track-forced(
        FunctionExpVar(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSymbol()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    FunctionExpApp(f, args) -> f

  nabl-name-apply(s) =
    FunctionExpApp(s, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?FunctionExpApp(f, args)
    ; origin-track-forced(
        FunctionExpApp(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSymbol()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )

  nabl-get-scope =
    ?FunctionExpLet(v, e1, e2)
    ; ![NablNsSymbol()]

  nabl-get-name :
    FunctionExpLet(v, e1, e2) -> v

  nabl-name-apply(s) =
    FunctionExpLet(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?FunctionExpLet(v, e1, e2)
    ; origin-track-forced(
        FunctionExpLet(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSymbol()
          , Unique()
          , Current()
          , [NablNsSymbol()]
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])